<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>FAILED BINDER TRANSACTION</title>
      <link href="/2019/09/21/failed-binder-transaction/"/>
      <url>/2019/09/21/failed-binder-transaction/</url>
      
        <content type="html"><![CDATA[<h2 id="1-异常Log-Pattern"><a href="#1-异常Log-Pattern" class="headerlink" title="1.异常Log Pattern"></a>1.异常Log Pattern</h2><a id="more"></a><pre><code>BroadcastQueue: Can&#39;t deliver broadcast to com.my.app (pid 8047). Crashing it.ActivityManager: Killing 8047:com.my.demo/1000 (adj 0): scheduleCrash for &#39;can&#39;t deliver broadcast&#39; failedBroadcastQueue: Failure sending broadcast Intent { act=android.intent.action.BATTERY_CHANGED flg=0x60000010 (has extras) }BroadcastQueue: android.os.DeadObjectException: Transaction failed on small parcel; remote process probably diedBroadcastQueue:     at android.os.BinderProxy.transactNative(Native Method)BroadcastQueue:     at android.os.BinderProxy.transact(Binder.java:764)BroadcastQueue:     at android.app.IApplicationThread$Stub$Proxy.scheduleRegisteredReceiver(IApplicationThread.java:1560)BroadcastQueue:     at com.android.server.am.BroadcastQueue.performReceiveLocked(BroadcastQueue.java:491)BroadcastQueue:     at com.android.server.am.BroadcastQueue.deliverToRegisteredReceiverLocked(BroadcastQueue.java:703)BroadcastQueue:     at com.android.server.am.BroadcastQueue.processNextBroadcast(BroadcastQueue.java:858)BroadcastQueue:     at com.android.server.am.BroadcastQueue$BroadcastHandler.handleMessage(BroadcastQueue.java:171)BroadcastQueue:     at android.os.Handler.dispatchMessage(Handler.java:106)BroadcastQueue:     at android.os.Looper.loop(Looper.java:164)BroadcastQueue:     at android.os.HandlerThread.run(HandlerThread.java:65)BroadcastQueue:     at com.android.server.ServiceThread.run(ServiceThread.java:46)</code></pre><h2 id="2-Crash的过程"><a href="#2-Crash的过程" class="headerlink" title="2.Crash的过程"></a>2.Crash的过程</h2><p>出现两种情况</p><ul><li>1.data parcel size大于2m 200×1024</li><li>2.异常 主要两种 deadobjectexception 调用的进程死掉了<br>另外为其他异常</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@frameworks</span><span class="token operator">/</span>base<span class="token operator">/</span>core<span class="token operator">/</span>jni<span class="token operator">/</span>android_util_Binder<span class="token punctuation">.</span>cpp<span class="token keyword">void</span> <span class="token function">signalExceptionForError</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">,</span> status_t err<span class="token punctuation">,</span>        bool canThrowRemoteException<span class="token punctuation">,</span> <span class="token keyword">int</span> parcelSize<span class="token punctuation">)</span><span class="token keyword">case</span> FAILED_TRANSACTION<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"!!! FAILED BINDER TRANSACTION !!!  (parcel size = %d)"</span><span class="token punctuation">,</span> parcelSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>canThrowRemoteException <span class="token operator">&amp;&amp;</span> parcelSize <span class="token operator">></span> <span class="token number">200</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// bona fide large payload</span>        exceptionToThrow <span class="token operator">=</span> <span class="token string">"android/os/TransactionTooLargeException"</span><span class="token punctuation">;</span>        <span class="token function">snprintf</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token function">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"data parcel size %d bytes"</span><span class="token punctuation">,</span> parcelSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Heuristic: a payload smaller than this threshold "shouldn't" be too</span>        <span class="token comment" spellcheck="true">// big, so it's probably some other, more subtle problem.  In practice</span>        <span class="token comment" spellcheck="true">// it seems to always mean that the remote process died while the binder</span>        <span class="token comment" spellcheck="true">// transaction was already in flight.</span>        exceptionToThrow <span class="token operator">=</span> <span class="token punctuation">(</span>canThrowRemoteException<span class="token punctuation">)</span>                <span class="token operator">?</span> <span class="token string">"android/os/DeadObjectException"</span>                <span class="token operator">:</span> <span class="token string">"java/lang/RuntimeException"</span><span class="token punctuation">;</span>        <span class="token function">snprintf</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token function">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>                <span class="token string">"Transaction failed on small parcel; remote process probably died"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">jniThrowException</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> exceptionToThrow<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span></code></pre><p>//performReceiveLocked报错并且crash app</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@BroadcastQueue</span><span class="token punctuation">.</span>java    <span class="token keyword">void</span> <span class="token function">performReceiveLocked</span><span class="token punctuation">(</span>ProcessRecord app<span class="token punctuation">,</span> IIntentReceiver receiver<span class="token punctuation">,</span>            Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> resultCode<span class="token punctuation">,</span> String data<span class="token punctuation">,</span> Bundle extras<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> ordered<span class="token punctuation">,</span> <span class="token keyword">boolean</span> sticky<span class="token punctuation">,</span> <span class="token keyword">int</span> sendingUser<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Send the intent to the receiver asynchronously using one-way binder calls.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>app <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>thread <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// If we have an app thread, do the call through that so it is</span>                <span class="token comment" spellcheck="true">// correctly ordered with other one-way calls.</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    app<span class="token punctuation">.</span>thread<span class="token punctuation">.</span><span class="token function">scheduleRegisteredReceiver</span><span class="token punctuation">(</span>receiver<span class="token punctuation">,</span> intent<span class="token punctuation">,</span> resultCode<span class="token punctuation">,</span>                            data<span class="token punctuation">,</span> extras<span class="token punctuation">,</span> ordered<span class="token punctuation">,</span> sticky<span class="token punctuation">,</span> sendingUser<span class="token punctuation">,</span> app<span class="token punctuation">.</span>repProcState<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// TODO: Uncomment this when (b/28322359) is fixed and we aren't getting</span>                <span class="token comment" spellcheck="true">// DeadObjectException when the process isn't actually dead.</span>                <span class="token comment" spellcheck="true">//} catch (DeadObjectException ex) {</span>                <span class="token comment" spellcheck="true">// Failed to call into the process.  It's dying so just let it die and move on.</span>                <span class="token comment" spellcheck="true">//    throw ex;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Failed to call into the process. It's either dying or wedged. Kill it gently.</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mService<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Can't deliver broadcast to "</span> <span class="token operator">+</span> app<span class="token punctuation">.</span>processName                                <span class="token operator">+</span> <span class="token string">" (pid "</span> <span class="token operator">+</span> app<span class="token punctuation">.</span>pid <span class="token operator">+</span> <span class="token string">"). Crashing it."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//here</span>                        app<span class="token punctuation">.</span><span class="token function">scheduleCrash</span><span class="token punctuation">(</span><span class="token string">"can't deliver broadcast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//crash app</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Application has died. Receiver doesn't exist.</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemoteException</span><span class="token punctuation">(</span><span class="token string">"app.thread must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            receiver<span class="token punctuation">.</span><span class="token function">performReceive</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> resultCode<span class="token punctuation">,</span> data<span class="token punctuation">,</span> extras<span class="token punctuation">,</span> ordered<span class="token punctuation">,</span>                    sticky<span class="token punctuation">,</span> sendingUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@frameworks</span><span class="token operator">/</span>base<span class="token operator">/</span>services<span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>server<span class="token operator">/</span>am<span class="token operator">/</span>ProcessRecord<span class="token punctuation">.</span>java<span class="token keyword">void</span> <span class="token function">scheduleCrash</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Checking killedbyAm should keep it from showing the crash dialog if the process</span>    <span class="token comment" spellcheck="true">// was already dead for a good / normal reason.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>killedByAm<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>thread <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> Process<span class="token punctuation">.</span><span class="token function">myPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"scheduleCrash: trying to crash system process!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">long</span> ident <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                thread<span class="token punctuation">.</span><span class="token function">scheduleCrash</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//throw RemoteServiceException然后kill</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// If it's already dead our work is done. If it's wedged just kill it.</span>                <span class="token comment" spellcheck="true">// We won't get the crash dialog or the error reporting.</span>                <span class="token function">kill</span><span class="token punctuation">(</span><span class="token string">"scheduleCrash for '"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"' failed"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                Binder<span class="token punctuation">.</span><span class="token function">restoreCallingIdentity</span><span class="token punctuation">(</span>ident<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">kill</span><span class="token punctuation">(</span>String reason<span class="token punctuation">,</span> <span class="token keyword">boolean</span> noisy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>killedByAm<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>Trace<span class="token punctuation">.</span>TRACE_TAG_ACTIVITY_MANAGER<span class="token punctuation">,</span> <span class="token string">"kill"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>noisy<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Killing "</span> <span class="token operator">+</span> <span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" (adj "</span> <span class="token operator">+</span> setAdj <span class="token operator">+</span> <span class="token string">"): "</span> <span class="token operator">+</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        EventLog<span class="token punctuation">.</span><span class="token function">writeEvent</span><span class="token punctuation">(</span>EventLogTags<span class="token punctuation">.</span>AM_KILL<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> processName<span class="token punctuation">,</span> setAdj<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        Process<span class="token punctuation">.</span><span class="token function">killProcessQuiet</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        ActivityManagerService<span class="token punctuation">.</span><span class="token function">killProcessGroup</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>persistent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            killed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            killedByAm <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>Trace<span class="token punctuation">.</span>TRACE_TAG_ACTIVITY_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>@frameworks/base/core/java/android/app/ActivityThread.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduleCrash</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sendMessage</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span>SCHEDULE_CRASH<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token number">1767</span>                <span class="token keyword">case</span> SCHEDULE_CRASH<span class="token operator">:</span><span class="token number">1768</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemoteServiceException</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>msg<span class="token punctuation">.</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-Binder错误信息kernel-log"><a href="#3-Binder错误信息kernel-log" class="headerlink" title="3.Binder错误信息kernel log"></a>3.Binder错误信息kernel log</h2><pre class=" language-cpp"><code class="language-cpp">@binder<span class="token punctuation">.</span>c4067err_alloc_t_failed<span class="token operator">:</span>4068err_bad_call_stack<span class="token operator">:</span>4069err_empty_call_stack<span class="token operator">:</span>4070err_dead_binder<span class="token operator">:</span>4071err_invalid_target_handle<span class="token operator">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">4081</span>    <span class="token function">binder_debug</span><span class="token punctuation">(</span>BINDER_DEBUG_FAILED_TRANSACTION<span class="token punctuation">,</span><span class="token number">4082</span>         <span class="token string">"%d:%d transaction failed %d/%d, size %lld-%lld line %d\n"</span><span class="token punctuation">,</span><span class="token number">4083</span>         proc<span class="token operator">-</span><span class="token operator">></span>pid<span class="token punctuation">,</span> thread<span class="token operator">-</span><span class="token operator">></span>pid<span class="token punctuation">,</span> return_error<span class="token punctuation">,</span> return_error_param<span class="token punctuation">,</span><span class="token function">4084</span>         <span class="token punctuation">(</span>u64<span class="token punctuation">)</span>tr<span class="token operator">-</span><span class="token operator">></span>data_size<span class="token punctuation">,</span> <span class="token punctuation">(</span>u64<span class="token punctuation">)</span>tr<span class="token operator">-</span><span class="token operator">></span>offsets_size<span class="token punctuation">,</span><span class="token number">4085</span>         return_error_line<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code>11-25 09:31:23.786059  1052  1052 I [128416.232769](6)[1052:ActivityManager]binder: 1025:1052 transaction failed 29201/-28, size 792-8 line 3781</code></pre><p>那么问题来了，这个过程也是使用binder.<br>同样是systemserver向应用发送，为什么之前不成功，现在可以了,因为当时空间不够，后面可能够了</p><pre><code>return_error --&gt; 29201 --&gt; BR_FAILED_REPLY return_error_param  --&gt; 28 --&gt; ENOSPC    /* No space left on device */31#define    ENOSPC    28    /* No space left on device */</code></pre><p>还有些错是parcel太大导致，这里是没有空间，可能注册广播太多，注销慢，或者逻辑错误，也可能是进程死了<br>还可以可能比如systemserver的线程都在做数据库之类的blocked</p><h2 id="4-其他例子"><a href="#4-其他例子" class="headerlink" title="4.其他例子"></a>4.其他例子</h2><p><a href="https://ask.csdn.net/questions/682317" target="_blank" rel="noopener">https://ask.csdn.net/questions/682317</a></p><pre><code>java.lang.RuntimeException: android.os.TransactionTooLargeException: data parcel size 3625220 bytesat android.app.ActivityThread$StopInfo.run(ActivityThread.java:3982)at android.os.Handler.handleCallback(Handler.java:761)at android.os.Handler.dispatchMessage(Handler.java:98)at android.os.Looper.loop(Looper.java:156)at android.app.ActivityThread.main(ActivityThread.java:6523)at java.lang.reflect.Method.invoke(Native Method)at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:942)at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:832)Caused by: android.os.TransactionTooLargeException: data parcel size 3625220 bytesat android.os.BinderProxy.transactNative(Native Method)at android.os.BinderProxy.transact(Binder.java:617)at android.app.ActivityManagerProxy.activityStopped(ActivityManagerNative.java:3632)at android.app.ActivityThread$StopInfo.run(ActivityThread.java:3974)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android Binder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AIDL 使用</title>
      <link href="/2019/09/21/lunbo/aidl-shi-yong/"/>
      <url>/2019/09/21/lunbo/aidl-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-服务端"><a href="#1-服务端" class="headerlink" title="1.服务端"></a>1.服务端</h2><a id="more"></a><p>//add aidl</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IOperationManager</span> <span class="token punctuation">{</span>   <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span>in Parameter parameter1 <span class="token punctuation">,</span> in Parameter parameter2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">registerListener</span><span class="token punctuation">(</span>in IOnOperationCompletedListener listener<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">unregisterListener</span><span class="token punctuation">(</span>in IOnOperationCompletedListener listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>//计算完成结果，给客户端</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IOnOperationCompletedListener</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">onOperationCompleted</span><span class="token punctuation">(</span>in Parameter result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>//实现stub</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> IOperationManager<span class="token punctuation">.</span>Stub stub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IOperationManager<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span>Parameter parameter1<span class="token punctuation">,</span> Parameter parameter2<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"operation 被调用，延时5秒，模拟耗时计算"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> param1 <span class="token operator">=</span> parameter1<span class="token punctuation">.</span><span class="token function">getParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> param2 <span class="token operator">=</span> parameter2<span class="token punctuation">.</span><span class="token function">getParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Parameter result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parameter</span><span class="token punctuation">(</span>param1 <span class="token operator">*</span> param2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在操作 RemoteCallbackList 前，必须先调用其 beginBroadcast 方法</span>        <span class="token comment" spellcheck="true">//此外，beginBroadcast 必须和 finishBroadcast配套使用</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> callbackList<span class="token punctuation">.</span><span class="token function">beginBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            IOnOperationCompletedListener listener <span class="token operator">=</span> callbackList<span class="token punctuation">.</span><span class="token function">getBroadcastItem</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>listener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                listener<span class="token punctuation">.</span><span class="token function">onOperationCompleted</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//提供数据result给客户端</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        callbackList<span class="token punctuation">.</span><span class="token function">finishBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"计算结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerListener</span><span class="token punctuation">(</span>IOnOperationCompletedListener listener<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        callbackList<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"registerListener 注册回调成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//客户端调用功能直接注册</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unregisterListener</span><span class="token punctuation">(</span>IOnOperationCompletedListener listener<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        callbackList<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"unregisterListener 解除注册回调成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> IBinder <span class="token function">onBind</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> stub<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-客户端"><a href="#2-客户端" class="headerlink" title="2.客户端"></a>2.客户端</h2><p>//binder到服务端</p><pre class=" language-java"><code class="language-java"><span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> serviceConnection<span class="token punctuation">,</span> Context<span class="token punctuation">.</span>BIND_AUTO_CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> ServiceConnection serviceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span>ComponentName name<span class="token punctuation">,</span> IBinder service<span class="token punctuation">)</span> <span class="token punctuation">{</span>        iOperationManager <span class="token operator">=</span> IOperationManager<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取iOperationManager</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span>ComponentName name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        iOperationManager <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>//通过iOperationManager调用aidl方法来访问server端</p><pre class=" language-java"><code class="language-java"><span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_unregisterListener<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iOperationManager <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            iOperationManager<span class="token punctuation">.</span><span class="token function">unregisterListener</span><span class="token punctuation">(</span>completedListener<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_operation<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> param1 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>et_param1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> param2 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>et_param2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Parameter parameter1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parameter</span><span class="token punctuation">(</span>param1<span class="token punctuation">)</span><span class="token punctuation">;</span>            Parameter parameter2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parameter</span><span class="token punctuation">(</span>param2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>iOperationManager <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    iOperationManager<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span>parameter1<span class="token punctuation">,</span> parameter2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>//实现 completedListener来处理返回结果</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> IOnOperationCompletedListener completedListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IOnOperationCompletedListener<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOperationCompleted</span><span class="token punctuation">(</span><span class="token keyword">final</span> Parameter result<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        <span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                et_result<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"运算结果： "</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android Binder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binder通信介绍和示例(c client端和 c service端  java client端和c service端)</title>
      <link href="/2019/09/21/binder-tong-xin-jie-shao-he-shi-li-c-client-duan-he-c-service-duan-java-client-duan-he-c-service-duan/"/>
      <url>/2019/09/21/binder-tong-xin-jie-shao-he-shi-li-c-client-duan-he-c-service-duan-java-client-duan-he-c-service-duan/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Java端-binder-client端"><a href="#1-Java端-binder-client端" class="headerlink" title="1.Java端 binder client端"></a>1.Java端 binder client端</h3><a id="more"></a><p>ServiceManager.getService获取binder，然后调用binder.transact来通信</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@MainActivity</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SERVICE_NAME <span class="token operator">=</span> <span class="token string">"binder.cservice"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//建议使用FIRST_CALL_TRANSACTION来表示感觉比较规范，只要和binder对端一致就可以</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NOTIFY_MESSAGE <span class="token operator">=</span> IBinder<span class="token punctuation">.</span>FIRST_CALL_TRANSACTION<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DELETE_FILE <span class="token operator">=</span> IBinder<span class="token punctuation">.</span>FIRST_CALL_TRANSACTION <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ADD_FILE <span class="token operator">=</span> IBinder<span class="token punctuation">.</span>FIRST_CALL_TRANSACTION <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RELEASE_FILE <span class="token operator">=</span> IBinder<span class="token punctuation">.</span>FIRST_CALL_TRANSACTION <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Button btn <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"initView onClick: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">notityCService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">notityCService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        IBinder binder <span class="token operator">=</span> null <span class="token punctuation">;</span>        binder <span class="token operator">=</span> ServiceManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span>SERVICE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>binder <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"notityCService binder is null: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Parcel data <span class="token operator">=</span> Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Parcel reply <span class="token operator">=</span> Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> replyResult <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            binder<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span>DELETE_FILE<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            replyResult <span class="token operator">=</span> reply<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"result1: "</span> <span class="token operator">+</span> replyResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            replyResult <span class="token operator">=</span> reply<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"result2: "</span> <span class="token operator">+</span> replyResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"RemoteException: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        data<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reply<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-C-binder-service端"><a href="#2-C-binder-service端" class="headerlink" title="2.C binder service端"></a>2.C binder service端</h3><p>binder server端通过onTransact，来获取binder端来的data,并且把回复写到reply里</p><pre class=" language-cpp"><code class="language-cpp">@MyPrint<span class="token punctuation">.</span>cpp<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"MyPrint.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;log/log.h></span> </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/Parcel.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;utils/Log.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> SERVICE_NAME "binder.cservice"</span><span class="token macro property">#<span class="token directive keyword">define</span> LOG_TAG "MyPrint"</span><span class="token keyword">namespace</span> android <span class="token punctuation">{</span>MyPrint<span class="token operator">::</span><span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>MyPrint<span class="token operator">::</span><span class="token operator">~</span><span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> MyPrint<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">defaultServiceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addService</span><span class="token punctuation">(</span><span class="token function">String16</span><span class="token punctuation">(</span>SERVICE_NAME<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span>status_t MyPrint<span class="token operator">::</span><span class="token function">onTransact</span><span class="token punctuation">(</span>uint32_t code<span class="token punctuation">,</span> <span class="token keyword">const</span> Parcel<span class="token operator">&amp;</span> data<span class="token punctuation">,</span> Parcel<span class="token operator">*</span> reply<span class="token punctuation">,</span> uint32_t flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> NOTIFY_MESSAGE<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> message <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">readCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"onTransact NOTIFY_MESSAGE message = %s"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        reply<span class="token operator">-</span><span class="token operator">></span><span class="token function">writeInt32</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"onTransact NOTIFY_MESSAGE reply 5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">case</span> DELETE_FILE<span class="token operator">:</span> <span class="token punctuation">{</span>        String16 message <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">readString16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"onTransact DELETE_FILE message = %s"</span><span class="token punctuation">,</span> <span class="token function">String8</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reply<span class="token operator">-</span><span class="token operator">></span><span class="token function">writeInt32</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reply<span class="token operator">-</span><span class="token operator">></span><span class="token function">writeInt32</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"onTransact DELETE_FILE reply 6 7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"Unsupported command code: (%d)"</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> BBinder<span class="token operator">::</span><span class="token function">onTransact</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//namespace</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#MyPrint.h</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> _MYPRINT_HEADER_</span><span class="token macro property">#<span class="token directive keyword">define</span> _MYPRINT_HEADER_</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/IInterface.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/Parcel.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/IServiceManager.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;utils/threads.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">namespace</span> android<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">MyPrint</span><span class="token operator">:</span> <span class="token keyword">public</span> BBinder<span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//BBinder</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">enum</span> <span class="token punctuation">{</span>            NOTIFY_MESSAGE      <span class="token operator">=</span> IBinder<span class="token operator">::</span>FIRST_CALL_TRANSACTION<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//注意这里是, 和 ::</span>            DELETE_FILE         <span class="token operator">=</span> IBinder<span class="token operator">::</span>FIRST_CALL_TRANSACTION <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>            ADD_FILE            <span class="token operator">=</span> IBinder<span class="token operator">::</span>FIRST_CALL_TRANSACTION <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span>            RELEASE_FILE        <span class="token operator">=</span> IBinder<span class="token operator">::</span>FIRST_CALL_TRANSACTION <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">virtual</span> status_t <span class="token function">onTransact</span><span class="token punctuation">(</span>uint32_t<span class="token punctuation">,</span> <span class="token keyword">const</span> Parcel<span class="token operator">&amp;</span><span class="token punctuation">,</span> Parcel<span class="token operator">*</span><span class="token punctuation">,</span> uint32_t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//namespace</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p>rc唤醒  /system/bin/binderCService时，执行main.cpp，然后addservice并且执行MyPrint::MyPrint()来初始化</p><pre class=" language-cpp"><code class="language-cpp">@main<span class="token punctuation">.</span>cpp<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/IServiceManager.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/IPCThreadState.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/ProcessState.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cutils/log.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"MyPrint.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;utils/Log.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> android<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"MyPrint cservice is starting up..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sp<span class="token operator">&lt;</span>ProcessState<span class="token operator">></span> <span class="token function">proc</span><span class="token punctuation">(</span>ProcessState<span class="token operator">::</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sp<span class="token operator">&lt;</span>IServiceManager<span class="token operator">></span> sm <span class="token operator">=</span> <span class="token function">defaultServiceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MyPrint<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//add service 并且初始化MyPrint</span>    ProcessState<span class="token operator">::</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     IPCThreadState<span class="token operator">::</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">joinThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"MyPrint cservice exits thread loop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>@Android.mk</p><pre><code>LOCAL_PATH:= $(call my-dir)include $(CLEAR_VARS)LOCAL_C_INCLUDES := $(LOCAL_PATH)  \                    $(TARGET_OUT_HEADERS)/common/incLOCAL_SHARED_LIBRARIES := \        libc \        libcutils \        libutils \        liblog \        libdl \        libbinderLOCAL_MODULE := binderCServiceLOCAL_SRC_FILES := main.cpp MyPrint.cpp LOCAL_MODULE_TAGS := optional#LOCAL_CFLAGS := $(QSEECOM_CFLAGS)LOCAL_INIT_RC := binderCService.rcinclude $(BUILD_EXECUTABLE)include $(call all-makefiles-under,$(LOCAL_PATH))</code></pre><p>//默认是会有selinux问题，不会启动成功，需要手动 binderCService &amp;来启动</p><pre><code>@binderCService.rcservice binderCService /system/bin/binderCService    class late_start    user root    group root</code></pre><p>//手动启动后，执行如下命令，可以看到服务起来，并且打印main.cpp中的log</p><pre><code>msm8996_gvmq:/ # service list| grep bind0    binder.cservice: []</code></pre><h3 id="3-c-client端-binder到service端"><a href="#3-c-client端-binder到service端" class="headerlink" title="3.c client端 binder到service端"></a>3.c client端 binder到service端</h3><p>c client端通过ibinder-&gt;transact，写2019到binder server端</p><pre class=" language-cpp"><code class="language-cpp">@binder_test<span class="token punctuation">.</span>cpp<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/IServiceManager.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/IBinder.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/Parcel.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/ProcessState.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/IPCThreadState.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cutils/log.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;utils/Log.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> android<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> SERVICE_NAME "binder.cservice"</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sp<span class="token operator">&lt;</span>IServiceManager<span class="token operator">></span> sm <span class="token operator">=</span> <span class="token function">defaultServiceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sp<span class="token operator">&lt;</span>IBinder<span class="token operator">></span> ibinder <span class="token operator">=</span> sm<span class="token operator">-</span><span class="token operator">></span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token function">String16</span><span class="token punctuation">(</span>SERVICE_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ibinder <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"binder_test binder is null"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Parcel data<span class="token punctuation">,</span> reply<span class="token punctuation">;</span>    <span class="token keyword">int</span> cmd <span class="token operator">=</span> IBinder<span class="token operator">::</span>FIRST_CALL_TRANSACTION<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"binder_test transact  FIRST_CALL_TRANSACTION"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">writeInt32</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> ibinder<span class="token operator">-</span><span class="token operator">></span><span class="token function">transact</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"binder_test transact : %d"</span> <span class="token punctuation">,</span>reply<span class="token punctuation">.</span><span class="token function">readInt32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">freeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>//c的客户端也是system/bin/binder_test，通过binder_test来启动</p><pre><code>LOCAL_PATH:= $(call my-dir)include $(CLEAR_VARS)LOCAL_SHARED_LIBRARIES := \        libc \        libcutils \        libutils \        liblog \        libdl \        libbinderLOCAL_MODULE := binder_testLOCAL_SRC_FILES := binder_test.cppLOCAL_MODULE_TAGS := optionalinclude $(BUILD_EXECUTABLE)</code></pre><p>binder server端，修改了下，必须读client的data才能走下去，这里用data.readInt32()</p><pre><code>@MyPrint.cpp    case NOTIFY_MESSAGE: {        ALOGI(&quot;onTransact NOTIFY_MESSAGE message&quot;);        int message = data.readInt32();        reply-&gt;writeInt32(5);        ALOGI(&quot;onTransact NOTIFY_MESSAGE reply 5&quot;);        break;    }</code></pre><p>调试时限制性 binderCService &amp; 启动service，然后binder_test在启动client端就可以了<br>结果如下：</p><pre><code>I         : MyPrint cservice is starting up...I         : binder_test transact  FIRST_CALL_TRANSACTIONI MyPrint : onTransact NOTIFY_MESSAGE messageI MyPrint : onTransact NOTIFY_MESSAGE reply 5I         : binder_test transact : 5</code></pre><h3 id="4-parcel介绍和使用"><a href="#4-parcel介绍和使用" class="headerlink" title="4.parcel介绍和使用"></a>4.parcel介绍和使用</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//String16 String8 Const char*关系</span>String16 name16 <span class="token operator">=</span> <span class="token function">String16</span><span class="token punctuation">(</span><span class="token string">"HellOThEWrolD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//定义初始化String16</span>String8 name8 <span class="token operator">=</span> <span class="token function">String8</span><span class="token punctuation">(</span>name16<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//String16转为String8</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>C_name8 <span class="token operator">=</span> name8<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//String8转为const char *</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span>到<span class="token keyword">char</span><span class="token operator">*</span>的转换：<span class="token keyword">char</span> <span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>C_name8<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> C_name8<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>java端Parcel类使用如下</p><pre class=" language-cpp"><code class="language-cpp">Parcel data <span class="token operator">=</span> Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取Parcel</span>data<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//writeString写入数据</span>Parcel reply <span class="token operator">=</span> Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>binder<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span>DELETE_FILE<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//binder transact</span>data<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//释放parcel</span>reply<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>C Server端</p><pre class=" language-cpp"><code class="language-cpp">status_t MyPrint<span class="token operator">::</span><span class="token function">onTransact</span><span class="token punctuation">(</span>uint32_t code<span class="token punctuation">,</span> <span class="token keyword">const</span> Parcel<span class="token operator">&amp;</span> data<span class="token punctuation">,</span> Parcel<span class="token operator">*</span> reply<span class="token punctuation">,</span> uint32_t flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> DELETE_FILE<span class="token operator">:</span> <span class="token punctuation">{</span>        String16 message <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">readString16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//readString16</span>        <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"onTransact DELETE_FILE message = %s"</span><span class="token punctuation">,</span> <span class="token function">String8</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//先转为Sring8,在使用.string()转为Const char*才可以打印</span>        reply<span class="token operator">-</span><span class="token operator">></span><span class="token function">writeInt32</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//写Int</span>        reply<span class="token operator">-</span><span class="token operator">></span><span class="token function">writeInt32</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"onTransact DELETE_FILE reply 6 7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>C Client端</p><pre class=" language-cpp"><code class="language-cpp">Parcel data<span class="token punctuation">,</span> reply<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//初始化</span><span class="token keyword">int</span> cmd <span class="token operator">=</span> IBinder<span class="token operator">::</span>FIRST_CALL_TRANSACTION<span class="token punctuation">;</span>String8 <span class="token function">src1</span><span class="token punctuation">(</span><span class="token string">"HelloDayi "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span><span class="token function">writeString8</span><span class="token punctuation">(</span>src1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//write</span>ret <span class="token operator">=</span> ibinder<span class="token operator">-</span><span class="token operator">></span><span class="token function">transact</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span><span class="token function">freeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//释放</span></code></pre><h3 id="5-service端-selinux"><a href="#5-service端-selinux" class="headerlink" title="5.service端 selinux"></a>5.service端 selinux</h3><p>测试使用adb shell setenforce 0关闭selinux检测，然后binderCService &amp;来启动service</p>]]></content>
      
      
      <categories>
          
          <category> Android Binder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binder通信介绍和示例(java client端和java service端)</title>
      <link href="/2019/09/21/binder-tong-xin-jie-shao-he-shi-li-java-client-duan-he-java-service-duan/"/>
      <url>/2019/09/21/binder-tong-xin-jie-shao-he-shi-li-java-client-duan-he-java-service-duan/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-AIDL-binderService来实现"><a href="#一、-AIDL-binderService来实现" class="headerlink" title="一、 AIDL binderService来实现"></a>一、 AIDL binderService来实现</h2><h3 id="1-aidl-server端"><a href="#1-aidl-server端" class="headerlink" title="1.aidl server端"></a>1.aidl server端</h3><a id="more"></a><p>创建aidl文件，写接口方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// IDeleteFIle.aidl</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Declare any non-default types here with import statements</span><span class="token keyword">interface</span> <span class="token class-name">IDeleteFIle</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span> String aString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><!-- more --><p>写IDeleteFIle.Stub文件，来实现方法具体需要做的事情</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeleteFile</span> <span class="token keyword">extends</span> <span class="token class-name">IDeleteFIle<span class="token punctuation">.</span>Stub</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  String TAG <span class="token operator">=</span> <span class="token string">"BinderServer"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>String aString<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"delete file: "</span> <span class="token operator">+</span> aString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我这里实现是client端binderService时，会执行Service.onCreate方法，在这里初始化stub的类，然后bind成功后在onBind返回mDeleteFile<br>client端就可以通过IBinder来操作DeleteFile 类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeleteBinderService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  String TAG <span class="token operator">=</span> <span class="token string">"BinderServer"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DeleteBinderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  DeleteFile mDeleteFile<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"oncrete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mDeleteFile <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mDeleteFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> IBinder <span class="token function">onBind</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mDeleteFile<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">onStartCommand</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartCommand</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> startId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mDeleteFile <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onUnbind</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mDeleteFile <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onUnbind</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>AndroidManifest.xml中需要定义让其他process可以访问此service</p><pre><code>&lt;service     android:name=&quot;.DeleteBinderService&quot;     android:enabled=&quot;true&quot;     android:exported=&quot;true&quot;&gt;&lt;/service&gt;</code></pre><h3 id="2-aidl-client端"><a href="#2-aidl-client端" class="headerlink" title="2.aidl client端"></a>2.aidl client端</h3><p>***需要把service端的aidl文件，连路径和文件一起拷贝到client app中</p><p>client端bindService(intent, mServiceConnection , Context.BIND_AUTO_CREATE)获取到Ibinder对象就可以操作了</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mbindertest<span class="token punctuation">;</span><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>ComponentName<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>ServiceConnection<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>KeyEvent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>MotionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  String TAG <span class="token operator">=</span> <span class="token string">"BinderClient"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PKG_NAME <span class="token operator">=</span> <span class="token string">"com.example.binderserver"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CLS_NAME <span class="token operator">=</span> <span class="token string">"com.example.binderserver.DeleteBinderService"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> IDeleteFIle idel<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bindServiceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">setPackage</span><span class="token punctuation">(</span>PKG_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">setClassName</span><span class="token punctuation">(</span>PKG_NAME<span class="token punctuation">,</span>CLS_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> mServiceConnection <span class="token punctuation">,</span> Context<span class="token punctuation">.</span>BIND_AUTO_CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ServiceConnection mServiceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span>ComponentName componentName<span class="token punctuation">,</span> IBinder iBinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"onServiceConnected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             idel <span class="token operator">=</span> IDeleteFIle<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>iBinder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span>ComponentName componentName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            idel <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unbindServiceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">unbindService</span><span class="token punctuation">(</span>mServiceConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"time: "</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>idel <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                idel<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"time: "</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unbindServiceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bindServiceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-IDeleteFIle-Stub-asInterface-iBinder"><a href="#3-IDeleteFIle-Stub-asInterface-iBinder" class="headerlink" title="3.IDeleteFIle.Stub.asInterface(iBinder);"></a>3.IDeleteFIle.Stub.asInterface(iBinder);</h3><p>IDeleteFIle编译生成文件如下，IDeleteFIle asInterface(android.os.IBinder obj)返回return new com.example.binderserver.IDeleteFIle.Stub.Proxy(obj);是IDeleteFIle.Stub.Proxy远程调用</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * This file is auto-generated.  DO NOT MODIFY. */</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Declare any non-default types here with import statements</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDeleteFIle</span> <span class="token keyword">extends</span> <span class="token class-name">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IInterface</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/** Default implementation for IDeleteFIle. */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Default</span> <span class="token keyword">implements</span> <span class="token class-name">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle</span>  <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String aString<span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/** Local-side IPC implementation stub class. */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Stub</span> <span class="token keyword">extends</span> <span class="token class-name">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Binder</span> <span class="token keyword">implements</span> <span class="token class-name">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle</span>  <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String DESCRIPTOR <span class="token operator">=</span> <span class="token string">"com.example.binderserver.IDeleteFIle"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Construct the stub at attach it to the interface. */</span>    <span class="token keyword">public</span> <span class="token function">Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachInterface</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Cast an IBinder object into an com.example.binderserver.IDeleteFIle interface,     * generating a proxy if needed.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle <span class="token function">asInterface</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IInterface iin <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">queryLocalInterface</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>iin<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>iin <span class="token keyword">instanceof</span> <span class="token class-name">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle<span class="token punctuation">)</span>iin<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span>Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTransact</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel data<span class="token punctuation">,</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel reply<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException    <span class="token punctuation">{</span>      java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String descriptor <span class="token operator">=</span> DESCRIPTOR<span class="token punctuation">;</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">case</span> INTERFACE_TRANSACTION<span class="token operator">:</span>        <span class="token punctuation">{</span>          reply<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> TRANSACTION_delete<span class="token operator">:</span>        <span class="token punctuation">{</span>          data<span class="token punctuation">.</span><span class="token function">enforceInterface</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>          java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String _arg0<span class="token punctuation">;</span>          _arg0 <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>_arg0<span class="token punctuation">)</span><span class="token punctuation">;</span>          reply<span class="token punctuation">.</span><span class="token function">writeNoException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTransact</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle</span>    <span class="token punctuation">{</span>      <span class="token keyword">private</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder mRemote<span class="token punctuation">;</span>      <span class="token function">Proxy</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder remote<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        mRemote <span class="token operator">=</span> remote<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">return</span> mRemote<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String <span class="token function">getInterfaceDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">return</span> DESCRIPTOR<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String aString<span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException      <span class="token punctuation">{</span>        android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel _data <span class="token operator">=</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel _reply <span class="token operator">=</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          _data<span class="token punctuation">.</span><span class="token function">writeInterfaceToken</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>          _data<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>aString<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">boolean</span> _status <span class="token operator">=</span> mRemote<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span>Stub<span class="token punctuation">.</span>TRANSACTION_delete<span class="token punctuation">,</span> _data<span class="token punctuation">,</span> _reply<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_status <span class="token operator">&amp;&amp;</span> <span class="token function">getDefaultImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">getDefaultImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>aString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          _reply<span class="token punctuation">.</span><span class="token function">readException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>          _reply<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          _data<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle sDefaultImpl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TRANSACTION_delete <span class="token operator">=</span> <span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder<span class="token punctuation">.</span>FIRST_CALL_TRANSACTION <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">setDefaultImpl</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle impl<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Stub<span class="token punctuation">.</span>Proxy<span class="token punctuation">.</span>sDefaultImpl <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> impl <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Stub<span class="token punctuation">.</span>Proxy<span class="token punctuation">.</span>sDefaultImpl <span class="token operator">=</span> impl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle <span class="token function">getDefaultImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Stub<span class="token punctuation">.</span>Proxy<span class="token punctuation">.</span>sDefaultImpl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String aString<span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="二、-AIDL-ServiceManager-addService来实现"><a href="#二、-AIDL-ServiceManager-addService来实现" class="headerlink" title="二、 AIDL ServiceManager.addService来实现"></a>二、 AIDL ServiceManager.addService来实现</h2><h3 id="1-server端"><a href="#1-server端" class="headerlink" title="1.server端"></a>1.server端</h3><p>//首先写aidl文件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// IDeleteFIle.aidl</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>serviceserver<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Declare any non-default types here with import statements</span><span class="token keyword">interface</span> <span class="token class-name">IDeleteFIle</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Demonstrates some basic types that you can use as parameters     * and return values in AIDL.     */</span>    <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span>String aString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>//然后写具体实现的stub文件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>serviceserver<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeleteFile</span> <span class="token keyword">extends</span> <span class="token class-name">IDeleteFIle<span class="token punctuation">.</span>Stub</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span>String aString<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>FileService<span class="token punctuation">.</span>TAG <span class="token punctuation">,</span> aString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>写具体的Service文件，作用就是addService，新建对象new<br>DeleteFile()，好让client调用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>serviceserver<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>ServiceManager<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"BinderServer"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SERVICE_NAME <span class="token operator">=</span> <span class="token string">"testservice"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">FileService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">publishMyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publishMyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"publishMyService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServiceManager<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span>SERVICE_NAME<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DeleteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Service启用，我这里是使用activity来测试，比如系统有接收开机广播，还有systemserver来启动</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>serviceserver<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"BinderServer"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> FileService fileService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"initService"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fileService <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            fileService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-Client端"><a href="#2-Client端" class="headerlink" title="2.Client端"></a>2.Client端</h3><p>把aidl文件放入到client端，添加ANdroid.mk编译</p><p>Client端通过IDeleteFIle.Stub.asInterface(ServiceManager.getService(“testservice”));来调用，和前面一样</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>serviceclient<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>MotionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TabHost<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>ServiceManager<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>serviceserver<span class="token punctuation">.</span>IDeleteFIle<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"BinderClient"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> IDeleteFIle idel<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getBinderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBinderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"getBinderService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        idel <span class="token operator">=</span> IDeleteFIle<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>ServiceManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token string">"testservice"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onTouchEvent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>idel <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"idel.delete"</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                idel<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意事项：</p><ul><li>1.在测试时会有selinux问题，使用setenfroce 0来调试，没解selilnux</li><li>2.这两种特点，一个是放在系统里一直运行，bindService可以唤醒他，并且unbind</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android Binder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binder调用结构流程图</title>
      <link href="/2019/09/21/lunbo/binder-diao-yong-jie-gou-liu-cheng-tu/"/>
      <url>/2019/09/21/lunbo/binder-diao-yong-jie-gou-liu-cheng-tu/</url>
      
        <content type="html"><![CDATA[<p>参考link:</p><ul><li><a href="http://gityuan.com/2016/09/04/binder-start-service/" target="_blank" rel="noopener">http://gityuan.com/2016/09/04/binder-start-service/</a>   //彻底理解Android Binder通信架构</li><li><a href="http://gityuan.com/2018/02/17/monkey-deadlock/" target="_blank" rel="noopener">http://gityuan.com/2018/02/17/monkey-deadlock/</a>    //跑monkey压力测试过程的冻屏案例</li></ul><a id="more"></a><h3 id="1-binder调用流程图"><a href="#1-binder调用流程图" class="headerlink" title="1.binder调用流程图"></a>1.binder调用流程图</h3><p><img src="https://raw.githubusercontent.com/wd623894174/blogPic/master/binder/binderIoctl.jpeg" alt></p><ul><li>1.发起端线程向Binder Driver发起binder ioctl请求后, 便采用环不断talkWithDriver,此时该线程处于阻塞状态, 直到收到如下BR_XXX命令才会结束该过程.<br>BR_TRANSACTION_COMPLETE: oneway模式下,收到该命令则退出<br>BR_REPLY: 非oneway模式下,收到该命令才退出;<br>BR_DEAD_REPLY: 目标进程/线程/binder实体为空, 以及释放正在等待reply的binder thread或者binder buffer;<br>BR_FAILED_REPLY: 情况较多,比如非法handle, 错误事务栈, security, 内存不足, buffer不足, 数据拷贝失败, 节点创建失败, 各种不匹配等问题<br>BR_ACQUIRE_RESULT: 目前未使用的协议;</li><li>2.左图中waitForResponse收到BR_TRANSACTION_COMPLETE,则直接退出循环, 则没有机会执行executeCommand()方法, 故将其颜色画为灰色. 除以上5种BR_XXX命令, 当收到其他BR命令,则都会执行executeCommand过程.</li><li>3.目标Binder线程创建后, 便进入joinThreadPool()方法, 采用循环不断地循环执行getAndExecuteCommand()方法, 当bwr的读写buffer都没有数据时,则阻塞在binder_thread_read的wait_event过程. 另外,正常情况下binder线程一旦创建则不会退出.</li></ul><h3 id="2-binder通信协议图"><a href="#2-binder通信协议图" class="headerlink" title="2.binder通信协议图"></a>2.binder通信协议图</h3><p><img src="https://raw.githubusercontent.com/wd623894174/blogPic/master/binder/transaction.jpeg" alt></p><ul><li>Binder客户端或者服务端向Binder Driver发送的命令都是以BC_开头,例如本文的BC_TRANSACTION和BC_REPLY, 所有Binder Driver向Binder客户端或者服务端发送的命令则都是以BR_开头, 例如本文中的BR_TRANSACTION和BR_REPLY.</li><li>只有当BC_TRANSACTION或者BC_REPLY时, 才调用binder_transaction()来处理事务. 并且都会回应调用者一个BINDER_WORK_TRANSACTION_COMPLETE事务, 经过binder_thread_read()会转变成BR_TRANSACTION_COMPLETE.</li><li>startService过程便是一个非oneway的过程, 那么oneway的通信过程如下所述.</li></ul><p>上图是非oneway通信过程的协议图, 下图则是对于oneway场景下的通信协议图:</p><p><img src="https://raw.githubusercontent.com/wd623894174/blogPic/master/binder/transaction_no_oneway.jpeg" alt></p><h3 id="3-binder-通信log"><a href="#3-binder-通信log" class="headerlink" title="3.binder 通信log"></a>3.binder 通信log</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//binder client  java log (BinderProxy.transact)  ,native log(IPCThreadState15waitForResponse) ,kernel log (kernel: binder_ioctl_write_read)</span><span class="token string">"Binder:1930_5"</span> prio<span class="token operator">=</span><span class="token number">5</span> tid<span class="token operator">=</span><span class="token number">85</span> Native  <span class="token operator">|</span> group<span class="token operator">=</span><span class="token string">"main"</span> sCount<span class="token operator">=</span><span class="token number">1</span> dsCount<span class="token operator">=</span><span class="token number">0</span> obj<span class="token operator">=</span><span class="token number">0x13cb1820</span> self<span class="token operator">=</span><span class="token number">0x7f79fcd400</span>  <span class="token operator">|</span> sysTid<span class="token operator">=</span><span class="token number">5316</span> nice<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span> cgrp<span class="token operator">=</span><span class="token keyword">default</span> sched<span class="token operator">=</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span> handle<span class="token operator">=</span><span class="token number">0x7f6e1ff450</span>  <span class="token operator">|</span> state<span class="token operator">=</span>S schedstat<span class="token operator">=</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token punctuation">)</span> utm<span class="token operator">=</span><span class="token number">83</span> stm<span class="token operator">=</span><span class="token number">56</span> core<span class="token operator">=</span><span class="token number">2</span> HZ<span class="token operator">=</span><span class="token number">100</span>  <span class="token operator">|</span> stack<span class="token operator">=</span><span class="token number">0x7f6e105000-</span><span class="token number">0x7f6e107000</span> stackSize<span class="token operator">=</span>1005KB  <span class="token operator">|</span> held mutexes<span class="token operator">=</span>  kernel<span class="token operator">:</span> __switch_to<span class="token operator">+</span><span class="token number">0x88</span><span class="token operator">/</span><span class="token number">0x94</span>  kernel<span class="token operator">:</span> binder_thread_read<span class="token operator">+</span><span class="token number">0x4e4</span><span class="token operator">/</span><span class="token number">0x1140</span>   <span class="token comment" spellcheck="true">//binder driver log</span>  kernel<span class="token operator">:</span> binder_ioctl_write_read<span class="token operator">+</span><span class="token number">0x1e0</span><span class="token operator">/</span><span class="token number">0x31c</span>  kernel<span class="token operator">:</span> binder_ioctl<span class="token operator">+</span><span class="token number">0x28c</span><span class="token operator">/</span><span class="token number">0x710</span>  kernel<span class="token operator">:</span> do_vfs_ioctl<span class="token operator">+</span><span class="token number">0x48c</span><span class="token operator">/</span><span class="token number">0x564</span>  kernel<span class="token operator">:</span> SyS_ioctl<span class="token operator">+</span><span class="token number">0x60</span><span class="token operator">/</span><span class="token number">0x88</span>  kernel<span class="token operator">:</span> el0_svc_naked<span class="token operator">+</span><span class="token number">0x24</span><span class="token operator">/</span><span class="token number">0x28</span>  <span class="token keyword">native</span><span class="token operator">:</span> #<span class="token number">00</span> pc 000000000007831c  <span class="token operator">/</span>system<span class="token operator">/</span>lib64<span class="token operator">/</span>libc<span class="token punctuation">.</span><span class="token function">so</span> <span class="token punctuation">(</span>__ioctl<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token keyword">native</span><span class="token operator">:</span> #<span class="token number">01</span> pc <span class="token number">0000000000020020</span>  <span class="token operator">/</span>system<span class="token operator">/</span>lib64<span class="token operator">/</span>libc<span class="token punctuation">.</span><span class="token function">so</span> <span class="token punctuation">(</span>ioctl<span class="token operator">+</span><span class="token number">140</span><span class="token punctuation">)</span>  <span class="token keyword">native</span><span class="token operator">:</span> #<span class="token number">02</span> pc 0000000000055b14  <span class="token operator">/</span>system<span class="token operator">/</span>lib64<span class="token operator">/</span>libbinder<span class="token punctuation">.</span><span class="token function">so</span> <span class="token punctuation">(</span>_ZN7android14IPCThreadState14talkWithDriverEb<span class="token operator">+</span><span class="token number">256</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//binder native log</span>  <span class="token keyword">native</span><span class="token operator">:</span> #<span class="token number">03</span> pc 0000000000056ab8  <span class="token operator">/</span>system<span class="token operator">/</span>lib64<span class="token operator">/</span>libbinder<span class="token punctuation">.</span><span class="token function">so</span> <span class="token punctuation">(</span>_ZN7android14IPCThreadState15waitForResponseEPNS_6ParcelEPi<span class="token operator">+</span><span class="token number">708</span><span class="token punctuation">)</span>  <span class="token keyword">native</span><span class="token operator">:</span> #<span class="token number">04</span> pc 000000000004b504  <span class="token operator">/</span>system<span class="token operator">/</span>lib64<span class="token operator">/</span>libbinder<span class="token punctuation">.</span><span class="token function">so</span> <span class="token punctuation">(</span>_ZN7android8BpBinder8transactEjRKNS_6ParcelEPS1_j<span class="token operator">+</span><span class="token number">72</span><span class="token punctuation">)</span>  <span class="token keyword">native</span><span class="token operator">:</span> #<span class="token number">05</span> pc 00000000000ff69c  <span class="token operator">/</span>system<span class="token operator">/</span>lib64<span class="token operator">/</span>libandroid_runtime<span class="token punctuation">.</span><span class="token function">so</span> <span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span><span class="token punctuation">)</span>  <span class="token keyword">native</span><span class="token operator">:</span> #<span class="token number">06</span> pc <span class="token number">0000000001117058</span>  <span class="token operator">/</span>data<span class="token operator">/</span>dalvik<span class="token operator">-</span>cache<span class="token operator">/</span>arm64<span class="token operator">/</span>system<span class="token annotation punctuation">@framework</span><span class="token annotation punctuation">@boot</span><span class="token punctuation">.</span><span class="token function">oat</span> <span class="token punctuation">(</span>Java_android_os_BinderProxy_transactNative__ILandroid_os_Parcel_2Landroid_os_Parcel_2I<span class="token operator">+</span><span class="token number">196</span><span class="token punctuation">)</span>  at android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>BinderProxy<span class="token punctuation">.</span><span class="token function">transactNative</span><span class="token punctuation">(</span>Native method<span class="token punctuation">)</span>  at android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>BinderProxy<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span>Binder<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">615</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//binder java log </span>  at android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>IActivityController$Stub$Proxy<span class="token punctuation">.</span><span class="token function">appCrashed</span><span class="token punctuation">(</span>IActivityController<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">222</span><span class="token punctuation">)</span>  at com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>server<span class="token punctuation">.</span>am<span class="token punctuation">.</span>AppErrors<span class="token punctuation">.</span><span class="token function">handleAppCrashInActivityController</span><span class="token punctuation">(</span>AppErrors<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">450</span><span class="token punctuation">)</span>  at com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>server<span class="token punctuation">.</span>am<span class="token punctuation">.</span>AppErrors<span class="token punctuation">.</span><span class="token function">crashApplicationInner</span><span class="token punctuation">(</span>AppErrors<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">334</span><span class="token punctuation">)</span>  <span class="token operator">-</span> locked <span class="token operator">&lt;</span><span class="token number">0x098877e9</span><span class="token operator">></span> <span class="token punctuation">(</span>a com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>server<span class="token punctuation">.</span>am<span class="token punctuation">.</span>ActivityManagerService<span class="token punctuation">)</span>  at com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>server<span class="token punctuation">.</span>am<span class="token punctuation">.</span>AppErrors<span class="token punctuation">.</span><span class="token function">crashApplication</span><span class="token punctuation">(</span>AppErrors<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">309</span><span class="token punctuation">)</span>  at com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>server<span class="token punctuation">.</span>am<span class="token punctuation">.</span>ActivityManagerService<span class="token punctuation">.</span><span class="token function">handleApplicationCrashInner</span><span class="token punctuation">(</span>ActivityManagerService<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">13799</span><span class="token punctuation">)</span>  at com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>server<span class="token punctuation">.</span>am<span class="token punctuation">.</span>ActivityManagerService<span class="token punctuation">.</span><span class="token function">handleApplicationCrash</span><span class="token punctuation">(</span>ActivityManagerService<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">13781</span><span class="token punctuation">)</span>  at android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>ActivityManagerNative<span class="token punctuation">.</span><span class="token function">onTransact</span><span class="token punctuation">(</span>ActivityManagerNative<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1646</span><span class="token punctuation">)</span>  at com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>server<span class="token punctuation">.</span>am<span class="token punctuation">.</span>ActivityManagerService<span class="token punctuation">.</span><span class="token function">onTransact</span><span class="token punctuation">(</span>ActivityManagerService<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2886</span><span class="token punctuation">)</span>  at android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Binder<span class="token punctuation">.</span><span class="token function">execTransact</span><span class="token punctuation">(</span>Binder<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">565</span><span class="token punctuation">)</span></code></pre><pre><code>//binder server  onTransact&quot;Binder:17922_1&quot; prio=5 tid=8 Blocked  | group=&quot;main&quot; sCount=1 dsCount=0 obj=0x12c69940 self=0x7f97e12400  | sysTid=17961 nice=-2 cgrp=default sched=0/0 handle=0x7f96286450  | state=S schedstat=( 0 0 0 ) utm=0 stm=0 core=4 HZ=100  | stack=0x7f9618c000-0x7f9618e000 stackSize=1005KB  | held mutexes=  at com.android.commands.monkey.Monkey$ActivityController.appCrashed(Monkey.java:306)  - waiting to lock &lt;0x0b9d2b64&gt; (a com.android.commands.monkey.Monkey) held by thread 1  at android.app.IActivityController$Stub.onTransact(IActivityController.java:92)  at android.os.Binder.execTransact(Binder.java:565)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android Binder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux16.04 搭建openGrok</title>
      <link href="/2019/06/10/envconfig/linux16.04-da-jian-opengrok/"/>
      <url>/2019/06/10/envconfig/linux16.04-da-jian-opengrok/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/jerkspan/article/details/87861289" target="_blank" rel="noopener">https://blog.csdn.net/jerkspan/article/details/87861289</a></p><h3 id="1-安装tomcat8"><a href="#1-安装tomcat8" class="headerlink" title="1.安装tomcat8"></a>1.安装tomcat8</h3><pre><code> sudo apt-get install exuberant-ctags tomcat8 sudo /etc/init.d/tomcat8 restart   //重启tomcat8浏览器中打开http://localhost:8080/，出现下图说明tomcat8没问题。//控制服务sudo /etc/init.d/tomcat8 startsudo /etc/init.d/tomcat8 stopsudo /etc/init.d/tomcat8 restart</code></pre><!-- add more --><h3 id="2-安装universal-ctags"><a href="#2-安装universal-ctags" class="headerlink" title="2.安装universal-ctags"></a>2.安装universal-ctags</h3><p>不要再使用 Exuberant ctags，因为已经不再维护更新，对于新版本的Opengrok支持度不好，所以先卸载掉:</p><pre><code>sudo apt-get remove --purge exuberant-ctagsgithub地址：https://github.com/universal-ctags/ctags</code></pre><p>下载完成后，进入ctags文件夹，依次执行以下命令，完成编译和安装：</p><pre><code>sudo apt install autoconfcd /tmpgit clone https://github.com/universal-ctags/ctags     //下载zip解压出来的autogen.sh之类文件的权限不对，建议这种方式，也可以把所有文件设置为777试下cd ctags./autogen.sh./configure --prefix=/opt/software/universal-ctags  # 我的安装路径。就使用这个，后面索引就是这个路径make -j8sudo make install</code></pre><h3 id="3-安装openGrok"><a href="#3-安装openGrok" class="headerlink" title="3.安装openGrok"></a>3.安装openGrok</h3><pre><code>下载地址:https://github.com/oracle/opengrok/releases   //我使用的是opengrok-1.2.23.tar.gz，使用tar -zxvf opengrok-1.2.23.tar.gz  -C ~ 解压(-C解压到指定目录)我这里解压在这个目录 cd ~/software/opengrok/opengrok-1.2.23(~/software)cd ~/software/opengrok/opengrok-1.2.23mkdir src data etc    //src 源码路径   // etc 配置    //data 索引b. 指定android源码位置原本需要把源码放到src下，因为我的android源代码放在了~/android/aosp下，没必要把它整个移动到src下，所以在src下建了个9.0.0的软连接指向它：cd ~/software/opengrok/opengrok-1.2.23/srcln -s ~/software/src/ enginner  (~/software/src/ : 需要链接的源码路径  enginner : src下的链接  )ubuntu@ubuntu:~/software/opengrok/opengrok-1.2.23/src$ ll总用量 8drwxrwxr-x  2 ubuntu ubuntu 4096 7月   3 14:34 ./drwxrwxr-x 10 ubuntu ubuntu 4096 7月   3 14:54 ../lrwxrwxrwx  1 ubuntu ubuntu   28 7月   3 14:34 enginner -&gt; ~/software/src//复制source.war到tomcat中：(不用解压，会自动解压)cp ~/software/opengrok/opengrok-1.2.23/lib/source.war /var/lib/tomcat8/webapps/ubuntu@ubuntu:~/software/opengrok/opengrok-1.2.23$ sudo cp -rf source.war /var/lib/tomcat8/webapps/d. 配置CONFIGURATION：在/var/lib/tomcat8/webapps/source/WEB-INF/web.xml中修改configuration.xml的路径，gedit /var/lib/tomcat8/webapps/source/WEB-INF/web.xml    &lt;context-param&gt;        &lt;description&gt;Full path to the configuration file where OpenGrok can read its configuration&lt;/description&gt;        &lt;param-name&gt;CONFIGURATION&lt;/param-name&gt;        &lt;param-value&gt;~/software/opengrok/opengrok-1.2.23/etc/configuration.xml&lt;/param-value&gt;  //自己创建的etc路径    &lt;/context-param&gt;e. 重启Tomcat，在浏览器中输入 http://IP地址:8080/source，已经可以看到Opengrok的雏形，不过会有一个错误，是因为还未建立索引，所以configuration.xml还没生成，先不用关注：http://10.100.xxx.xxx:8080/sourcehttp://localhost:8080/source///提示信息如下CONFIGURATION parameter has not been configured in web.xml! Please configure your webapp.Unable to determine source root path. Missing configuration?</code></pre><h3 id="4-创建索引"><a href="#4-创建索引" class="headerlink" title="4.创建索引"></a>4.创建索引</h3><pre><code>//使用此命令来创建索引，具体文件键附件openGrok.shjava -Xmx8g -jar ~/software/opengrok/opengrok-1.2.23/lib/opengrok.jar \    -c /opt/software/universal-ctags/bin/ctags \    -s ~/software/src \    -d ~/software/opengrok/opengrok-1.2.23/data -H -P -S -G -v \    -W ~/software/opengrok/opengrok-1.2.23/etc/configuration.xml \    -U http://localhost:8080/source \    -m 256#-Xmx8g：配置Java 最大堆内存为8g，防止内存溢出。#-jar：指定opengrok.jar包。#-c：指定universal-ctags的路径，configure配置的路径，此时使用which ctags得到的路径是/usr/bin/ctags，是会报错的#-s：指定源码路径，就是上面的新建的src。#-d：指定索引文件存放路径，就是上面新建的data。#-W：指定configuration.xml的路径，就是上面新建的etc。#-m：指定opengrok索引时的缓存大小，默认只有16M。把如上命令写入openGrok.sh，使用./openGrok.sh运行就可以</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> openGrok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pixel 刷机AOSP 和ubuntu adb配置</title>
      <link href="/2019/06/10/envconfig/pixel-shua-ji-aosp-he-ubuntu-adb-pei-zhi/"/>
      <url>/2019/06/10/envconfig/pixel-shua-ji-aosp-he-ubuntu-adb-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>环境配置参考网址:</p><ul><li><p><a href="https://blog.csdn.net/wd229047557/article/details/93134104" target="_blank" rel="noopener">ubuntu16.04配置和aosp下载</a></p></li><li><p><a href="https://blog.csdn.net/wd229047557/article/details/93645329" target="_blank" rel="noopener">Pxiel手机 AOSP下载及编译</a></p></li><li><p><a href="https://blog.csdn.net/wd229047557/article/details/91491113" target="_blank" rel="noopener">Ubuntu16.04下安装破解secureCRT和secureFX的操作记录</a></p></li><li><p><a href="https://blog.csdn.net/wd229047557/article/details/94207307" target="_blank" rel="noopener">Pixel 刷机AOSP和ubuntu adb配置</a></p></li></ul><h3 id="1-Linux16-04配置adb-fastboot"><a href="#1-Linux16-04配置adb-fastboot" class="headerlink" title="1.Linux16.04配置adb fastboot"></a>1.Linux16.04配置adb fastboot</h3><pre><code>//下载platform-tools,也可以使用android studio自带的wget https://dl.google.com/android/repository/platform-tools-latest-linux.zip//将软件包解压到指定位置sudo unzip -d /usr/local/sbin platform-tools-latest-linux.zip//sudo vim ~/.bashrc添加环境变量export PATH=$PATH:/usr/local/sbin/platform-tools//更新source,就可以新开终端adb了source ~/.bashrc</code></pre><h3 id="2-Linux配置adb设备"><a href="#2-Linux配置adb设备" class="headerlink" title="2.Linux配置adb设备"></a>2.Linux配置adb设备</h3><pre><code>lsusb命令查看设备Bus 001 Device 004: ID 18d1:4ee7 Google Inc.//添加对应设备sudo vim /etc/udev/rules.d/51-android.rules//cat内容如下ubuntu@ubuntu:~/work/project/androidp/out/target/product/sailfish$ cat /etc/udev/rules.d/51-android.rules #Google Inc. SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;18d1&quot;, MODE=&quot;0666&quot;, GROUP=&quot;plugdev&quot;//需要重启udev,这里可以直接重启linux</code></pre><h3 id="3-烧写rom到pixel"><a href="#3-烧写rom到pixel" class="headerlink" title="3.烧写rom到pixel"></a>3.烧写rom到pixel</h3><pre><code>需要下载对应驱动(如 google_devices-marlin-ppr2.180905.006.a1-535eb5b3.tgz  qcom-marlin-ppr2.180905.006.a1-86b90139.tgz)放到aosp根目录下，然后运行./extract-google_devices-marlin.sh  ./extract-qcom-marlin.sh  放入驱动到vendor目录ubuntu@ubuntu:~/work/project/androidp$ ls | grep marliextract-google_devices-marlin.shextract-qcom-marlin.shgoogle_devices-marlin-ppr2.180905.006.a1-535eb5b3.tgzqcom-marlin-ppr2.180905.006.a1-86b90139.tgz//编译source build/envsetup.shlunch aosp_sailfish-userdebugmake clean; make -j8//刷机需要先解bootloader,开发者选项中oem lock置灰无法点击的话，请恢复出厂设置后跳过开机向导，然后连接翻墙wifi，在打开开发者选项就可以了//开始ubuntu@ubuntu:~/work/project/androidp/out/target/product/sailfish$ adb reboot bootloader    //1ubuntu@ubuntu:~/work/project/androidp/out/target/product/sailfish$ export ANDROID_PRODUCT_OUT=~/work/project/androidp/out/target/product/sailfish    //2 ubuntu@ubuntu:~/work/project/androidp/out/target/product/sailfish$ fastboot flashall -w   //3</code></pre><pre><code>结果如下--------------------------------------------Bootloader Version...: 8996-012001-1812132253Baseband Version.....: 8996-130281-1903110834Serial Number........: FA6AB0310377--------------------------------------------Checking &#39;product&#39;                                 OKAY [  0.049s]Setting current slot to &#39;a&#39;                        OKAY [  0.099s]Sending &#39;boot_a&#39; (29829 KB)                        OKAY [  3.663s]Writing &#39;boot_a&#39;                                   OKAY [  0.257s]Sending sparse &#39;system_a&#39; 1/2 (524284 KB)          OKAY [ 68.037s]Writing &#39;system_a&#39;                                 OKAY [  3.512s]Sending sparse &#39;system_a&#39; 2/2 (502668 KB)          OKAY [ 64.977s]Writing &#39;system_a&#39;                                 OKAY [  3.340s]Sending &#39;system_b&#39; (75964 KB)                      OKAY [ 10.757s]Writing &#39;system_b&#39;                                 OKAY [  0.655s]Erasing &#39;userdata&#39;                                 OKAY [  2.105s]mke2fs 1.44.4 (18-Aug-2018)Creating filesystem with 6509568 4k blocks and 1630208 inodesFilesystem UUID: 854ae47f-afc6-482c-8098-1981dffc2934Superblock backups stored on blocks:     32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,     4096000Allocating group tables: done                            Writing inode tables: done                            Creating journal (32768 blocks): doneWriting superblocks and filesystem accounting information: done   Sending &#39;userdata&#39; (4272 KB)                       OKAY [  0.599s]Writing &#39;userdata&#39;                                 OKAY [  0.107s]Rebooting                                          OKAY [  0.050s]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> pixel编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16.04下安装破解secureCRT和secureFX的操作记录</title>
      <link href="/2019/06/10/envconfig/ubuntu16.04-xia-an-zhuang-po-jie-securecrt-he-securefx-de-cao-zuo-ji-lu/"/>
      <url>/2019/06/10/envconfig/ubuntu16.04-xia-an-zhuang-po-jie-securecrt-he-securefx-de-cao-zuo-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>环境配置参考网址:</p><ul><li><p><a href="https://blog.csdn.net/wd229047557/article/details/93134104" target="_blank" rel="noopener">ubuntu16.04配置和aosp下载</a></p></li><li><p><a href="https://blog.csdn.net/wd229047557/article/details/93645329" target="_blank" rel="noopener">Pxiel手机 AOSP下载及编译</a></p></li><li><p><a href="https://blog.csdn.net/wd229047557/article/details/91491113" target="_blank" rel="noopener">Ubuntu16.04下安装破解secureCRT和secureFX的操作记录</a></p></li><li><p><a href="https://blog.csdn.net/wd229047557/article/details/94207307" target="_blank" rel="noopener">Pixel 刷机AOSP和ubuntu adb配置</a></p></li></ul><h3 id="1-ubuntu更新源"><a href="#1-ubuntu更新源" class="headerlink" title="1.ubuntu更新源"></a>1.ubuntu更新源</h3><p>把如下sources.list内容考入就好，适用于16.04版本</p><pre><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup   #备份当前也就是默认官方的源列表sudo gedit /etc/apt/sources.list         #修改sources.list文件中源的列表，删除全部内容，替换为国内源地址。 保存编辑好的文件。sudo apt-get update                      #更新源列表，换源后必须执行</code></pre><pre><code># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricteddeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-propertiesdeb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</code></pre><h3 id="2-安装编译依赖软件"><a href="#2-安装编译依赖软件" class="headerlink" title="2.安装编译依赖软件"></a>2.安装编译依赖软件</h3><pre><code>1、安装JDK，分别执行以下命令$ sudo apt-get update$ sudo apt-get install openjdk-8-jdk2、切换java版本$ sudo update-alternatives --config java$ sudo update-alternatives --config javac3、安装相关的依赖包    sudo apt-get install git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib  sudo apt-get install libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip</code></pre><h3 id="3-安装samba，并和window共享目录"><a href="#3-安装samba，并和window共享目录" class="headerlink" title="3.安装samba，并和window共享目录"></a>3.安装samba，并和window共享目录</h3><p>//下载samba，第一个需要，其他看情况</p><pre><code>1 sudo apt-get install samba2 sudo apt-get install samba-common 3 sudo apt-get install smbfs     　　//在旧版的Ubuntu中，你可能需要使用 smbfs替代cifs-utils。 4 sudo apt-get install cifs-utils   //新版本 ubuntu1204已安装</code></pre><p>配置共享目录smaba</p><pre><code>1.建立/workspace目录，给权限777，sudo chmod 777 /workspace2.配置samba        sudo vim /etc/samba/smb.conf                 最后面添加内容：    [work]    comment = work    path = /home/wangdong/work    browseable = yes    writable = yes    available = yes    guest ok = yes    public = yes    create mask = 0777    force user = wangdong  #必须加这个，让window创建的，也是wangdong账户，可以看ll3.重启samba服务     sudo /etc/init.d/smbd restart4.删除配置之后自动生成的目录，可以看到是有锁的。在重新建立目录. 在wangdong用户终端下：mkdir work share.建立文件测试就可以了。</code></pre><h3 id="4-下载Android-P代码"><a href="#4-下载Android-P代码" class="headerlink" title="4.下载Android P代码"></a>4.下载Android P代码</h3><p>参照: 是时候下载Android 9.0系统源码了</p><p>####下载repo</p><pre><code>sudo apt-get install gitmkdir ~/binPATH=~/bin:$PATHcurl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo &gt; ~/bin/repochmod a+x ~/bin/reposudo apt-get install python</code></pre><p>####下载源码</p><pre><code>git config --global user.email &quot;piratemorgen@gmail.com&quot;git config --global user.name &quot;piratemorgen&quot;export REPO_URL=&#39;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/&#39;//下载所有代码，如果不需要执行下面这个就够了repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest//指定下载android-9.0.0_r8这个tagrepo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-9.0.0_r8  repo sync</code></pre><h3 id="5-新版本代码下载"><a href="#5-新版本代码下载" class="headerlink" title="5.新版本代码下载"></a>5.新版本代码下载</h3><p><a href="https://source.android.com/setup/start/build-numbers#source-code-tags-and-builds" target="_blank" rel="noopener">https://source.android.com/setup/start/build-numbers#source-code-tags-and-builds</a></p><p>目前新的是android-9.0.0.0_r40 ,r8感觉太老了，建议更新</p><p>对应驱动版本<a href="https://developers.google.cn/android/drivers#sailfishpq3a.190605.003" target="_blank" rel="noopener">https://developers.google.cn/android/drivers#sailfishpq3a.190605.003</a>  (请注意机型)</p><p>Pixel binaries for Android 9.0.0 (PQ3A.190605.003)</p><h3 id="6-kernel内核的下载和编译"><a href="#6-kernel内核的下载和编译" class="headerlink" title="6.kernel内核的下载和编译"></a>6.kernel内核的下载和编译</h3><pre><code>https://source.android.com/setup/build/building-kernels下载命令../bin/repo init -u https://aosp.tuna.tsinghua.edu.cn/kernel/manifest -b android-msm-marlin-3.18-pie-qpr2../bin/repo sync编译命令build/build.sh烧写1种make 时加入环境path路径 export TARGET_PREBUILT_KERNEL=DIST_DIR/Image.lz4-dtb第二种Image.lz4-dtb放入device/google/marlin-kernel</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> pixel编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04配置和aosp下载</title>
      <link href="/2019/06/10/envconfig/ubuntu16.04-pei-zhi-he-aosp-xia-zai/"/>
      <url>/2019/06/10/envconfig/ubuntu16.04-pei-zhi-he-aosp-xia-zai/</url>
      
        <content type="html"><![CDATA[<p>环境配置参考网址:</p><ul><li><p><a href="https://blog.csdn.net/wd229047557/article/details/93134104" target="_blank" rel="noopener">ubuntu16.04配置和aosp下载</a></p></li><li><p><a href="https://blog.csdn.net/wd229047557/article/details/93645329" target="_blank" rel="noopener">Pxiel手机 AOSP下载及编译</a></p></li><li><p><a href="https://blog.csdn.net/wd229047557/article/details/91491113" target="_blank" rel="noopener">Ubuntu16.04下安装破解secureCRT和secureFX的操作记录</a></p></li><li><p><a href="https://blog.csdn.net/wd229047557/article/details/94207307" target="_blank" rel="noopener">Pixel 刷机AOSP和ubuntu adb配置</a></p></li></ul><h3 id="1-ubuntu更新源"><a href="#1-ubuntu更新源" class="headerlink" title="1.ubuntu更新源"></a>1.ubuntu更新源</h3><p>把如下sources.list内容考入就好，适用于16.04版本</p><pre><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup   #备份当前也就是默认官方的源列表sudo gedit /etc/apt/sources.list         #修改sources.list文件中源的列表，删除全部内容，替换为国内源地址。 保存编辑好的文件。sudo apt-get update                      #更新源列表，换源后必须执行</code></pre><pre><code># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricteddeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-propertiesdeb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</code></pre><h3 id="2-安装编译依赖软件"><a href="#2-安装编译依赖软件" class="headerlink" title="2.安装编译依赖软件"></a>2.安装编译依赖软件</h3><pre><code>1、安装JDK，分别执行以下命令$ sudo apt-get update$ sudo apt-get install openjdk-8-jdk2、切换java版本$ sudo update-alternatives --config java$ sudo update-alternatives --config javac3、安装相关的依赖包    sudo apt-get install git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib  sudo apt-get install libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip</code></pre><h3 id="3-安装samba，并和window共享目录"><a href="#3-安装samba，并和window共享目录" class="headerlink" title="3.安装samba，并和window共享目录"></a>3.安装samba，并和window共享目录</h3><p>//下载samba，第一个需要，其他看情况</p><pre><code>1 sudo apt-get install samba2 sudo apt-get install samba-common 3 sudo apt-get install smbfs     　　//在旧版的Ubuntu中，你可能需要使用 smbfs替代cifs-utils。 4 sudo apt-get install cifs-utils   //新版本 ubuntu1204已安装</code></pre><p>配置共享目录smaba</p><pre><code>1.建立/workspace目录，给权限777，sudo chmod 777 /workspace2.配置samba        sudo vim /etc/samba/smb.conf                 最后面添加内容：    [work]    comment = work    path = /home/wangdong/work    browseable = yes    writable = yes    available = yes    guest ok = yes    public = yes    create mask = 0777    force user = wangdong  #必须加这个，让window创建的，也是wangdong账户，可以看ll3.重启samba服务     sudo /etc/init.d/smbd restart4.删除配置之后自动生成的目录，可以看到是有锁的。在重新建立目录. 在wangdong用户终端下：mkdir work share.建立文件测试就可以了。</code></pre><h3 id="4-下载Android-P代码"><a href="#4-下载Android-P代码" class="headerlink" title="4.下载Android P代码"></a>4.下载Android P代码</h3><p>参照: 是时候下载Android 9.0系统源码了</p><p>####下载repo</p><pre><code>sudo apt-get install gitmkdir ~/binPATH=~/bin:$PATHcurl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo &gt; ~/bin/repochmod a+x ~/bin/reposudo apt-get install python</code></pre><p>####下载源码</p><pre><code>git config --global user.email &quot;piratemorgen@gmail.com&quot;git config --global user.name &quot;piratemorgen&quot;export REPO_URL=&#39;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/&#39;//下载所有代码，如果不需要执行下面这个就够了repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest//指定下载android-9.0.0_r8这个tagrepo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-9.0.0_r8  repo sync</code></pre><h3 id="5-新版本代码下载"><a href="#5-新版本代码下载" class="headerlink" title="5.新版本代码下载"></a>5.新版本代码下载</h3><p><a href="https://source.android.com/setup/start/build-numbers#source-code-tags-and-builds" target="_blank" rel="noopener">https://source.android.com/setup/start/build-numbers#source-code-tags-and-builds</a></p><p>目前新的是android-9.0.0.0_r40 ,r8感觉太老了，建议更新</p><p>对应驱动版本<a href="https://developers.google.cn/android/drivers#sailfishpq3a.190605.003" target="_blank" rel="noopener">https://developers.google.cn/android/drivers#sailfishpq3a.190605.003</a>  (请注意机型)</p><p>Pixel binaries for Android 9.0.0 (PQ3A.190605.003)</p><h3 id="6-kernel内核的下载和编译"><a href="#6-kernel内核的下载和编译" class="headerlink" title="6.kernel内核的下载和编译"></a>6.kernel内核的下载和编译</h3><pre><code>https://source.android.com/setup/build/building-kernels下载命令../bin/repo init -u https://aosp.tuna.tsinghua.edu.cn/kernel/manifest -b android-msm-marlin-3.18-pie-qpr2../bin/repo sync编译命令build/build.sh烧写1种make 时加入环境path路径 export TARGET_PREBUILT_KERNEL=DIST_DIR/Image.lz4-dtb第二种Image.lz4-dtb放入device/google/marlin-kernel</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> pixel编译 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
