<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Dms中跨进程的Parcelable封装</title>
      <link href="/2019/12/05/binder/dms-zhong-kua-jin-cheng-de-parcelable-feng-zhuang/"/>
      <url>/2019/12/05/binder/dms-zhong-kua-jin-cheng-de-parcelable-feng-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="1-当前是使用enum-接口Parcelable来传递数据"><a href="#1-当前是使用enum-接口Parcelable来传递数据" class="headerlink" title="1. 当前是使用enum 接口Parcelable来传递数据"></a>1. 当前是使用enum 接口Parcelable来传递数据</h3><ul><li>优点：可以直接把sdk里面的文件丢进来，加上Parcelable就可以，给client端调用也很直观。</li><li>缺点：1.enum占内存比基础类型多，android不推荐用枚举。 2.参数要传5个，很长。 3.如果新加其他接口会比较麻烦，看着乱</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span>  DmsDriverMissingData  <span class="token keyword">implements</span> <span class="token class-name">Parcelable</span> <span class="token punctuation">{</span>    <span class="token function">INVALID</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">MISSING</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">NOT_MISSING</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String name<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"INVALID"</span><span class="token punctuation">,</span>        <span class="token string">"MISSING"</span><span class="token punctuation">,</span>        <span class="token string">"NOT_MISSING"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token function">DmsDriverMissingData</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Creator<span class="token operator">&lt;</span>DmsDriverMissingData<span class="token operator">></span> CREATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Creator</span><span class="token operator">&lt;</span>DmsDriverMissingData<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> DmsDriverMissingData <span class="token function">createFromParcel</span><span class="token punctuation">(</span>Parcel in<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> DmsDriverMissingData<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> DmsDriverMissingData<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DmsDriverMissingData</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">describeContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span>Parcel dest<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dest<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-改进1：使用class来替换枚举，可以把所有的值都放进来"><a href="#2-改进1：使用class来替换枚举，可以把所有的值都放进来" class="headerlink" title="2. 改进1：使用class来替换枚举，可以把所有的值都放进来"></a>2. 改进1：使用class来替换枚举，可以把所有的值都放进来</h3><ul><li>优点：只有一个类，aidl不需要在扩充，class还可以一直添加其他接口，好维护</li><li>缺点：还需要添加常量定义，表示每个值代表的意思，如1，代表想睡</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sensetime<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcelable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * dmsMonitor信息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DmsMonitorResult</span> <span class="token keyword">implements</span> <span class="token class-name">Parcelable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> dmsOcclusionValue<span class="token punctuation">;</span>    <span class="token keyword">private</span> String dmsOcclusionString<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> dmsDriverMissingValue<span class="token punctuation">;</span>    <span class="token keyword">private</span> String dmsDriverMissingString<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> dmsDrowsinessValue<span class="token punctuation">;</span>    <span class="token keyword">private</span> String dmsDrowsinessString<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> DmsDriverMissingValue<span class="token punctuation">;</span>    <span class="token keyword">private</span> String DmsDriverMissingString<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> DmsActionValue<span class="token punctuation">;</span>    <span class="token keyword">private</span> String DmsActionString<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">describeContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span>Parcel dest<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dest<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dmsOcclusionValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        dest<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dmsOcclusionString<span class="token punctuation">)</span><span class="token punctuation">;</span>        dest<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dmsDriverMissingValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        dest<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dmsDriverMissingString<span class="token punctuation">)</span><span class="token punctuation">;</span>        dest<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dmsDrowsinessValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        dest<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dmsDrowsinessString<span class="token punctuation">)</span><span class="token punctuation">;</span>        dest<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>DmsDriverMissingValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        dest<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>DmsDriverMissingString<span class="token punctuation">)</span><span class="token punctuation">;</span>        dest<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>DmsActionValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        dest<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>DmsActionString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">DmsMonitorResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token function">DmsMonitorResult</span><span class="token punctuation">(</span>Parcel in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dmsOcclusionValue <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dmsOcclusionString <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dmsDriverMissingValue <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dmsDriverMissingString <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dmsDrowsinessValue <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dmsDrowsinessString <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>DmsDriverMissingValue <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>DmsDriverMissingString <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>DmsActionValue <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>DmsActionString <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Parcelable<span class="token punctuation">.</span>Creator<span class="token operator">&lt;</span>DmsMonitorResult<span class="token operator">></span> CREATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parcelable<span class="token punctuation">.</span>Creator</span><span class="token operator">&lt;</span>DmsMonitorResult<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> DmsMonitorResult <span class="token function">createFromParcel</span><span class="token punctuation">(</span>Parcel source<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DmsMonitorResult</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> DmsMonitorResult<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DmsMonitorResult</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-改进2：使用class来替换枚举，存放的值使用List对象"><a href="#3-改进2：使用class来替换枚举，存放的值使用List对象" class="headerlink" title="3. 改进2：使用class来替换枚举，存放的值使用List对象"></a>3. 改进2：使用class来替换枚举，存放的值使用List对象</h3><ul><li>优点：只有一个类，aidl不需要在扩充，class还可以一直添加其他接口，好维护</li><li>缺点：还需要添加常量定义，表示每个值代表的意思，如1，代表想睡</li></ul><p>DmsMonitorResult传输的结果类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sensetime<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcelable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * dmsMonitor信息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DmsMonitorResult</span> <span class="token keyword">implements</span> <span class="token class-name">Parcelable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>DmsData<span class="token operator">></span> dmsData<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DmsMonitorResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token function">DmsMonitorResult</span><span class="token punctuation">(</span>Parcel in<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span>Parcel dest<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">describeContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Creator<span class="token operator">&lt;</span>DmsMonitorResult<span class="token operator">></span> CREATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Creator</span><span class="token operator">&lt;</span>DmsMonitorResult<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> DmsMonitorResult <span class="token function">createFromParcel</span><span class="token punctuation">(</span>Parcel in<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DmsMonitorResult</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> DmsMonitorResult<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DmsMonitorResult</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>DmsData<span class="token operator">></span> <span class="token function">getDmsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dmsData<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDmsData</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>DmsData<span class="token operator">></span> dmsData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dmsData <span class="token operator">=</span> dmsData<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>DmsData数据格式类，每一个成员都是一个对象，包含名字，值和string</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sensetime<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcelable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DmsData</span> <span class="token keyword">implements</span> <span class="token class-name">Parcelable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    *name: 放monitor名字，如action ,drowniss,occlusion    */</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    * 存放返回monitor的字符串    * */</span>    <span class="token keyword">private</span> String statusString<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    * 返回狀態數據的int值    * */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> statusValue<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">describeContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span>Parcel dest<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dest<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        dest<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusString<span class="token punctuation">)</span><span class="token punctuation">;</span>        dest<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">DmsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token function">DmsData</span><span class="token punctuation">(</span>Parcel in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>statusString <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>statusValue <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Creator<span class="token operator">&lt;</span>DmsData<span class="token operator">></span> CREATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Creator</span><span class="token operator">&lt;</span>DmsData<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> DmsData <span class="token function">createFromParcel</span><span class="token punctuation">(</span>Parcel source<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DmsData</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> DmsData<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DmsData</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getStatusString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> statusString<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStatusString</span><span class="token punctuation">(</span>String statusString<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>statusString <span class="token operator">=</span> statusString<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStatusValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> statusValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStatusValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> statusValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>statusValue <span class="token operator">=</span> statusValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//封装DmsMonitorResult，用于server端传给client端</span><span class="token keyword">public</span> DmsMonitorResult <span class="token function">onPostDmsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    DmsData action <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DmsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    action<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    action<span class="token punctuation">.</span><span class="token function">setStatusString</span><span class="token punctuation">(</span><span class="token string">"Calling"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    action<span class="token punctuation">.</span><span class="token function">setStatusValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DmsData drowsiness <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DmsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    drowsiness<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"drowsiness"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    drowsiness<span class="token punctuation">.</span><span class="token function">setStatusString</span><span class="token punctuation">(</span><span class="token string">"drowsiness"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    drowsiness<span class="token punctuation">.</span><span class="token function">setStatusValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DmsData occlusion <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DmsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    occlusion<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"occlusion"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    occlusion<span class="token punctuation">.</span><span class="token function">setStatusString</span><span class="token punctuation">(</span><span class="token string">"not_occlusion"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    occlusion<span class="token punctuation">.</span><span class="token function">setStatusValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>drowsiness<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>occlusion<span class="token punctuation">)</span><span class="token punctuation">;</span>    DmsMonitorResult， result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DmsMonitorResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">setDmsData</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>client端获取数据，在循环读出来</p><pre class=" language-java"><code class="language-java">DmsMonitorResult monitorResult <span class="token operator">=</span> <span class="token function">onPostDmsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>DmsData dmsData <span class="token operator">:</span> monitorResult<span class="token punctuation">.</span><span class="token function">getDmsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"dasData: name :"</span> <span class="token operator">+</span> dmsData<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" value: "</span> <span class="token operator">+</span> dmsData<span class="token punctuation">.</span><span class="token function">getStatusValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" String: "</span> <span class="token operator">+</span> dmsData<span class="token punctuation">.</span><span class="token function">getStatusString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>```</p>]]></content>
      
      
      <categories>
          
          <category> Android Binder </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio 生成Parcelable文件方法.md</title>
      <link href="/2019/12/05/binder/androidstudio-sheng-cheng-parcelable-wen-jian-fang-fa/"/>
      <url>/2019/12/05/binder/androidstudio-sheng-cheng-parcelable-wen-jian-fang-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="0-Parcelable支持的类型"><a href="#0-Parcelable支持的类型" class="headerlink" title="0. Parcelable支持的类型"></a>0. Parcelable支持的类型</h3><pre><code>StringintFloatIntergerList --ArrayListMap  --HashMap</code></pre><p>示例</p><pre><code>private Map&lt;String, Integer&gt; dmsMap;@Overridepublic void writeToParcel(Parcel dest, int flags) {    dest.writeInt(this.dmsMap.size());    for (Map.Entry&lt;String, Integer&gt; entry : this.dmsMap.entrySet()) {        dest.writeString(entry.getKey());        dest.writeValue(entry.getValue());    }}protected DmsMonitorResult(Parcel in) {    int dmsMapSize = in.readInt();    this.dmsMap = new HashMap&lt;String, Integer&gt;(dmsMapSize);    for (int i = 0; i &lt; dmsMapSize; i++) {        String key = in.readString();        Integer value = (Integer) in.readValue(Integer.class.getClassLoader());        this.dmsMap.put(key, value);    }}public Map&lt;String, Integer&gt; getDmsMap() {    return dmsMap;}public void setDmsMap(Map&lt;String, Integer&gt; dmsMap) {    this.dmsMap = dmsMap;}//ArrayList接口List Serializable因此可以序列化public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializableprivate int dmsDriverMissingValue;private String dmsDriverMissingString;private List&lt;String&gt; statusList;</code></pre><h3 id="1-Android-Studio安装插件-【-Android-Parcelable-code-generator】"><a href="#1-Android-Studio安装插件-【-Android-Parcelable-code-generator】" class="headerlink" title="1. Android Studio安装插件 【 Android Parcelable code generator】"></a>1. Android Studio安装插件 【 Android Parcelable code generator】</h3><pre><code>1. 打开android studio2. File -- settings -- Plugins 搜索 Parcelable安装后重启IDE</code></pre><h3 id="2-Parcelable使用方法"><a href="#2-Parcelable使用方法" class="headerlink" title="2. Parcelable使用方法"></a>2. Parcelable使用方法</h3><ul><li><ol><li>在能编译apk的项目里，添加如下代码，如果编译不过的项目会提示IDE NPE异常.右键选择Generate – Parcelable就可以了，也可以添加<pre class=" language-java"><code class="language-java"></code></pre></li></ol></li></ul><p>package com.sensetime;</p><p>/**</p><ul><li><p>dmsMonitor信息</p></li><li><p>/<br>public class DmsMonitorResult {</p><p>  private int dmsOcclusionValue;<br>  private String dmsOcclusionString;<br>  private int dmsDriverMissingValue;<br>  private String dmsDriverMissingString;<br>  private int dmsDrowsinessValue;<br>  private String dmsDrowsinessString;<br>  private int DmsDriverMissingValue;<br>  private String DmsDriverMissingString;<br>  private int DmsActionValue;<br>  private String DmsActionString;</p></li></ul><p>}</p><pre><code>- 2。 插件结果```javapackage com.sensetime;import android.os.Parcel;import android.os.Parcelable;/** * dmsMonitor信息 */public class DmsMonitorResult implements Parcelable {    private int dmsOcclusionValue;    private String dmsOcclusionString;    private int dmsDriverMissingValue;    private String dmsDriverMissingString;    private int dmsDrowsinessValue;    private String dmsDrowsinessString;    private int DmsDriverMissingValue;    private String DmsDriverMissingString;    private int DmsActionValue;    private String DmsActionString;    @Override    public int describeContents() {        return 0;    }    @Override    public void writeToParcel(Parcel dest, int flags) {        dest.writeInt(this.dmsOcclusionValue);        dest.writeString(this.dmsOcclusionString);        dest.writeInt(this.dmsDriverMissingValue);        dest.writeString(this.dmsDriverMissingString);        dest.writeInt(this.dmsDrowsinessValue);        dest.writeString(this.dmsDrowsinessString);        dest.writeInt(this.DmsDriverMissingValue);        dest.writeString(this.DmsDriverMissingString);        dest.writeInt(this.DmsActionValue);        dest.writeString(this.DmsActionString);    }    public DmsMonitorResult() {    }    protected DmsMonitorResult(Parcel in) {        this.dmsOcclusionValue = in.readInt();        this.dmsOcclusionString = in.readString();        this.dmsDriverMissingValue = in.readInt();        this.dmsDriverMissingString = in.readString();        this.dmsDrowsinessValue = in.readInt();        this.dmsDrowsinessString = in.readString();        this.DmsDriverMissingValue = in.readInt();        this.DmsDriverMissingString = in.readString();        this.DmsActionValue = in.readInt();        this.DmsActionString = in.readString();    }    public static final Parcelable.Creator&lt;DmsMonitorResult&gt; CREATOR = new Parcelable.Creator&lt;DmsMonitorResult&gt;() {        @Override        public DmsMonitorResult createFromParcel(Parcel source) {            return new DmsMonitorResult(source);        }        @Override        public DmsMonitorResult[] newArray(int size) {            return new DmsMonitorResult[size];        }    };}</code></pre><h3 id="3-生成get-set方法"><a href="#3-生成get-set方法" class="headerlink" title="3. 生成get set方法"></a>3. 生成get set方法</h3><p>右键Generate – Getter And Setter选中需要的变量</p><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDmsOcclusionValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dmsOcclusionValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDmsOcclusionValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> dmsOcclusionValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dmsOcclusionValue <span class="token operator">=</span> dmsOcclusionValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDmsOcclusionString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dmsOcclusionString<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDmsOcclusionString</span><span class="token punctuation">(</span>String dmsOcclusionString<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dmsOcclusionString <span class="token operator">=</span> dmsOcclusionString<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="4-生成toString方法"><a href="#4-生成toString方法" class="headerlink" title="4. 生成toString方法"></a>4. 生成toString方法</h3><p>Generate – toString()</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"DmsMonitorResult{"</span> <span class="token operator">+</span>            <span class="token string">"dmsOcclusionValue="</span> <span class="token operator">+</span> dmsOcclusionValue <span class="token operator">+</span>            <span class="token string">", dmsOcclusionString='"</span> <span class="token operator">+</span> dmsOcclusionString <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">", dmsDriverMissingValue="</span> <span class="token operator">+</span> dmsDriverMissingValue <span class="token operator">+</span>            <span class="token string">", dmsDriverMissingString='"</span> <span class="token operator">+</span> dmsDriverMissingString <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">", dmsDrowsinessValue="</span> <span class="token operator">+</span> dmsDrowsinessValue <span class="token operator">+</span>            <span class="token string">", dmsDrowsinessString='"</span> <span class="token operator">+</span> dmsDrowsinessString <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">", DmsDriverMissingValue="</span> <span class="token operator">+</span> DmsDriverMissingValue <span class="token operator">+</span>            <span class="token string">", DmsDriverMissingString='"</span> <span class="token operator">+</span> DmsDriverMissingString <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">", DmsActionValue="</span> <span class="token operator">+</span> DmsActionValue <span class="token operator">+</span>            <span class="token string">", DmsActionString='"</span> <span class="token operator">+</span> DmsActionString <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">'}'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5-Parcelable文件使用"><a href="#5-Parcelable文件使用" class="headerlink" title="5. Parcelable文件使用"></a>5. Parcelable文件使用</h3><ul><li>Server端<pre class=" language-java"><code class="language-java"><span class="token function">onPostMonitorFile</span><span class="token punctuation">(</span>dmsResult<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>//构建序列化对象 DmsMonitorResult<br>public void onPostMonitorFile(DmsResult dmsResult) {<br>    DmsMonitorResult mDmsMonitorResult = new DmsMonitorResult();</p><pre><code>mDmsMonitorResult.setDmsOcclusionValue(dmsResult.getCameraOcclusion().getValue());mDmsMonitorResult.setDmsOcclusionString(dmsResult.getCameraOcclusion().toString());mDmsMonitorResult.setDmsDriverMissingValue(dmsResult.getDriverMissing().getValue());mDmsMonitorResult.setDmsDriverMissingString(dmsResult.getDriverMissing().toString());mDmsMonitorResult.setDmsDrowsinessValue(dmsResult.getDrowsinessStatus().getValue());mDmsMonitorResult.setDmsDrowsinessString(dmsResult.getDrowsinessStatus().toString());mDmsMonitorResult.setDmsDistractionValue(dmsResult.getDistractionStatus().getValue());mDmsMonitorResult.setDmsDistractionString(dmsResult.getDistractionStatus().toString());mDmsMonitorResult.setDmsActionValue(dmsResult.getActionType().getValue());mDmsMonitorResult.setDmsActionString(dmsResult.getActionType().toString());mDoTDmsCommCallback.onPostDmsMonitorData(mDmsMonitorResult);</code></pre><p>}</p><pre><code> - client端client端注册回调后，直接调用方法就好```java@Overridepublic void onPostDmsMonitorData(DmsMonitorResult result) {    Log.d(TAG, &quot;onPostDmsMonitorData :&quot; + result.toString());    Log.d(TAG, &quot;onPostDmsMonitorData :&quot; +  result.getDmsActionString() + &quot;  : &quot; + result.getDmsDistractionString());}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android Binder </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用shell命令</title>
      <link href="/2019/10/18/androidbuild/chang-yong-shell-ming-ling/"/>
      <url>/2019/10/18/androidbuild/chang-yong-shell-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>参考语法：<br><a href="https://www.runoob.com/linux/linux-shell-variable.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell-variable.html</a></p><h4 id="1-文件用法"><a href="#1-文件用法" class="headerlink" title="1. 文件用法"></a>1. 文件用法</h4><p>source命令才会使环境变量生效</p><pre><code>touch  xxx.shchmod 777 xxx.shsource xxx.sh</code></pre><h4 id="2-函数调用"><a href="#2-函数调用" class="headerlink" title="2. 函数调用"></a>2. 函数调用</h4><pre><code>traversing_dir_mkfiletraversing_dir_mkfile() {}</code></pre><h4 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3. for循环"></a>3. for循环</h4><p>$? 获取命令返回值</p><pre><code>    for var in $(find -L $1 -name &quot;Android.mk&quot; )    do        #echo ---------------------------$var        grep_mk_file_is_prebuilt $var        if [ $? -ne 0 ] ;then            continue #没有在mk中找到chinatsp_build        fi        grep_file_line $var    done</code></pre><h4 id="4-echo打印调试log"><a href="#4-echo打印调试log" class="headerlink" title="4.echo打印调试log"></a>4.echo打印调试log</h4><pre><code>echo  &quot;INFO: traversing_dir_mkfile. . .&quot;</code></pre><h4 id="5-sed去空格"><a href="#5-sed去空格" class="headerlink" title="5.sed去空格"></a>5.sed去空格</h4><p>cat文件去空格</p><pre><code>for lineString in `cat $1 | sed &#39;s/[[:space:]]//g&#39;`do  get_androidmk_name $lineStringdone</code></pre><h4 id="6-字符-整数判断"><a href="#6-字符-整数判断" class="headerlink" title="6.字符 整数判断"></a>6.字符 整数判断</h4><p>在下面中=和==是一样的，都表示判断，整数使用-ne</p><pre><code>if [ &quot;$is_valid_module&quot; = &quot;true&quot; ] &amp;&amp; [ $tsp_module_type -ne 0 ] ; thenfi</code></pre><h4 id="7-if-elif-fi"><a href="#7-if-elif-fi" class="headerlink" title="7.if elif fi"></a>7.if elif fi</h4><pre><code>if [[ $1 == *$TSP_LOCAL_PACKAGE_NAME* ]]thenelif [[ $1 == *$BUILD_TSP_MODULE_END* ]]thenelse    :fi</code></pre><h4 id="8-变量赋值，-不能有空格"><a href="#8-变量赋值，-不能有空格" class="headerlink" title="8.变量赋值，=不能有空格"></a>8.变量赋值，=不能有空格</h4><pre><code>tsp_module_type=0tsp_module_name=&quot;&quot;is_valid_module=false</code></pre><h4 id="9-不打出log"><a href="#9-不打出log" class="headerlink" title="9. 不打出log"></a>9. 不打出log</h4><p>重定向到dev/null</p><pre><code>grep -r &quot;CHINATSP_BUILD_&quot; $1 &gt; /dev/nullif [ $? -ne 0 ] ;then    return 1else    return 0fi</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android Build </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Build </tag>
            
            <tag> 编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>makefile 基本语法及使用</title>
      <link href="/2019/10/18/androidbuild/makefile-ji-ben-yu-fa-ji-shi-yong/"/>
      <url>/2019/10/18/androidbuild/makefile-ji-ben-yu-fa-ji-shi-yong/</url>
      
        <content type="html"><![CDATA[<h4 id="1-文件使用"><a href="#1-文件使用" class="headerlink" title="1. 文件使用"></a>1. 文件使用</h4><p>创建makefile文件，然后执行make或者make xxx</p><pre><code>touch Makefile</code></pre><h4 id="2-make执行顺序与target"><a href="#2-make执行顺序与target" class="headerlink" title="2.make执行顺序与target"></a>2.make执行顺序与target</h4><pre><code>1.创建文件makefile或者Makefile,写入文件，然后执行make就可以编译，或者执行make  xxx执行对应的模块2.编译的顺序，默认make会编译第一个遇到的target就是目标最终的target,如果指定就是需要编译的</code></pre><p>make test就会下面的命令快内容，make的话会从上往下依次执行，直到遇到第一个代码块<br>下面的顺序为: aaa  xxx  test</p><pre><code>aaatest:    @echo $(findstring a, a b c)    @echo $(findstring b, a b c)    @echo $(findstring b c, a b c)xxx</code></pre><h4 id="3-log"><a href="#3-log" class="headerlink" title="3.  log"></a>3.  log</h4><pre><code>$(warning $(dirnotdir))</code></pre><h4 id="4-函数库"><a href="#4-函数库" class="headerlink" title="4. 函数库"></a>4. 函数库</h4><pre><code>//调用方式可以接参数，使用$(1)引用 $(call get-all-xml-module-name-in-subdirs, $(CHINATSP_PREBUILT_PATH)/java/jar/permissions )define integrate-xml-into-system    $(warning PRODUCT_COPY_FILES $(ONE_XML_MOUDLE_NAME)  ) \    PRODUCT_COPY_FILES += vendor/chinatsp/prebuilt/java/jar/permissions/$(ONE_XML_MOUDLE_NAME).xml:system/etc/permissions/$(ONE_XML_MOUDLE_NAME).xmlendefdefine get-all-xml-module-name-in-subdirs$(sort $(subst .xml,,$(patsubst ./%,%, \  $(notdir $(shell cd $(CHINATSP_PREBUILT_PATH) ; \          find -L $(1) -name &quot;*.xml&quot; -and -not -name &quot;.*&quot;))) \ ))endef</code></pre><h4 id="5-findstring-和-if"><a href="#5-findstring-和-if" class="headerlink" title="5. findstring 和$(if, , )"></a>5. findstring 和$(if, , )</h4><p>$(findstring xx,xxx)表示如果xx包含在xxx里，就返回xx，xxx里面内容是以空格隔开<br>$(if, , )下面为如果if有值就执行warning，否者执行函数调用</p><pre><code>$(if $(findstring $(ONE_JARALIB_MOUDLE_NAME) ,$(TSP_PREBUILT_MODULE_NAME)) , $(warning include $(ONE_JARALIB_MOUDLE_NAME)) , $(eval $(call integrate-javalib-into-system)) ))</code></pre><h4 id="6-eval"><a href="#6-eval" class="headerlink" title="6.  eval"></a>6.  eval</h4><p>eval表示展开表达式，使用时可以现场调试</p><pre><code>$(eval ONE_JARALIB_MOUDLE_NAME := $(javalib)) \</code></pre><h4 id="7-wildcard-查询文件"><a href="#7-wildcard-查询文件" class="headerlink" title="7. wildcard 查询文件"></a>7. wildcard 查询文件</h4><p>表示查询，当前目录下的so文件，可以查询多个目录，在android mk中需要使用的路径如LOCAL_PATH<br>dirnotdir=$(notdir $(wildcard ./*.so)  )</p><pre><code>使用：SRC = $(wildcard *.c ./foo/*.c) 搜索当前目录及./foo/下所有以.c结尾的文件，生成一个以空格间隔的文件名列表，并赋值给SRC.当前目录文件只有文件名，子目录下的文件名包含路径信息，比如./foor/bar.c。</code></pre><h4 id="8-notdir去除目录信息"><a href="#8-notdir去除目录信息" class="headerlink" title="8. notdir去除目录信息"></a>8. notdir去除目录信息</h4><p>使用：SRC = $(notdir wildcard)<br>去除所有的目录信息，SRC里的文件名列表将只有文件名。</p><h4 id="9-patsubst-替换字符串"><a href="#9-patsubst-替换字符串" class="headerlink" title="9. patsubst 替换字符串"></a>9. patsubst 替换字符串</h4><pre><code>使用：OBJ = $(patsubst %.c %.o $(SRC)) patsubst是patten substitude的缩写，匹配替代的意思。这句是在SRC中找到所有.c 结尾的文件，然后把所有的.c换成.o。</code></pre><h4 id="10-变量赋值和pwd"><a href="#10-变量赋值和pwd" class="headerlink" title="10. 变量赋值和pwd"></a>10. 变量赋值和pwd</h4><pre><code>#CHINATSP_PREBUILT_PATH=$(pwd)/vendor/chinatsp/prebuilt$(warning wang $(shell pwd ) )CHINATSP_PREBUILT_PATH=$(shell pwd)/vendor/chinatsp/prebuilt</code></pre><h4 id="11-shell命令"><a href="#11-shell命令" class="headerlink" title="11. shell命令"></a>11. shell命令</h4><pre><code>使用$(shell xxx)</code></pre><h4 id="12-ifeq条件判断"><a href="#12-ifeq条件判断" class="headerlink" title="12. ifeq条件判断"></a>12. ifeq条件判断</h4><pre><code>ifeq ($(origin FOO), undefined)FOO = barendif</code></pre><h4 id="12-foreach循环"><a href="#12-foreach循环" class="headerlink" title="12. foreach循环"></a>12. foreach循环</h4><p>//命令中途断开，需要使用<br>表示javalib是传入第一个参数里的对象，循环执行后面的warning语句</p><pre><code>$(foreach javalib, $(1), \    $(warning $(ONE_JARALIB_MOUDLE_NAME)  $(TSP_PREBUILT_MODULE_NAME))</code></pre><h4 id="13-赋值"><a href="#13-赋值" class="headerlink" title="13. 赋值 += := ="></a>13. 赋值 += := =</h4><pre><code>objects = main.o foo.o bar.o utils.oobjects += another.o</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android Build </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Build </tag>
            
            <tag> 编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUILD_STATIC_JAVA_LIBRARY静态jar包的编译原理</title>
      <link href="/2019/10/18/androidbuild/build-static-java-library-jing-tai-jar-bao-de-bian-yi-yuan-li/"/>
      <url>/2019/10/18/androidbuild/build-static-java-library-jing-tai-jar-bao-de-bian-yi-yuan-li/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h3 id="1-makefile文件的执行流程"><a href="#1-makefile文件的执行流程" class="headerlink" title="1. makefile文件的执行流程"></a>1. makefile文件的执行流程</h3><p>这里我们使用示例来阐述</p><pre><code>@Makefiletest:clean    @echo &quot;--------------&quot;$(warning test after)clean:    @echo &quot;make clean.....&quot;$(warning clean after....)</code></pre><p>结果：</p><pre><code>Makefile:17: test afterMakefile:23: clean after....make clean.....--------------make会找第一个target也就是test,makefile限制性不是target，也就是两个warning的log，执行完在执行test里面内容，由于依赖clean,会先打印make clean...，然后最后才执行到-------</code></pre><h3 id="2-概述"><a href="#2-概述" class="headerlink" title="2. 概述"></a>2. 概述</h3><p>测试用的源码是Android O,使用的是jack编译<br>本文讲解怎样编译static jar源码，编译后的目录解析，编译的具体过程，和一些可以的定制化思路</p><h3 id="3-编译static-jar"><a href="#3-编译static-jar" class="headerlink" title="3. 编译static jar"></a>3. 编译static jar</h3><h4 id="3-1-编译的-Androidmk"><a href="#3-1-编译的-Androidmk" class="headerlink" title="3.1 编译的 Androidmk"></a>3.1 编译的 Androidmk</h4><ul><li>BUILD_STATIC_JAVA_LIBRARY有其他模块引用的时候才会编译(LOCAL_STATIC_JAVA_LIBRAARY),因此静态的都是包含在引用的module里，如apk引用static jar，那么static jar的代码会包含在apk里面，而不是动态jar,需要放到system/framework/xxx.jar来动态引用</li></ul><pre><code>LOCAL_PATH:=$(call my-dir)include $(CLEAR_VARS)LOCAL_SRC_FILES := $(call all-java-files-under, src)LOCAL_MODULE_TAGS := optionalLOCAL_MODULE := MystatictestLOCAL_CERTIFICATE := platforminclude $(BUILD_STATIC_JAVA_LIBRARY)</code></pre><h4 id="3-2-static-jar编译结果"><a href="#3-2-static-jar编译结果" class="headerlink" title="3.2 static jar编译结果"></a>3.2 static jar编译结果</h4><p>编译生成的文件在common/ogj/JAVA_LIBRARIES，这文件夹包含BUILD_STATIC_JAVA_LIBRARY和BUILD_JAVA_LIBRARY生成的static jar和javalib</p><pre><code>out/target/common/obj/JAVA_LIBRARIES/Tstatictest_intermediates$ lsclasses.jack  jack-rsc  jack-rsc.java-source-list  link_type</code></pre><p>其他apk能应用的jar就是这里的classes.jack，如果是使用jar编译，会是claesses.jar，这个文件预编译就可以给其他文件使用</p><h3 id="4-static-jar编译流程"><a href="#4-static-jar编译流程" class="headerlink" title="4 static jar编译流程"></a>4 static jar编译流程</h3><h4 id="4-1-androidmk-流程"><a href="#4-1-androidmk-流程" class="headerlink" title="4.1 androidmk 流程"></a>4.1 androidmk 流程</h4><pre><code>//android.mk调用include $(BUILD_STATIC_JAVA_LIBRARY)//调用的是build/core/static_java_library.mk编译BUILD_STATIC_JAVA_LIBRARY:= $(BUILD_SYSTEM)/static_java_library.mk </code></pre><h4 id="4-2-static-java-library-mk-流程"><a href="#4-2-static-java-library-mk-流程" class="headerlink" title="4.2 static_java_library.mk  流程"></a>4.2 static_java_library.mk  流程</h4><ul><li>static_java_library.mk会引用如下几个mk</li></ul><pre><code>//配置jackinclude $(BUILD_SYSTEM)/configure_local_jack.mk//编译javalibinclude $(BUILD_SYSTEM)/java_library.mk//如果需要编译res的话ifeq (true,$(need_compile_res))include $(BUILD_SYSTEM)/android_manifest.mk//aapt2打包资源include $(BUILD_SYSTEM)/aapt2.mk</code></pre><ul><li>static_java_library私有变量<pre><code>//static_java_library.mk会先设置变量，这几个就是和java_library.mk区别//这个导致LOCAL_POST_INSTALL_CMD不能用@static_java_library.mkLOCAL_UNINSTALLABLE_MODULE := trueLOCAL_IS_STATIC_JAVA_LIBRARY := trueLOCAL_MODULE_CLASS := JAVA_LIBRARIES</code></pre></li></ul><p>//LOCAL_UNINSTALLABLE_MODULE不等于true才可以<br>@build/core/base_rules.mk<br>ifneq (true,$(LOCAL_UNINSTALLABLE_MODULE))<br>$(LOCAL_INSTALLED_MODULE): PRIVATE_POST_INSTALL_CMD := $(LOCAL_POST_INSTALL_CMD)<br>$(LOCAL_INSTALLED_MODULE): $(LOCAL_BUILT_MODULE)<br>    @echo “Install: $@”<br>    $(copy-file-to-new-target)<br>    $(PRIVATE_POST_INSTALL_CMD)</p><pre><code>- include $(BUILD_SYSTEM)/configure_local_jack.mk  configure_local_jack配置使用Jack LOCAL_JACK_ENABLED</code></pre><p>@configure_local_jack.mk<br>ifdef ANDROID_FORCE_JACK_ENABLED<br>LOCAL_JACK_ENABLED := $(ANDROID_FORCE_JACK_ENABLED)<br>endif</p><p>ifneq ($(ANDROID_COMPILE_WITH_JACK),true)<br>LOCAL_JACK_ENABLED :=<br>endif<br>…</p><p>//在编译时候，就会使用$(full_classes_jack)来编译，而不是jar<br>@java_library.mk<br>ifdef LOCAL_JACK_ENABLED<br>ifdef LOCAL_IS_STATIC_JAVA_LIBRARY<br>LOCAL_BUILT_MODULE_STEM := classes.jack<br>endif<br>endif</p><p>ifeq ($(LOCAL_IS_STATIC_JAVA_LIBRARY),true)<br>$(eval $(call copy-one-file,$(full_classes_jar),$(common_javalib.jar)))</p><p>ifdef LOCAL_JACK_ENABLED<br>$(eval $(call copy-one-file,$(full_classes_jack),$(LOCAL_BUILT_MODULE)))<br>else<br>$(eval $(call copy-one-file,$(full_classes_jar),$(LOCAL_BUILT_MODULE)))<br>endif</p><p>else # !LOCAL_IS_STATIC_JAVA_LIBRARY</p><pre><code>### 5. java_library.mk  流程在一系列变量定义好之后，会执行到</code></pre><p>include $(BUILD_SYSTEM)/java.mk</p><pre><code>#### 6. java. mk  流程不清楚是否按这个顺序编译的</code></pre><p>LOCAL_INTERMEDIATE_TARGETS += <br>    $(full_classes_compiled_jar) <br>    $(full_classes_desugar_jar) <br>    $(full_classes_jarjar_jar) <br>    $(full_classes_jar) <br>    $(full_classes_proguard_jar) <br>    $(built_dex_intermediate) <br>    $(full_classes_jack) <br>    $(noshrob_classes_jack) <br>    $(jack_check_timestamp) <br>    $(built_dex) <br>    $(full_classes_stubs_jar)</p><pre><code>java.mk会编译到</code></pre><p>//就调用java-to-jack<br>ifeq ($(LOCAL_IS_STATIC_JAVA_LIBRARY),true)<br>$(full_classes_jack): PRIVATE_JACK_PLUGIN_PATH := $(LOCAL_JACK_PLUGIN_PATH)<br>$(full_classes_jack): PRIVATE_JACK_PLUGIN := $(LOCAL_JACK_PLUGIN)<br>$(full_classes_jack): $(jack_all_deps) $(LOCAL_JACK_PLUGIN_PATH) | setup-jack-server<br>    @echo Building with Jack: $@<br>    $(java-to-jack)</p><pre><code>//java-to-jack找寻java文件到java-source-list，然后编译claess.jack</code></pre><p>Invoke Jack to compile java from source to jack files without shrink or obfuscation.</p><p>Some historical notes:</p><ul><li>below we write the list of java files to java-source-list to avoid argument<br>list length problems with Cygwin</li><li>we filter out duplicate java file names because Jack doesn’t like them.<br>define java-to-jack<br>$(if $(PRIVATE_JACK_INCREMENTAL_DIR),$(hide) mkdir -p $(PRIVATE_JACK_INCREMENTAL_DIR))<br>$(call dump-words-to-file,$(PRIVATE_JAVA_SOURCES),$(PRIVATE_JACK_INTERMEDIATES_DIR)/java-source-list)<br>$(hide) if [ -d “$(PRIVATE_SOURCE_INTERMEDIATES_DIR)” ]; then \<pre><code>    find $(PRIVATE_SOURCE_INTERMEDIATES_DIR) -name &#39;*.java&#39; &gt;&gt; $(PRIVATE_JACK_INTERMEDIATES_DIR)/java-source-list; \</code></pre>fi<br>fi; <br>$(call call-jack) <br>  $(if $(PRIVATE_JACK_PLUGIN),–plugin $(call normalize-comma-list,$(PRIVATE_JACK_PLUGIN))) <br>  $(if $(PRIVATE_EXTRA_JAR_ARGS),–import-resource $@.res.tmp) <br>  -D jack.import.resource.policy=keep-first <br>  -D jack.import.type.policy=keep-first <br>  -D jack.android.min-api-level=$(PRIVATE_JACK_MIN_SDK_VERSION) \1 )<br>$(if $(PRIVATE_JAR_MANIFEST), $(hide) echo unsupported options JAR_MANIFEST in $@; exit 53)<br>endef<pre><code></code></pre></li></ul><h3 id="7-使用"><a href="#7-使用" class="headerlink" title="7. 使用"></a>7. 使用</h3><p>在ANdroid.mk中使用LOCAL_STATIC_JAR_CMD就可以自定义static jar命令来</p><pre><code>ifeq ($(LOCAL_IS_STATIC_JAVA_LIBRARY),true)$(full_classes_jack): PRIVATE_JACK_PLUGIN_PATH := $(LOCAL_JACK_PLUGIN_PATH)$(full_classes_jack): PRIVATE_JACK_PLUGIN := $(LOCAL_JACK_PLUGIN)$(full_classes_jack): PRIVATE_STATIC_JAR_CMD := $(LOCAL_STATIC_JAR_CMD)$(full_classes_jack): $(jack_all_deps) $(LOCAL_JACK_PLUGIN_PATH) | setup-jack-server    @echo Building with Jack: $@    $(java-to-jack)    $(PRIVATE_STATIC_JAR_CMD)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android Build </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Build </tag>
            
            <tag> 编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环境变量控制source和prebuilt</title>
      <link href="/2019/10/18/androidbuild/huan-jing-bian-liang-kong-zhi-source-he-prebuilt/"/>
      <url>/2019/10/18/androidbuild/huan-jing-bian-liang-kong-zhi-source-he-prebuilt/</url>
      
        <content type="html"><![CDATA[<h3 id="1-环境变量使用"><a href="#1-环境变量使用" class="headerlink" title="1.环境变量使用"></a>1.环境变量使用</h3><h4 id="1-1-添加环境变量方法如下"><a href="#1-1-添加环境变量方法如下" class="headerlink" title="1.1 添加环境变量方法如下"></a>1.1 添加环境变量方法如下</h4><pre><code>source build/envsetup.shlunchexport TARGET_BUILD_CHINATSP=true  //环境变量添加,在编译之前,这个应该放在服务器,本地开发者不需要加这个要方便一点//执行make时就会出现 Environment variable TARGET_BUILD_CHINATSP was set内容[1/1] out/soong/.bootstrap/bin/soong_build out/soong/build.ninjaEnvironment variable TARGET_BUILD_CHINATSP was set, regenerating...[6/1206] including ./build/target/board/Android.mk ...</code></pre><h4 id="1-1-mk中的使用方法"><a href="#1-1-mk中的使用方法" class="headerlink" title="1.1 mk中的使用方法"></a>1.1 mk中的使用方法</h4><p>使用if条件判断包起来代码块就行,可以包括全部,也可以说其中一些变量</p><pre><code>ifeq ($(TARGET_BUILD_CHINATSP),true)LOCAL_PATH:= $(call my-dir)include $(CLEAR_VARS)LOCAL_MODULE_TAGS := optionalLOCAL_SRC_FILES := $(call all-java-files-under, src)LOCAL_RESOURCE_DIR := $(LOCAL_PATH)/res...#test#LOCAL_JAVA_LIBRARIES += myjavalibtestLOCAL_PACKAGE_NAME := BinderJavaClientLOCAL_PROGUARD_ENABLED := disabledLOCAL_CERTIFICATE := platform#LOCAL_DEX_PREOPT := falseinclude $(CHINATSP_BUILD_PACKAGE)include $(BUILD_PACKAGE)endif</code></pre><h4 id="1-1-结果"><a href="#1-1-结果" class="headerlink" title="1.1 结果"></a>1.1 结果</h4><ul><li>当使用变量为true时,会出现如下错误,错误原因BinderJavaClient2重复定义</li></ul><pre><code>[1026/1206] including ./vendor/chinatsp/sourcecode/apk/BinderJavaClient2/Android.mk ...build/core/base_rules.mk:238: error: vendor/chinatsp/sourcecode/apk/BinderJavaClient2: MODULE.TARGET.APPS.BinderJavaClient already defined by vendor/chinatsp/sourcecode/apk/BinderJavaClient.16:21:38 ckati failed with: exit status 1</code></pre><ul><li>当环境变量是false时,不会出现编译错误</li></ul><p>编译成功,应该另一个apk不会编译进去</p><pre><code>export TARGET_BUILD_CHINATSP=falsedevice/qcom/common/generate_extra_images.mk:503: warning: ignoring old commands for target `kernelclean&#39;[100% 6/6] out/soong/.bootstrap/bin/soong_build out/soong/build.ninja[ 50% 1/2] glob art[100% 1/1] Ensuring Jack server is installed and startedJack server already installed in &quot;/home/wangdong/.jack-server&quot;Server is already running#### build completed successfully (02:36 (mm:ss)) ####</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android Build </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Build </tag>
            
            <tag> 编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Notification(4) -- event log 流程</title>
      <link href="/2019/09/30/notification/android-notification-4-event-log-liu-cheng/"/>
      <url>/2019/09/30/notification/android-notification-4-event-log-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="1-1-event-log定义及-log流程"><a href="#1-1-event-log定义及-log流程" class="headerlink" title="1.1 event log定义及 log流程"></a>1.1 event log定义及 log流程</h3><ul><li>在event log中搜索 notification_可以看到通知各个时间段log<br>大概有 ==notification_enqueue  – notification_expansion –notification_visibility – notification_clicked – notification_canceled==</li><li>//notification_enqueue  把通知放入队列，要注意status 0 post 1 update，因此看event log可能会有几个，1个post ,另外都update</li><li>//notification_visibility代表通知时可见的，在下拉通知时会触发，其他情况也有</li><li>//notification_expansion在灭屏亮屏，滑动后会触发</li><li>//notification_clicked 点击通知时会打印此log</li><li>//notification_canceled 调用NotificationManager.cancel(ID)会触发此发现，注意和notification_cancel不是一个东西</li></ul><pre><code>@ /frameworks/base/services/core/java/com/android/server/EventLogTags.logtags59# when a NotificationManager.notify is called. status: 0=post, 1=update, 2=ignored602750 notification_enqueue (uid|1|5),(pid|1|5),(pkg|3),(id|1|5),(tag|3),(userid|1|5),(notification|3),(status|1)7427511 notification_expansion (key|3),(user_action|1),(expanded|1),(lifespan|1),(freshness|1),(exposure|1)7627520 notification_clicked (key|3),(lifespan|1),(freshness|1),(exposure|1),(rank|1),(count|1)79# when a notification has been canceled8027530 notification_canceled (key|3),(reason|1),(lifespan|1),(freshness|1),(exposure|1),(rank|1),(count|1),(listener|3)81# replaces 27510 with a row per notification8227531 notification_visibility (key|3),(visibile|1),(lifespan|1),(freshness|1),(exposure|1),(rank|1)83# a notification emited noise, vibration, or light8427532 notification_alert (key|3),(buzz|1),(beep|1),(blink|1)</code></pre><h3 id="1-2-eventlog对应方法"><a href="#1-2-eventlog对应方法" class="headerlink" title="1.2 eventlog对应方法"></a>1.2 eventlog对应方法</h3><p>编译后对应的方法如下</p><pre class=" language-java"><code class="language-java">out<span class="token operator">/</span>target<span class="token operator">/</span>common<span class="token operator">/</span>obj<span class="token operator">/</span>JAVA_LIBRARIES<span class="token operator">/</span>services<span class="token punctuation">.</span>core_intermediates<span class="token operator">/</span>src<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>server<span class="token operator">/</span>EventLogTags<span class="token punctuation">.</span>java  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeNotificationEnqueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> pid<span class="token punctuation">,</span> String pkg<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> String tag<span class="token punctuation">,</span> <span class="token keyword">int</span> userid<span class="token punctuation">,</span> String notification<span class="token punctuation">,</span> <span class="token keyword">int</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EventLog<span class="token punctuation">.</span><span class="token function">writeEvent</span><span class="token punctuation">(</span>NOTIFICATION_ENQUEUE<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> pkg<span class="token punctuation">,</span> id<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> userid<span class="token punctuation">,</span> notification<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeNotificationCancel</span><span class="token punctuation">(</span><span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> pid<span class="token punctuation">,</span> String pkg<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> String tag<span class="token punctuation">,</span> <span class="token keyword">int</span> userid<span class="token punctuation">,</span> <span class="token keyword">int</span> requiredFlags<span class="token punctuation">,</span> <span class="token keyword">int</span> forbiddenFlags<span class="token punctuation">,</span> <span class="token keyword">int</span> reason<span class="token punctuation">,</span> String listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EventLog<span class="token punctuation">.</span><span class="token function">writeEvent</span><span class="token punctuation">(</span>NOTIFICATION_CANCEL<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> pkg<span class="token punctuation">,</span> id<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> userid<span class="token punctuation">,</span> requiredFlags<span class="token punctuation">,</span> forbiddenFlags<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeNotificationCancelAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> pid<span class="token punctuation">,</span> String pkg<span class="token punctuation">,</span> <span class="token keyword">int</span> userid<span class="token punctuation">,</span> <span class="token keyword">int</span> requiredFlags<span class="token punctuation">,</span> <span class="token keyword">int</span> forbiddenFlags<span class="token punctuation">,</span> <span class="token keyword">int</span> reason<span class="token punctuation">,</span> String listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EventLog<span class="token punctuation">.</span><span class="token function">writeEvent</span><span class="token punctuation">(</span>NOTIFICATION_CANCEL_ALL<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> pkg<span class="token punctuation">,</span> userid<span class="token punctuation">,</span> requiredFlags<span class="token punctuation">,</span> forbiddenFlags<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeNotificationPanelHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EventLog<span class="token punctuation">.</span><span class="token function">writeEvent</span><span class="token punctuation">(</span>NOTIFICATION_PANEL_HIDDEN<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeNotificationVisibilityChanged</span><span class="token punctuation">(</span>String newlyvisiblekeys<span class="token punctuation">,</span> String nolongervisiblekeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>    android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EventLog<span class="token punctuation">.</span><span class="token function">writeEvent</span><span class="token punctuation">(</span>NOTIFICATION_VISIBILITY_CHANGED<span class="token punctuation">,</span> newlyvisiblekeys<span class="token punctuation">,</span> nolongervisiblekeys<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeNotificationExpansion</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">int</span> userAction<span class="token punctuation">,</span> <span class="token keyword">int</span> expanded<span class="token punctuation">,</span> <span class="token keyword">int</span> lifespan<span class="token punctuation">,</span> <span class="token keyword">int</span> freshness<span class="token punctuation">,</span> <span class="token keyword">int</span> exposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>    android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EventLog<span class="token punctuation">.</span><span class="token function">writeEvent</span><span class="token punctuation">(</span>NOTIFICATION_EXPANSION<span class="token punctuation">,</span> key<span class="token punctuation">,</span> userAction<span class="token punctuation">,</span> expanded<span class="token punctuation">,</span> lifespan<span class="token punctuation">,</span> freshness<span class="token punctuation">,</span> exposure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeNotificationClicked</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">int</span> lifespan<span class="token punctuation">,</span> <span class="token keyword">int</span> freshness<span class="token punctuation">,</span> <span class="token keyword">int</span> exposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>    android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EventLog<span class="token punctuation">.</span><span class="token function">writeEvent</span><span class="token punctuation">(</span>NOTIFICATION_CLICKED<span class="token punctuation">,</span> key<span class="token punctuation">,</span> lifespan<span class="token punctuation">,</span> freshness<span class="token punctuation">,</span> exposure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeNotificationCanceled</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">int</span> reason<span class="token punctuation">,</span> <span class="token keyword">int</span> lifespan<span class="token punctuation">,</span> <span class="token keyword">int</span> freshness<span class="token punctuation">,</span> <span class="token keyword">int</span> exposure<span class="token punctuation">,</span> String listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EventLog<span class="token punctuation">.</span><span class="token function">writeEvent</span><span class="token punctuation">(</span>NOTIFICATION_CANCELED<span class="token punctuation">,</span> key<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> lifespan<span class="token punctuation">,</span> freshness<span class="token punctuation">,</span> exposure<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeNotificationVisibility</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">int</span> visibile<span class="token punctuation">,</span> <span class="token keyword">int</span> lifespan<span class="token punctuation">,</span> <span class="token keyword">int</span> freshness<span class="token punctuation">,</span> <span class="token keyword">int</span> exposure<span class="token punctuation">,</span> <span class="token keyword">int</span> rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>    android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EventLog<span class="token punctuation">.</span><span class="token function">writeEvent</span><span class="token punctuation">(</span>NOTIFICATION_VISIBILITY<span class="token punctuation">,</span> key<span class="token punctuation">,</span> visibile<span class="token punctuation">,</span> lifespan<span class="token punctuation">,</span> freshness<span class="token punctuation">,</span> exposure<span class="token punctuation">,</span> rank<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h3 id="1-3-各个event-log位置"><a href="#1-3-各个event-log位置" class="headerlink" title="1.3 各个event log位置"></a>1.3 各个event log位置</h3><h4 id="1-3-1-notification-enqueue-writeNotificationEnqueue"><a href="#1-3-1-notification-enqueue-writeNotificationEnqueue" class="headerlink" title="1.3.1 notification_enqueue(writeNotificationEnqueue)"></a>1.3.1 notification_enqueue(writeNotificationEnqueue)</h4><ul><li>在Android P中发送通知时发现event log只打印了notification_enqueue，并不会打印后面的  notification_expansion –notification_visibility ，因此发送时间应该是<br>app发送通知时间—notification_enqueue时间–到SystemUI.createNotificationViews才是正确的时间，而不是从notification_enqueue到notification_visibility</li></ul><p>打开 SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java DEBUG开关用来调试</p><p>writeNotificationEnqueue是在 enqueueNotificationWithTag 之后的handler中打印</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@frameworks</span><span class="token operator">/</span>base<span class="token operator">/</span>services<span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>server<span class="token operator">/</span>notification<span class="token operator">/</span>NotificationManagerService<span class="token punctuation">.</span>java<span class="token keyword">protected</span> <span class="token keyword">class</span> <span class="token class-name">EnqueueNotificationRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> NotificationRecord r<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> userId<span class="token punctuation">;</span>    <span class="token function">EnqueueNotificationRunnable</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">,</span> NotificationRecord r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mNotificationLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mEnqueuedNotifications<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scheduleTimeoutLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">// This conditional is a dirty hack to limit the logging done on</span>            <span class="token comment" spellcheck="true">//     behalf of the download manager without affecting other apps.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pkg<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"com.android.providers.downloads"</span><span class="token punctuation">)</span>                    <span class="token operator">||</span> Log<span class="token punctuation">.</span><span class="token function">isLoggable</span><span class="token punctuation">(</span><span class="token string">"DownloadManager"</span><span class="token punctuation">,</span> Log<span class="token punctuation">.</span>VERBOSE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> enqueueStatus <span class="token operator">=</span> EVENTLOG_ENQUEUE_STATUS_NEW<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>old <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    enqueueStatus <span class="token operator">=</span> EVENTLOG_ENQUEUE_STATUS_UPDATE<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                EventLogTags<span class="token punctuation">.</span><span class="token function">writeNotificationEnqueue</span><span class="token punctuation">(</span>callingUid<span class="token punctuation">,</span> callingPid<span class="token punctuation">,</span>                        pkg<span class="token punctuation">,</span> id<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> notification<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//writeNotificationEnqueue</span>                        enqueueStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mRankingHelper<span class="token punctuation">.</span><span class="token function">extractSignals</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// tell the assistant service about the notification</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mAssistants<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mAssistants<span class="token punctuation">.</span><span class="token function">onNotificationEnqueued</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                mHandler<span class="token punctuation">.</span><span class="token function">postDelayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PostNotificationRunnable</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        DELAY_FOR_ASSISTANT_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PostNotificationRunnable</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-3-2-notification-expansion-writeNotificationExpansion"><a href="#1-3-2-notification-expansion-writeNotificationExpansion" class="headerlink" title="1.3.2 notification_expansion(writeNotificationExpansion)"></a>1.3.2 notification_expansion(writeNotificationExpansion)</h4><p>使用测试时发现，send通知时并不会调用到这个，只发现在灭屏亮屏后可以</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SystemUI</span><span class="token operator">/</span>src<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>systemui<span class="token operator">/</span>statusbar<span class="token operator">/</span>ExpandableNotificationRow<span class="token punctuation">.</span>java<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onExpansionChanged</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> userAction<span class="token punctuation">,</span> <span class="token keyword">boolean</span> wasExpanded<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> nowExpanded <span class="token operator">=</span> <span class="token function">isExpanded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mIsSummaryWithChildren <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>mIsLowPriority <span class="token operator">||</span> wasExpanded<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nowExpanded <span class="token operator">=</span> mGroupManager<span class="token punctuation">.</span><span class="token function">isGroupExpanded</span><span class="token punctuation">(</span>mStatusBarNotification<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nowExpanded <span class="token operator">!=</span> wasExpanded<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">updateShelfIconColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mLogger <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mLogger<span class="token punctuation">.</span><span class="token function">logNotificationExpansion</span><span class="token punctuation">(</span>mLoggingKey<span class="token punctuation">,</span> userAction<span class="token punctuation">,</span> nowExpanded<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mIsSummaryWithChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mChildrenContainer<span class="token punctuation">.</span><span class="token function">onExpansionChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@SystemUI</span><span class="token operator">/</span>src<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>systemui<span class="token operator">/</span>statusbar<span class="token operator">/</span>phone<span class="token operator">/</span>StatusBar<span class="token punctuation">.</span>java<span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logNotificationExpansion</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">boolean</span> userAction<span class="token punctuation">,</span> <span class="token keyword">boolean</span> expanded<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mUiOffloadThread<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            mBarService<span class="token punctuation">.</span><span class="token function">onNotificationExpansionChanged</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> userAction<span class="token punctuation">,</span> expanded<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Ignore.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@frameworks</span><span class="token operator">/</span>base<span class="token operator">/</span>services<span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>server<span class="token operator">/</span>statusbar<span class="token operator">/</span>StatusBarManagerService<span class="token punctuation">.</span>java<span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNotificationExpansionChanged</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">boolean</span> userAction<span class="token punctuation">,</span>        <span class="token keyword">boolean</span> expanded<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>    <span class="token function">enforceStatusBarService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> identity <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        mNotificationDelegate<span class="token punctuation">.</span><span class="token function">onNotificationExpansionChanged</span><span class="token punctuation">(</span>                key<span class="token punctuation">,</span> userAction<span class="token punctuation">,</span> expanded<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        Binder<span class="token punctuation">.</span><span class="token function">restoreCallingIdentity</span><span class="token punctuation">(</span>identity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@frameworks</span><span class="token operator">/</span>base<span class="token operator">/</span>services<span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>server<span class="token operator">/</span>notification<span class="token operator">/</span>NotificationDelegate<span class="token punctuation">.</span>java<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">NotificationDelegate</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">onSetDisabled</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onClearAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> callingUid<span class="token punctuation">,</span> <span class="token keyword">int</span> callingPid<span class="token punctuation">,</span> <span class="token keyword">int</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onNotificationClick</span><span class="token punctuation">(</span><span class="token keyword">int</span> callingUid<span class="token punctuation">,</span> <span class="token keyword">int</span> callingPid<span class="token punctuation">,</span> String key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onNotificationActionClick</span><span class="token punctuation">(</span><span class="token keyword">int</span> callingUid<span class="token punctuation">,</span> <span class="token keyword">int</span> callingPid<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> <span class="token keyword">int</span> actionIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onNotificationClear</span><span class="token punctuation">(</span><span class="token keyword">int</span> callingUid<span class="token punctuation">,</span> <span class="token keyword">int</span> callingPid<span class="token punctuation">,</span>            String pkg<span class="token punctuation">,</span> String tag<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onNotificationError</span><span class="token punctuation">(</span><span class="token keyword">int</span> callingUid<span class="token punctuation">,</span> <span class="token keyword">int</span> callingPid<span class="token punctuation">,</span>            String pkg<span class="token punctuation">,</span> String tag<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span>            <span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> initialPid<span class="token punctuation">,</span> String message<span class="token punctuation">,</span> <span class="token keyword">int</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onPanelRevealed</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> clearEffects<span class="token punctuation">,</span> <span class="token keyword">int</span> numItems<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onPanelHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onNotificationExpansionChanged</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">boolean</span> userAction<span class="token punctuation">,</span> <span class="token keyword">boolean</span> expanded<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@frameworks</span><span class="token operator">/</span>base<span class="token operator">/</span>services<span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>server<span class="token operator">/</span>notification<span class="token operator">/</span>NotificationManagerService<span class="token punctuation">.</span>java<span class="token keyword">final</span> NotificationDelegate mNotificationDelegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NotificationDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNotificationExpansionChanged</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> userAction<span class="token punctuation">,</span> <span class="token keyword">boolean</span> expanded<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mNotificationLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            NotificationRecord r <span class="token operator">=</span> mNotificationsByKey<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                r<span class="token punctuation">.</span>stats<span class="token punctuation">.</span><span class="token function">onExpansionChanged</span><span class="token punctuation">(</span>userAction<span class="token punctuation">,</span> expanded<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token keyword">long</span> now <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>userAction<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    MetricsLogger<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getLogMaker</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">setCategory</span><span class="token punctuation">(</span>MetricsEvent<span class="token punctuation">.</span>NOTIFICATION_ITEM<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>expanded <span class="token operator">?</span> MetricsEvent<span class="token punctuation">.</span>TYPE_DETAIL                                    <span class="token operator">:</span> MetricsEvent<span class="token punctuation">.</span>TYPE_COLLAPSE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                EventLogTags<span class="token punctuation">.</span><span class="token function">writeNotificationExpansion</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>                        userAction <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> expanded <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                        r<span class="token punctuation">.</span><span class="token function">getLifespanMs</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">getFreshnessMs</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">getExposureMs</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre><code>//stack如下08-26 07:30:48.423   849  1233 W System.err: java.lang.Exception: William Notification NMS writeNotificationExpansion:08-26 07:30:48.424   849  1233 W System.err:     at com.android.server.notification.NotificationManagerService$1.onNotificationExpansionChanged(NotificationManagerService.java:864)08-26 07:30:48.424   849  1233 W System.err:     at com.android.server.statusbar.StatusBarManagerService.onNotificationExpansionChanged(StatusBarManagerService.java:1080)08-26 07:30:48.424   849  1233 W System.err:     at com.android.internal.statusbar.IStatusBarService$Stub.onTransact(IStatusBarService.java:365)08-26 07:30:48.424   849  1233 W System.err:     at android.os.Binder.execTransact(Binder.java:731)</code></pre><h4 id="1-3-3-notification-visibility-writeNotificationVisibility"><a href="#1-3-3-notification-visibility-writeNotificationVisibility" class="headerlink" title="1.3.3 notification_visibility(writeNotificationVisibility)"></a>1.3.3 notification_visibility(writeNotificationVisibility)</h4><p>notification_visibility在通知View可见时触发，比如下拉状态栏，亮屏时PanelView也会显示</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@frameworks</span><span class="token operator">/</span>base<span class="token operator">/</span>services<span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>server<span class="token operator">/</span>notification<span class="token operator">/</span>NotificationRecord<span class="token punctuation">.</span>java<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> visible<span class="token punctuation">,</span> <span class="token keyword">int</span> rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">long</span> now <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mVisibleSinceMs <span class="token operator">=</span> visible <span class="token operator">?</span> now <span class="token operator">:</span> mVisibleSinceMs<span class="token punctuation">;</span>    stats<span class="token punctuation">.</span><span class="token function">onVisibilityChanged</span><span class="token punctuation">(</span>visible<span class="token punctuation">)</span><span class="token punctuation">;</span>    MetricsLogger<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token function">getLogMaker</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setCategory</span><span class="token punctuation">(</span>MetricsEvent<span class="token punctuation">.</span>NOTIFICATION_ITEM<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>visible <span class="token operator">?</span> MetricsEvent<span class="token punctuation">.</span>TYPE_OPEN <span class="token operator">:</span> MetricsEvent<span class="token punctuation">.</span>TYPE_CLOSE<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addTaggedData</span><span class="token punctuation">(</span>MetricsEvent<span class="token punctuation">.</span>NOTIFICATION_SHADE_INDEX<span class="token punctuation">,</span> rank<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>visible<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MetricsLogger<span class="token punctuation">.</span><span class="token function">histogram</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> <span class="token string">"note_freshness"</span><span class="token punctuation">,</span> <span class="token function">getFreshnessMs</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    EventLogTags<span class="token punctuation">.</span><span class="token function">writeNotificationVisibility</span><span class="token punctuation">(</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> visible <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token function">getLifespanMs</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">getFreshnessMs</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// exposure time</span>            rank<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>//stack如下</p><pre><code>08-26 07:06:02.722   849  1483 W System.err: java.lang.Exception: William Notification writeNotificationVisibility:08-26 07:06:02.722   849  1483 W System.err:     at com.android.server.notification.NotificationRecord.setVisibility(NotificationRecord.java:818)08-26 07:06:02.722   849  1483 W System.err:     at com.android.server.notification.NotificationManagerService$1.onNotificationVisibilityChanged(NotificationManagerService.java:830)08-26 07:06:02.722   849  1483 W System.err:     at com.android.server.statusbar.StatusBarManagerService.onNotificationVisibilityChanged(StatusBarManagerService.java:1067)08-26 07:06:02.722   849  1483 W System.err:     at com.android.internal.statusbar.IStatusBarService$Stub.onTransact(IStatusBarService.java:352)08-26 07:06:02.722   849  1483 W System.err:     at android.os.Binder.execTransact(Binder.java:731)</code></pre><h4 id="1-3-4-notification-clicked-writeNotificationClicked"><a href="#1-3-4-notification-clicked-writeNotificationClicked" class="headerlink" title="1.3.4 notification_clicked(writeNotificationClicked)"></a>1.3.4 notification_clicked(writeNotificationClicked)</h4><p>点击通知时会打印此log</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@services</span><span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>server<span class="token operator">/</span>notification<span class="token operator">/</span>NotificationManagerService<span class="token punctuation">.</span>java<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNotificationClick</span><span class="token punctuation">(</span><span class="token keyword">int</span> callingUid<span class="token punctuation">,</span> <span class="token keyword">int</span> callingPid<span class="token punctuation">,</span> String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mNotificationLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        NotificationRecord r <span class="token operator">=</span> mNotificationsByKey<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"No notification with key: "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> now <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MetricsLogger<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getLogMaker</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setCategory</span><span class="token punctuation">(</span>MetricsEvent<span class="token punctuation">.</span>NOTIFICATION_ITEM<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>MetricsEvent<span class="token punctuation">.</span>TYPE_ACTION<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EventLogTags<span class="token punctuation">.</span><span class="token function">writeNotificationClicked</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>                r<span class="token punctuation">.</span><span class="token function">getLifespanMs</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">getFreshnessMs</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">getExposureMs</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StatusBarNotification sbn <span class="token operator">=</span> r<span class="token punctuation">.</span>sbn<span class="token punctuation">;</span>        <span class="token function">cancelNotification</span><span class="token punctuation">(</span>callingUid<span class="token punctuation">,</span> callingPid<span class="token punctuation">,</span> sbn<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sbn<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                sbn<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Notification<span class="token punctuation">.</span>FLAG_AUTO_CANCEL<span class="token punctuation">,</span>                Notification<span class="token punctuation">.</span>FLAG_FOREGROUND_SERVICE<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                REASON_CLICK<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>//stack如下</p><pre><code>08-26 07:06:03.469   849  2597 W System.err: java.lang.Exception: William Notification NMS click:08-26 07:06:03.470   849  2597 W System.err:     at com.android.server.notification.NotificationManagerService$1.onNotificationClick(NotificationManagerService.java:716)08-26 07:06:03.470   849  2597 W System.err:     at com.android.server.statusbar.StatusBarManagerService.onNotificationClick(StatusBarManagerService.java:1009)08-26 07:06:03.470   849  2597 W System.err:     at com.android.internal.statusbar.IStatusBarService$Stub.onTransact(IStatusBarService.java:267)08-26 07:06:03.470   849  2597 W System.err:     at android.os.Binder.execTransact(Binder.java:731)</code></pre><h4 id="1-3-5-notification-canceled-writeNotificationCanceled"><a href="#1-3-5-notification-canceled-writeNotificationCanceled" class="headerlink" title="1.3.5 notification_canceled(writeNotificationCanceled)"></a>1.3.5 notification_canceled(writeNotificationCanceled)</h4><p>调用NotificationManager.cancel(ID)会触发此发现，注意和notification_cancel不是一个东西</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@NMS</span><span class="token punctuation">.</span>java<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cancelNotificationLocked</span><span class="token punctuation">(</span>NotificationRecord r<span class="token punctuation">,</span> <span class="token keyword">boolean</span> sendDelete<span class="token punctuation">,</span> <span class="token keyword">int</span> reason<span class="token punctuation">,</span>        <span class="token keyword">boolean</span> wasPosted<span class="token punctuation">,</span> String listenerName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> String canceledKey <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">final</span> <span class="token keyword">long</span> now <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MetricsLogger<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getLogMaker</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setCategory</span><span class="token punctuation">(</span>MetricsEvent<span class="token punctuation">.</span>NOTIFICATION_ITEM<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>MetricsEvent<span class="token punctuation">.</span>TYPE_DISMISS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setSubtype</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EventLogTags<span class="token punctuation">.</span><span class="token function">writeNotificationCanceled</span><span class="token punctuation">(</span>canceledKey<span class="token punctuation">,</span> reason<span class="token punctuation">,</span>            r<span class="token punctuation">.</span><span class="token function">getLifespanMs</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">getFreshnessMs</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">getExposureMs</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span> listenerName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>//stack如下</p><pre><code>08-26 07:06:05.990   849   849 W System.err: java.lang.Exception: William Notification NMS cancel:08-26 07:06:05.990   849   849 W System.err:     at com.android.server.notification.NotificationManagerService.cancelNotificationLocked(NotificationManagerService.java:5603)08-26 07:06:05.990   849   849 W System.err:     at com.android.server.notification.NotificationManagerService.access$7500(NotificationManagerService.java:244)08-26 07:06:05.990   849   849 W System.err:     at com.android.server.notification.NotificationManagerService$14.run(NotificationManagerService.java:5772)08-26 07:06:05.990   849   849 W System.err:     at android.os.Handler.handleCallback(Handler.java:873)08-26 07:06:05.991   849   849 W System.err:     at android.os.Handler.dispatchMessage(Handler.java:99)08-26 07:06:05.991   849   849 W System.err:     at android.os.Looper.loop(Looper.java:193)08-26 07:06:05.991   849   849 W System.err:     at com.android.server.SystemServer.run(SystemServer.java:460)08-26 07:06:05.991   849   849 W System.err:     at com.android.server.SystemServer.main(SystemServer.java:296)08-26 07:06:05.991   849   849 W System.err:     at java.lang.reflect.Method.invoke(Native Method)08-26 07:06:05.991   849   849 W System.err:     at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)08-26 07:06:05.991   849   849 W System.err:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:838)08-26 07:06:05.991   849   849 I notification_canceled: [0|com.tsp.notification|10025|null|10075,8,8425,8425,3265,-1,-1,NULL]</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android Notification </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notification </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Notification(3) -- SystemUi启动与加载Notification 流程</title>
      <link href="/2019/09/30/notification/android-notification-3-systemui-qi-dong-yu-jia-zai-notification-liu-cheng/"/>
      <url>/2019/09/30/notification/android-notification-3-systemui-qi-dong-yu-jia-zai-notification-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="1-1-SystemServer-启动SystemUi"><a href="#1-1-SystemServer-启动SystemUi" class="headerlink" title="1.1 SystemServer 启动SystemUi"></a>1.1 SystemServer 启动SystemUi</h3><p>startService SystemUIService</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@frameworks</span><span class="token operator">/</span>base<span class="token operator">/</span>services<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>server<span class="token operator">/</span>SystemServer<span class="token punctuation">.</span>java<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">startSystemUi</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> WindowManagerService windowManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    intent<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span><span class="token string">"com.android.systemui"</span><span class="token punctuation">,</span>                <span class="token string">"com.android.systemui.SystemUIService"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    intent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_DEBUG_TRIAGED_MISSING<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Slog.d(TAG, "Starting service: " + intent);</span>    context<span class="token punctuation">.</span><span class="token function">startServiceAsUser</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>SYSTEM<span class="token punctuation">)</span><span class="token punctuation">;</span>    windowManager<span class="token punctuation">.</span><span class="token function">onSystemUiStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-SystemUIService-启动SystemUi各个模块"><a href="#1-2-SystemUIService-启动SystemUi各个模块" class="headerlink" title="1.2  SystemUIService 启动SystemUi各个模块"></a>1.2  SystemUIService 启动SystemUi各个模块</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemUIService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>SystemUIApplication<span class="token punctuation">)</span> <span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startServicesIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// For debugging RescueParty</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>IS_DEBUGGABLE <span class="token operator">&amp;&amp;</span> SystemProperties<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"debug.crash_sysui"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动SERVICES 各模块</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SystemUI</span><span class="token operator">/</span>src<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>systemui<span class="token operator">/</span>SystemUIApplication<span class="token punctuation">.</span>java<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startServicesIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">startServicesIfNeeded</span><span class="token punctuation">(</span>SERVICES<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> SERVICES <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        Dependency<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        NotificationChannels<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        CommandQueue<span class="token punctuation">.</span>CommandQueueStart<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        KeyguardViewMediator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        Recents<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        VolumeUI<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        Divider<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        SystemBars<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        StorageNotification<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        PowerUI<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        RingtonePlayer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        KeyboardUI<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        PipUI<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        ShortcutKeyDispatcher<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        VendorServices<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        GarbageMonitor<span class="token punctuation">.</span>Service<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        LatencyTester<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        GlobalActionsComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        RoundedCorners<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>startServicesIfNeeded遍历Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> services，调用每一个services的<span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startServicesIfNeeded</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> services<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> N <span class="token operator">=</span> services<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cl <span class="token operator">=</span> services<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"loading: "</span> <span class="token operator">+</span> cl<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span><span class="token string">"StartServices"</span> <span class="token operator">+</span> cl<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> ti <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Object newService <span class="token operator">=</span> SystemUIFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>            mServices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>SystemUI<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newService <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> cl<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> newService<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mServices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>mContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        mServices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>mComponents <span class="token operator">=</span> mComponents<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"running: "</span> <span class="token operator">+</span> mServices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mServices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//调用每个class的start()方法</span>        log<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mBootCompleted<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mServices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">onBootCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-举例SystemBars的加载"><a href="#1-3-举例SystemBars的加载" class="headerlink" title="1.3 举例SystemBars的加载"></a>1.3 举例SystemBars的加载</h3><p>调用mStatusBar.start初始化statusBar模块资源</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SystemUI</span><span class="token operator">/</span>src<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>systemui<span class="token operator">/</span>SystemBars<span class="token punctuation">.</span>java<span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">createStatusBarFromConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createStatusBarFromConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"createStatusBarFromConfig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> String clsName <span class="token operator">=</span> mContext<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>config_statusBarComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//com.android.systemui.statusbar.phone.StatusBar</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>clsName <span class="token operator">==</span> null <span class="token operator">||</span> clsName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token function">andLog</span><span class="token punctuation">(</span><span class="token string">"No status bar component configured"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        cls <span class="token operator">=</span> mContext<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>clsName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token function">andLog</span><span class="token punctuation">(</span><span class="token string">"Error loading status bar component: "</span> <span class="token operator">+</span> clsName<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        mStatusBar <span class="token operator">=</span> <span class="token punctuation">(</span>SystemUI<span class="token punctuation">)</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token function">andLog</span><span class="token punctuation">(</span><span class="token string">"Error creating status bar component: "</span> <span class="token operator">+</span> clsName<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mStatusBar<span class="token punctuation">.</span>mContext <span class="token operator">=</span> mContext<span class="token punctuation">;</span>    mStatusBar<span class="token punctuation">.</span>mComponents <span class="token operator">=</span> mComponents<span class="token punctuation">;</span>    mStatusBar<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"started "</span> <span class="token operator">+</span> mStatusBar<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>//包括创建Windows ，createAndAddWindows，还初始化各种对应，包括mNotificationListener注册</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    mBarService <span class="token operator">=</span> IStatusBarService<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>            ServiceManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>STATUS_BAR_SERVICE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    mUserManager <span class="token operator">=</span> <span class="token punctuation">(</span>UserManager<span class="token punctuation">)</span> mContext<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>USER_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>    mKeyguardManager <span class="token operator">=</span> <span class="token punctuation">(</span>KeyguardManager<span class="token punctuation">)</span> mContext<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>KEYGUARD_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>    mLockPatternUtils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockPatternUtils</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//初始化图案 LockPatternUtils </span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        mBarService<span class="token punctuation">.</span><span class="token function">registerStatusBar</span><span class="token punctuation">(</span>mCommandQueue<span class="token punctuation">,</span> iconSlots<span class="token punctuation">,</span> icons<span class="token punctuation">,</span> switches<span class="token punctuation">,</span> binders<span class="token punctuation">,</span>                fullscreenStackBounds<span class="token punctuation">,</span> dockedStackBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// If the system process isn't there we're doomed anyway.</span>    <span class="token punctuation">}</span>    <span class="token function">createAndAddWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//createAndAddWindows</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        mNotificationListener<span class="token punctuation">.</span><span class="token function">registerAsSystemService</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//registerAsSystemService</span>                <span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span>mContext<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                UserHandle<span class="token punctuation">.</span>USER_ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Unable to register notification listener"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    mUnlockMethodCache <span class="token operator">=</span> UnlockMethodCache<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    mUnlockMethodCache<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">startKeyguard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//startKeyguard</span>    KeyguardUpdateMonitor<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerCallback</span><span class="token punctuation">(</span>mUpdateCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//KeyguardUpdateMonitor</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h3 id="1-4-service注册"><a href="#1-4-service注册" class="headerlink" title="1.4 service注册"></a>1.4 service注册</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@frameworks</span><span class="token operator">/</span>base<span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>android<span class="token operator">/</span>service<span class="token operator">/</span>notification<span class="token operator">/</span>NotificationListenerService<span class="token punctuation">.</span>java<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerAsSystemService</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> ComponentName componentName<span class="token punctuation">,</span>        <span class="token keyword">int</span> currentUser<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mWrapper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NotificationListenerWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//init 发送取消就可以使用了 onNotificationPosted</span>    <span class="token punctuation">}</span>    mSystemContext <span class="token operator">=</span> context<span class="token punctuation">;</span>    INotificationManager noMan <span class="token operator">=</span> <span class="token function">getNotificationInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyHandler</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mCurrentUser <span class="token operator">=</span> currentUser<span class="token punctuation">;</span>    noMan<span class="token punctuation">.</span><span class="token function">registerListener</span><span class="token punctuation">(</span>mWrapper<span class="token punctuation">,</span> componentName<span class="token punctuation">,</span> currentUser<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@frameworks</span><span class="token operator">/</span>base<span class="token operator">/</span>services<span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>server<span class="token operator">/</span>notification<span class="token operator">/</span>NotificationManagerService<span class="token punctuation">.</span>java<span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerListener</span><span class="token punctuation">(</span><span class="token keyword">final</span> INotificationListener listener<span class="token punctuation">,</span>        <span class="token keyword">final</span> ComponentName component<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> userid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">enforceSystemOrSystemUI</span><span class="token punctuation">(</span><span class="token string">"INotificationManager.registerListener"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mListeners<span class="token punctuation">.</span><span class="token function">registerService</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> component<span class="token punctuation">,</span> userid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> NotificationListeners mListeners<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotificationListeners</span> <span class="token keyword">extends</span> <span class="token class-name">ManagedServices</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerService</span><span class="token punctuation">(</span>IInterface service<span class="token punctuation">,</span> ComponentName component<span class="token punctuation">,</span> <span class="token keyword">int</span> userid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkNotNull</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>    ManagedServiceInfo info <span class="token operator">=</span> <span class="token function">registerServiceImpl</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> component<span class="token punctuation">,</span> userid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>info <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onServiceAdded</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> ManagedServiceInfo <span class="token function">registerServiceImpl</span><span class="token punctuation">(</span><span class="token keyword">final</span> IInterface service<span class="token punctuation">,</span>        <span class="token keyword">final</span> ComponentName component<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> userid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ManagedServiceInfo info <span class="token operator">=</span> <span class="token function">newServiceInfo</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> component<span class="token punctuation">,</span> userid<span class="token punctuation">,</span>            <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/*isSystem*/</span><span class="token punctuation">,</span> null <span class="token comment" spellcheck="true">/*connection*/</span><span class="token punctuation">,</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>LOLLIPOP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">registerServiceImpl</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> ManagedServiceInfo <span class="token function">registerServiceImpl</span><span class="token punctuation">(</span>ManagedServiceInfo info<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mMutex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            info<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">linkToDeath</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mServices<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> info<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// already dead</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android Notification </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notification </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Notification(2) -- send Notification</title>
      <link href="/2019/09/30/notification/android-notification-2-send-notification/"/>
      <url>/2019/09/30/notification/android-notification-2-send-notification/</url>
      
        <content type="html"><![CDATA[<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="https://raw.githubusercontent.com/wd623894174/blogPic/master/notification/notification_seq.jpg" alt></p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/wd623894174/blogPic/master/notification/notification_2.jpg" alt></p><h3 id="1-1-发送Notification-NotificationManager-notify"><a href="#1-1-发送Notification-NotificationManager-notify" class="headerlink" title="1.1  发送Notification (NotificationManager.notify)"></a>1.1  发送Notification (NotificationManager.notify)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NOTIFY_ID <span class="token operator">=</span> <span class="token number">10025</span><span class="token punctuation">;</span>NotificationManager notificationManager<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">showNotification2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_MAIN<span class="token punctuation">)</span><span class="token punctuation">;</span>    intent<span class="token punctuation">.</span><span class="token function">addCategory</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>CATEGORY_LAUNCHER<span class="token punctuation">)</span><span class="token punctuation">;</span>    intent<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> MainActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    intent<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_NEW_TASK            <span class="token operator">|</span> Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_RESET_TASK_IF_NEEDED<span class="token punctuation">)</span><span class="token punctuation">;</span>    PendingIntent pendingIntent <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span>            <span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">,</span> intent            <span class="token punctuation">,</span> PendingIntent<span class="token punctuation">.</span>FLAG_UPDATE_CURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    notificationManager <span class="token operator">=</span> <span class="token punctuation">(</span>NotificationManager<span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>NOTIFICATION_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//重点：先创建通知渠道</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>O<span class="token punctuation">)</span> <span class="token punctuation">{</span>        NotificationChannel mChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NotificationChannel</span><span class="token punctuation">(</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>app_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>app_name<span class="token punctuation">)</span><span class="token punctuation">,</span> NotificationManager<span class="token punctuation">.</span>IMPORTANCE_LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>        mChannel<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">"notication channel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mChannel<span class="token punctuation">.</span><span class="token function">setShowBadge</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        notificationManager<span class="token punctuation">.</span><span class="token function">createNotificationChannel</span><span class="token punctuation">(</span>mChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//再创建通知</span>    NotificationCompat<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NotificationCompat<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>app_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置通知栏大图标，上图中右边的大图</span>    builder<span class="token punctuation">.</span><span class="token function">setLargeIcon</span><span class="token punctuation">(</span>BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span>            <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置状态栏和通知栏小图标</span>            <span class="token punctuation">.</span><span class="token function">setSmallIcon</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_launcher_background<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置通知栏应用名称</span>            <span class="token punctuation">.</span><span class="token function">setTicker</span><span class="token punctuation">(</span><span class="token string">"ticker"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置通知栏显示时间</span>            <span class="token punctuation">.</span><span class="token function">setWhen</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置通知栏标题</span>            <span class="token punctuation">.</span><span class="token function">setContentTitle</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置通知栏内容</span>            <span class="token punctuation">.</span><span class="token function">setContentText</span><span class="token punctuation">(</span><span class="token string">"contentText"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置通知栏点击后是否清除，设置为true，当点击此通知栏后，它会自动消失</span>            <span class="token punctuation">.</span><span class="token function">setAutoCancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 将Ongoing设为true 那么左滑右滑将不能删除通知栏</span>            <span class="token punctuation">.</span><span class="token function">setOngoing</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置通知栏点击意图</span>            <span class="token punctuation">.</span><span class="token function">setContentIntent</span><span class="token punctuation">(</span>pendingIntent<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 铃声、闪光、震动均系统默认</span>            <span class="token punctuation">.</span><span class="token function">setDefaults</span><span class="token punctuation">(</span>Notification<span class="token punctuation">.</span>DEFAULT_ALL<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置为public后，通知栏将在锁屏界面显示</span>            <span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>NotificationCompat<span class="token punctuation">.</span>VISIBILITY_PRIVATE<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 从Android4.1开始，可以通过以下方法，设置通知栏的优先级，优先级越高的通知排的越靠前，</span>            <span class="token comment" spellcheck="true">// 优先级低的，不会在手机最顶部的状态栏显示图标</span>            <span class="token comment" spellcheck="true">// 设置优先级为PRIORITY_MAX，将会在手机顶部显示通知栏</span>            <span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>NotificationCompat<span class="token punctuation">.</span>PRIORITY_MIN<span class="token punctuation">)</span><span class="token punctuation">;</span>    notificationManager<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span> NOTIFY_ID<span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cancelNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>notificationManager <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        notificationManager <span class="token operator">=</span> <span class="token punctuation">(</span>NotificationManager<span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>NOTIFICATION_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    notificationManager<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span>NOTIFY_ID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cancelAllNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>notificationManager <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        notificationManager <span class="token operator">=</span> <span class="token punctuation">(</span>NotificationManager<span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>NOTIFICATION_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    notificationManager<span class="token punctuation">.</span><span class="token function">cancelAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-NotificationManager-notify"><a href="#1-2-NotificationManager-notify" class="headerlink" title="1.2  NotificationManager.notify"></a>1.2  NotificationManager.notify</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@android</span><span class="token operator">/</span>frameworks<span class="token operator">/</span>base<span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>android<span class="token operator">/</span>app<span class="token operator">/</span>NotificationManager<span class="token punctuation">.</span>java<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> Notification notification<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">notify</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> id<span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span>String tag<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> Notification notification<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">notifyAsUser</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> id<span class="token punctuation">,</span> notification<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserHandle</span><span class="token punctuation">(</span>UserHandle<span class="token punctuation">.</span><span class="token function">myUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @hide */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyAsUser</span><span class="token punctuation">(</span>String tag<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> Notification notification<span class="token punctuation">,</span> UserHandle user<span class="token punctuation">)</span><span class="token punctuation">{</span>    INotificationManager service <span class="token operator">=</span> <span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>localLOGV<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> pkg <span class="token operator">+</span> <span class="token string">": notify("</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> notification <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ActivityManager am <span class="token operator">=</span> <span class="token punctuation">(</span>ActivityManager<span class="token punctuation">)</span> mContext<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>ACTIVITY_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isLowRam <span class="token operator">=</span> am<span class="token punctuation">.</span><span class="token function">isLowRamDevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> Notification copy <span class="token operator">=</span> Builder<span class="token punctuation">.</span><span class="token function">maybeCloneStrippedForDelivery</span><span class="token punctuation">(</span>notification<span class="token punctuation">,</span> isLowRam<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        service<span class="token punctuation">.</span><span class="token function">enqueueNotificationWithTag</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> mContext<span class="token punctuation">.</span><span class="token function">getOpPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tag<span class="token punctuation">,</span> id<span class="token punctuation">,</span>                copy<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//enqueueNotificationWithTag</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-enqueueNotificationWithTag"><a href="#1-3-enqueueNotificationWithTag" class="headerlink" title="1.3 enqueueNotificationWithTag"></a>1.3 enqueueNotificationWithTag</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@frameworks</span><span class="token operator">/</span>base<span class="token operator">/</span>services<span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>server<span class="token operator">/</span>notification<span class="token operator">/</span>NotificationManagerService<span class="token punctuation">.</span>java<span class="token comment" spellcheck="true">// mService INotificationManager.Stub</span><span class="token keyword">private</span> <span class="token keyword">final</span> IBinder mService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">INotificationManager<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enqueueNotificationWithTag</span><span class="token punctuation">(</span>String pkg<span class="token punctuation">,</span> String opPkg<span class="token punctuation">,</span> String tag<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//aidl enqueueNotificationWithTag</span>          Notification notification<span class="token punctuation">,</span> <span class="token keyword">int</span> userId<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>      <span class="token function">enqueueNotificationInternal</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> opPkg<span class="token punctuation">,</span> Binder<span class="token punctuation">.</span><span class="token function">getCallingUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              Binder<span class="token punctuation">.</span><span class="token function">getCallingPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tag<span class="token punctuation">,</span> id<span class="token punctuation">,</span> notification<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">enqueueNotificationInternal</span><span class="token punctuation">(</span><span class="token keyword">final</span> String pkg<span class="token punctuation">,</span> <span class="token keyword">final</span> String opPkg<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> callingUid<span class="token punctuation">,</span>      <span class="token keyword">final</span> <span class="token keyword">int</span> callingPid<span class="token punctuation">,</span> <span class="token keyword">final</span> String tag<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">final</span> Notification notification<span class="token punctuation">,</span>      <span class="token keyword">int</span> incomingUserId<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// The system can post notifications for any package, let us resolve that.</span>  <span class="token keyword">final</span> <span class="token keyword">int</span> notificationUid <span class="token operator">=</span> <span class="token function">resolveNotificationUid</span><span class="token punctuation">(</span>opPkg<span class="token punctuation">,</span> callingUid<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> StatusBarNotification n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatusBarNotification</span><span class="token punctuation">(</span>          pkg<span class="token punctuation">,</span> opPkg<span class="token punctuation">,</span> id<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> notificationUid<span class="token punctuation">,</span> callingPid<span class="token punctuation">,</span> notification<span class="token punctuation">,</span>          user<span class="token punctuation">,</span> null<span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> NotificationRecord r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NotificationRecord</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//NotificationRecord</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EnqueueNotificationRunnable</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-4-EnqueueNotificationRunnable"><a href="#1-4-EnqueueNotificationRunnable" class="headerlink" title="1.4  EnqueueNotificationRunnable"></a>1.4  EnqueueNotificationRunnable</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">class</span> <span class="token class-name">EnqueueNotificationRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> NotificationRecord r<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> userId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mNotificationLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mEnqueuedNotifications<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scheduleTimeoutLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> StatusBarNotification n <span class="token operator">=</span> r<span class="token punctuation">.</span>sbn<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DBG<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"EnqueueNotificationRunnable.run for: "</span> <span class="token operator">+</span> n<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            NotificationRecord old <span class="token operator">=</span> mNotificationsByKey<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pkg<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"com.android.providers.downloads"</span><span class="token punctuation">)</span>                    <span class="token operator">||</span> Log<span class="token punctuation">.</span><span class="token function">isLoggable</span><span class="token punctuation">(</span><span class="token string">"DownloadManager"</span><span class="token punctuation">,</span> Log<span class="token punctuation">.</span>VERBOSE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                EventLogTags<span class="token punctuation">.</span><span class="token function">writeNotificationEnqueue</span><span class="token punctuation">(</span>callingUid<span class="token punctuation">,</span> callingPid<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//event log(notification_enqueue)</span>                        pkg<span class="token punctuation">,</span> id<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> notification<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        enqueueStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mRankingHelper<span class="token punctuation">.</span><span class="token function">extractSignals</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// tell the assistant service about the notification</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mAssistants<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mAssistants<span class="token punctuation">.</span><span class="token function">onNotificationEnqueued</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                mHandler<span class="token punctuation">.</span><span class="token function">postDelayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PostNotificationRunnable</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        DELAY_FOR_ASSISTANT_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PostNotificationRunnable</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">class</span> <span class="token class-name">PostNotificationRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String key<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mNotificationLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                NotificationRecord r <span class="token operator">=</span> null<span class="token punctuation">;</span>                NotificationRecord old <span class="token operator">=</span> mNotificationsByKey<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                mNotificationsByKey<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>notification<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> Notification<span class="token punctuation">.</span>FLAG_FOREGROUND_SERVICE<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    notification<span class="token punctuation">.</span>flags <span class="token operator">|=</span> Notification<span class="token punctuation">.</span>FLAG_ONGOING_EVENT                            <span class="token operator">|</span> Notification<span class="token punctuation">.</span>FLAG_NO_CLEAR<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//FOREGROUND_SERVICE add flag  FLAG_NO_CLEAR&amp;FLAG_ONGOING_EVENT</span>                <span class="token punctuation">}</span>                <span class="token function">applyZenModeLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                mRankingHelper<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>mNotificationList<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>notification<span class="token punctuation">.</span><span class="token function">getSmallIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    StatusBarNotification oldSbn <span class="token operator">=</span> <span class="token punctuation">(</span>old <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> old<span class="token punctuation">.</span>sbn <span class="token operator">:</span> null<span class="token punctuation">;</span>                    mListeners<span class="token punctuation">.</span><span class="token function">notifyPostedLocked</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> oldSbn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//private NotificationListeners mListeners;</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Not posting notification without small icon: "</span> <span class="token operator">+</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span>                    mListeners<span class="token punctuation">.</span><span class="token function">notifyRemovedLocked</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token punctuation">}</span>                <span class="token function">buzzBeepBlinkLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处理该通知，主要是是否发声，震动，Led灯</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-5-NotificationListeners-notifyPostedLocked"><a href="#1-5-NotificationListeners-notifyPostedLocked" class="headerlink" title="1.5  NotificationListeners.notifyPostedLocked"></a>1.5  NotificationListeners.notifyPostedLocked</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@frameworks</span><span class="token operator">/</span>base<span class="token operator">/</span>services<span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>server<span class="token operator">/</span>notification<span class="token operator">/</span>NotificationManagerService<span class="token punctuation">.</span>java<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyPostedLocked</span><span class="token punctuation">(</span>StatusBarNotification sbn<span class="token punctuation">,</span> StatusBarNotification oldSbn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> ManagedServiceInfo info <span class="token operator">:</span> <span class="token function">getServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> sbnVisible <span class="token operator">=</span> <span class="token function">isVisibleToListener</span><span class="token punctuation">(</span>sbn<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">final</span> StatusBarNotification sbnToPost <span class="token operator">=</span>  trimCache<span class="token punctuation">.</span><span class="token function">ForListener</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">notifyPosted</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> sbnToPost<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">notifyPosted</span><span class="token punctuation">(</span><span class="token keyword">final</span> ManagedServiceInfo info<span class="token punctuation">,</span>        <span class="token keyword">final</span> StatusBarNotification sbn<span class="token punctuation">,</span> NotificationRankingUpdate rankingUpdate<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> INotificationListener listener <span class="token operator">=</span> <span class="token punctuation">(</span>INotificationListener<span class="token punctuation">)</span> info<span class="token punctuation">.</span>service<span class="token punctuation">;</span>    StatusBarNotificationHolder sbnHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatusBarNotificationHolder</span><span class="token punctuation">(</span>sbn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        listener<span class="token punctuation">.</span><span class="token function">onNotificationPosted</span><span class="token punctuation">(</span>sbnHolder<span class="token punctuation">,</span> rankingUpdate<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//INotificationListener.onNotificationPosted</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"unable to notify listener (posted): "</span> <span class="token operator">+</span> listener<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-6-INotificationListener-onNotificationPosted"><a href="#1-6-INotificationListener-onNotificationPosted" class="headerlink" title="1.6 INotificationListener.onNotificationPosted"></a>1.6 INotificationListener.onNotificationPosted</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@frameworks</span><span class="token operator">/</span>base<span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>android<span class="token operator">/</span>service<span class="token operator">/</span>notification<span class="token operator">/</span>NotificationListenerService<span class="token punctuation">.</span>javamHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyHandler</span><span class="token punctuation">(</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//class NotificationListenerWrapper</span><span class="token keyword">protected</span> <span class="token keyword">class</span> <span class="token class-name">NotificationListenerWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">INotificationListener<span class="token punctuation">.</span>Stub</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNotificationPosted</span><span class="token punctuation">(</span>IStatusBarNotificationHolder sbnHolder<span class="token punctuation">,</span>            NotificationRankingUpdate update<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StatusBarNotification sbn<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// protect subclass from concurrent modifications of (@link mNotificationKeys}.</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">applyUpdateLocked</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sbn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                SomeArgs args <span class="token operator">=</span> SomeArgs<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                args<span class="token punctuation">.</span>arg1 <span class="token operator">=</span> sbn<span class="token punctuation">;</span>                args<span class="token punctuation">.</span>arg2 <span class="token operator">=</span> mRankingMap<span class="token punctuation">;</span>                mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>MyHandler<span class="token punctuation">.</span>MSG_ON_NOTIFICATION_POSTED<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//mHandler : systemserver main looper</span>                        args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// still pass along the ranking map, it may contain other information</span>                mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>MyHandler<span class="token punctuation">.</span>MSG_ON_NOTIFICATION_RANKING_UPDATE<span class="token punctuation">,</span>                        mRankingMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@NotificationListenerService</span><span class="token punctuation">.</span>java<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MyHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MSG_ON_NOTIFICATION_POSTED <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MSG_ON_NOTIFICATION_REMOVED <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isConnected<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> MSG_ON_NOTIFICATION_POSTED<span class="token operator">:</span> <span class="token punctuation">{</span>                SomeArgs args <span class="token operator">=</span> <span class="token punctuation">(</span>SomeArgs<span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>                StatusBarNotification sbn <span class="token operator">=</span> <span class="token punctuation">(</span>StatusBarNotification<span class="token punctuation">)</span> args<span class="token punctuation">.</span>arg1<span class="token punctuation">;</span>                RankingMap rankingMap <span class="token operator">=</span> <span class="token punctuation">(</span>RankingMap<span class="token punctuation">)</span> args<span class="token punctuation">.</span>arg2<span class="token punctuation">;</span>                args<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">onNotificationPosted</span><span class="token punctuation">(</span>sbn<span class="token punctuation">,</span> rankingMap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> MSG_ON_NOTIFICATION_REMOVED<span class="token operator">:</span> <span class="token punctuation">{</span>                SomeArgs args <span class="token operator">=</span> <span class="token punctuation">(</span>SomeArgs<span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>                StatusBarNotification sbn <span class="token operator">=</span> <span class="token punctuation">(</span>StatusBarNotification<span class="token punctuation">)</span> args<span class="token punctuation">.</span>arg1<span class="token punctuation">;</span>                RankingMap rankingMap <span class="token operator">=</span> <span class="token punctuation">(</span>RankingMap<span class="token punctuation">)</span> args<span class="token punctuation">.</span>arg2<span class="token punctuation">;</span>                <span class="token keyword">int</span> reason <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> args<span class="token punctuation">.</span>arg3<span class="token punctuation">;</span>                args<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">onNotificationRemoved</span><span class="token punctuation">(</span>sbn<span class="token punctuation">,</span> rankingMap<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">NotificationListenerService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNotificationPosted</span><span class="token punctuation">(</span>StatusBarNotification sbn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// optional</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNotificationPosted</span><span class="token punctuation">(</span>StatusBarNotification sbn<span class="token punctuation">,</span> RankingMap rankingMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onNotificationPosted</span><span class="token punctuation">(</span>sbn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-7-SystemUI-onNotificationPosted"><a href="#1-7-SystemUI-onNotificationPosted" class="headerlink" title="1.7 SystemUI onNotificationPosted"></a>1.7 SystemUI onNotificationPosted</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//NotificationListenerWithPlugins 继承NotificationListenerService，StatusBar.java new  NotificationListenerWithPlugins，然后重写onNotificationPosted</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotificationListenerWithPlugins</span> <span class="token keyword">extends</span> <span class="token class-name">NotificationListenerService</span> <span class="token keyword">implements</span>        <span class="token class-name">PluginListener</span><span class="token operator">&lt;</span>NotificationListenerController<span class="token operator">></span> <span class="token punctuation">{</span><span class="token annotation punctuation">@SystemUI</span><span class="token operator">/</span>src<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>systemui<span class="token operator">/</span>statusbar<span class="token operator">/</span>phone<span class="token operator">/</span>StatusBar<span class="token punctuation">.</span>java<span class="token keyword">private</span> <span class="token keyword">final</span> NotificationListenerWithPlugins mNotificationListener <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">NotificationListenerWithPlugins</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNotificationPosted</span><span class="token punctuation">(</span><span class="token keyword">final</span> StatusBarNotification sbn<span class="token punctuation">,</span>            <span class="token keyword">final</span> RankingMap rankingMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onNotificationPosted: "</span> <span class="token operator">+</span> sbn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sbn <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">onPluginNotificationPosted</span><span class="token punctuation">(</span>sbn<span class="token punctuation">,</span> rankingMap<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">processForRemoteInput</span><span class="token punctuation">(</span>sbn<span class="token punctuation">.</span><span class="token function">getNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String key <span class="token operator">=</span> sbn<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    mKeysKeptForRemoteInput<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">boolean</span> isUpdate <span class="token operator">=</span> mNotificationData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>isUpdate<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">updateNotification</span><span class="token punctuation">(</span>sbn<span class="token punctuation">,</span> rankingMap<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token function">addNotification</span><span class="token punctuation">(</span>sbn<span class="token punctuation">,</span> rankingMap<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//addNotification</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InflationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">handleInflationException</span><span class="token punctuation">(</span>sbn<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-8-addNotification"><a href="#1-8-addNotification" class="headerlink" title="1.8  addNotification"></a>1.8  addNotification</h3><pre class=" language-java"><code class="language-java">SystemUI<span class="token operator">/</span>src<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>systemui<span class="token operator">/</span>statusbar<span class="token operator">/</span>phone<span class="token operator">/</span>StatusBar<span class="token punctuation">.</span>java<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNotification</span><span class="token punctuation">(</span>StatusBarNotification notification<span class="token punctuation">,</span> RankingMap ranking<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InflationException <span class="token punctuation">{</span>    String key <span class="token operator">=</span> notification<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"addNotification key="</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//log addNotification</span>    mNotificationData<span class="token punctuation">.</span><span class="token function">updateRanking</span><span class="token punctuation">(</span>ranking<span class="token punctuation">)</span><span class="token punctuation">;</span>    Entry shadeEntry <span class="token operator">=</span> <span class="token function">createNotificationViews</span><span class="token punctuation">(</span>notification<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//createNotificationViews</span>    <span class="token keyword">boolean</span> isHeadsUped <span class="token operator">=</span> <span class="token function">shouldPeek</span><span class="token punctuation">(</span>shadeEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//开始判断是否拦截全屏通知，包括suppressed by DND  not important enough</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isHeadsUped <span class="token operator">&amp;&amp;</span> notification<span class="token punctuation">.</span><span class="token function">getNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fullScreenIntent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldSuppressFullScreenIntent</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"No Fullscreen intent: suppressed by DND: "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mNotificationData<span class="token punctuation">.</span><span class="token function">getImportance</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>                <span class="token operator">&lt;</span> NotificationManager<span class="token punctuation">.</span>IMPORTANCE_HIGH<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"No Fullscreen intent: not important enough: "</span>                        <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Stop screensaver if the notification has a full-screen intent.</span>            <span class="token comment" spellcheck="true">// (like an incoming phone call)</span>            <span class="token function">awakenDreams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// not immersive &amp; a full-screen alert should be shown</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Notification has fullScreenIntent; sending fullScreenIntent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                EventLog<span class="token punctuation">.</span><span class="token function">writeEvent</span><span class="token punctuation">(</span>EventLogTags<span class="token punctuation">.</span>SYSUI_FULLSCREEN_NOTIFICATION<span class="token punctuation">,</span>                        key<span class="token punctuation">)</span><span class="token punctuation">;</span>                notification<span class="token punctuation">.</span><span class="token function">getNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fullScreenIntent<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                shadeEntry<span class="token punctuation">.</span><span class="token function">notifyFullScreenIntentLaunched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mMetricsLogger<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">"note_fullscreen"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PendingIntent<span class="token punctuation">.</span>CanceledException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">abortExistingInflation</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    mForegroundServiceController<span class="token punctuation">.</span><span class="token function">addNotification</span><span class="token punctuation">(</span>notification<span class="token punctuation">,</span>            mNotificationData<span class="token punctuation">.</span><span class="token function">getImportance</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mPendingNotifications<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> shadeEntry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> NotificationData<span class="token punctuation">.</span>Entry <span class="token function">createNotificationViews</span><span class="token punctuation">(</span>StatusBarNotification sbn<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InflationException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"createNotificationViews(notification="</span> <span class="token operator">+</span> sbn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    NotificationData<span class="token punctuation">.</span>Entry entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NotificationData<span class="token punctuation">.</span>Entry</span><span class="token punctuation">(</span>sbn<span class="token punctuation">)</span><span class="token punctuation">;</span>    Dependency<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>LeakDetector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trackInstance</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>    entry<span class="token punctuation">.</span><span class="token function">createIcons</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> sbn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Construct the expanded view.</span>    <span class="token function">inflateViews</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> mStackScroller<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> entry<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-9-流程总结"><a href="#1-9-流程总结" class="headerlink" title="1.9 流程总结"></a>1.9 流程总结</h3><ul><li>1.app通过notification.notify发送通知</li><li>2.NMS通过binder调用到enqueueNotificationWithTag</li><li>3.通过handler最终调用到NotificationListenerService.onNotificationPosted抽象方法</li><li>4.SystemUI 重写onNotificationPosted方法，来完成SystemUI绘制NotificationView</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android Notification </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notification </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android notification(1) -- app发送取消通知</title>
      <link href="/2019/09/30/notification/android-notification-1-app-fa-song-qu-xiao-tong-zhi/"/>
      <url>/2019/09/30/notification/android-notification-1-app-fa-song-qu-xiao-tong-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="发送通知"><a href="#发送通知" class="headerlink" title="发送通知"></a>发送通知</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NOTIFY_ID <span class="token operator">=</span> <span class="token number">10025</span><span class="token punctuation">;</span>NotificationManager notificationManager<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">showNotification2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_MAIN<span class="token punctuation">)</span><span class="token punctuation">;</span>    intent<span class="token punctuation">.</span><span class="token function">addCategory</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>CATEGORY_LAUNCHER<span class="token punctuation">)</span><span class="token punctuation">;</span>    intent<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> MainActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    intent<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_NEW_TASK            <span class="token operator">|</span> Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_RESET_TASK_IF_NEEDED<span class="token punctuation">)</span><span class="token punctuation">;</span>    PendingIntent pendingIntent <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span>            <span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">,</span> intent            <span class="token punctuation">,</span> PendingIntent<span class="token punctuation">.</span>FLAG_UPDATE_CURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    notificationManager <span class="token operator">=</span> <span class="token punctuation">(</span>NotificationManager<span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>NOTIFICATION_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//重点：先创建通知渠道</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>O<span class="token punctuation">)</span> <span class="token punctuation">{</span>        NotificationChannel mChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NotificationChannel</span><span class="token punctuation">(</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>app_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>app_name<span class="token punctuation">)</span><span class="token punctuation">,</span> NotificationManager<span class="token punctuation">.</span>IMPORTANCE_LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>        mChannel<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">"notication channel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mChannel<span class="token punctuation">.</span><span class="token function">setShowBadge</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        notificationManager<span class="token punctuation">.</span><span class="token function">createNotificationChannel</span><span class="token punctuation">(</span>mChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//再创建通知</span>    NotificationCompat<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NotificationCompat<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>app_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置通知栏大图标，上图中右边的大图</span>    builder<span class="token punctuation">.</span><span class="token function">setLargeIcon</span><span class="token punctuation">(</span>BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span>            <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置状态栏和通知栏小图标</span>            <span class="token punctuation">.</span><span class="token function">setSmallIcon</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_launcher_background<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置通知栏应用名称</span>            <span class="token punctuation">.</span><span class="token function">setTicker</span><span class="token punctuation">(</span><span class="token string">"ticker"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置通知栏显示时间</span>            <span class="token punctuation">.</span><span class="token function">setWhen</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置通知栏标题</span>            <span class="token punctuation">.</span><span class="token function">setContentTitle</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置通知栏内容</span>            <span class="token punctuation">.</span><span class="token function">setContentText</span><span class="token punctuation">(</span><span class="token string">"contentText"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置通知栏点击后是否清除，设置为true，当点击此通知栏后，它会自动消失</span>            <span class="token punctuation">.</span><span class="token function">setAutoCancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 将Ongoing设为true 那么左滑右滑将不能删除通知栏</span>            <span class="token punctuation">.</span><span class="token function">setOngoing</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置通知栏点击意图</span>            <span class="token punctuation">.</span><span class="token function">setContentIntent</span><span class="token punctuation">(</span>pendingIntent<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 铃声、闪光、震动均系统默认</span>            <span class="token punctuation">.</span><span class="token function">setDefaults</span><span class="token punctuation">(</span>Notification<span class="token punctuation">.</span>DEFAULT_ALL<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置为public后，通知栏将在锁屏界面显示</span>            <span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>NotificationCompat<span class="token punctuation">.</span>VISIBILITY_PRIVATE<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 从Android4.1开始，可以通过以下方法，设置通知栏的优先级，优先级越高的通知排的越靠前，</span>            <span class="token comment" spellcheck="true">// 优先级低的，不会在手机最顶部的状态栏显示图标</span>            <span class="token comment" spellcheck="true">// 设置优先级为PRIORITY_MAX，将会在手机顶部显示通知栏</span>            <span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>NotificationCompat<span class="token punctuation">.</span>PRIORITY_MIN<span class="token punctuation">)</span><span class="token punctuation">;</span>    notificationManager<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span> NOTIFY_ID<span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="移除通知"><a href="#移除通知" class="headerlink" title="移除通知"></a>移除通知</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cancelNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>notificationManager <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        notificationManager <span class="token operator">=</span> <span class="token punctuation">(</span>NotificationManager<span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>NOTIFICATION_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    notificationManager<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span>NOTIFY_ID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cancelAllNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>notificationManager <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        notificationManager <span class="token operator">=</span> <span class="token punctuation">(</span>NotificationManager<span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>NOTIFICATION_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    notificationManager<span class="token punctuation">.</span><span class="token function">cancelAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android Notification </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notification </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FAILED BINDER TRANSACTION</title>
      <link href="/2019/09/21/binder/failed-binder-transaction/"/>
      <url>/2019/09/21/binder/failed-binder-transaction/</url>
      
        <content type="html"><![CDATA[<h2 id="1-异常Log-Pattern"><a href="#1-异常Log-Pattern" class="headerlink" title="1.异常Log Pattern"></a>1.异常Log Pattern</h2><a id="more"></a><pre><code>BroadcastQueue: Can&#39;t deliver broadcast to com.my.app (pid 8047). Crashing it.ActivityManager: Killing 8047:com.my.demo/1000 (adj 0): scheduleCrash for &#39;can&#39;t deliver broadcast&#39; failedBroadcastQueue: Failure sending broadcast Intent { act=android.intent.action.BATTERY_CHANGED flg=0x60000010 (has extras) }BroadcastQueue: android.os.DeadObjectException: Transaction failed on small parcel; remote process probably diedBroadcastQueue:     at android.os.BinderProxy.transactNative(Native Method)BroadcastQueue:     at android.os.BinderProxy.transact(Binder.java:764)BroadcastQueue:     at android.app.IApplicationThread$Stub$Proxy.scheduleRegisteredReceiver(IApplicationThread.java:1560)BroadcastQueue:     at com.android.server.am.BroadcastQueue.performReceiveLocked(BroadcastQueue.java:491)BroadcastQueue:     at com.android.server.am.BroadcastQueue.deliverToRegisteredReceiverLocked(BroadcastQueue.java:703)BroadcastQueue:     at com.android.server.am.BroadcastQueue.processNextBroadcast(BroadcastQueue.java:858)BroadcastQueue:     at com.android.server.am.BroadcastQueue$BroadcastHandler.handleMessage(BroadcastQueue.java:171)BroadcastQueue:     at android.os.Handler.dispatchMessage(Handler.java:106)BroadcastQueue:     at android.os.Looper.loop(Looper.java:164)BroadcastQueue:     at android.os.HandlerThread.run(HandlerThread.java:65)BroadcastQueue:     at com.android.server.ServiceThread.run(ServiceThread.java:46)</code></pre><h2 id="2-Crash的过程"><a href="#2-Crash的过程" class="headerlink" title="2.Crash的过程"></a>2.Crash的过程</h2><p>出现两种情况</p><ul><li>1.data parcel size大于2m 200×1024</li><li>2.异常 主要两种 deadobjectexception 调用的进程死掉了<br>另外为其他异常</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@frameworks</span><span class="token operator">/</span>base<span class="token operator">/</span>core<span class="token operator">/</span>jni<span class="token operator">/</span>android_util_Binder<span class="token punctuation">.</span>cpp<span class="token keyword">void</span> <span class="token function">signalExceptionForError</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">,</span> status_t err<span class="token punctuation">,</span>        bool canThrowRemoteException<span class="token punctuation">,</span> <span class="token keyword">int</span> parcelSize<span class="token punctuation">)</span><span class="token keyword">case</span> FAILED_TRANSACTION<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"!!! FAILED BINDER TRANSACTION !!!  (parcel size = %d)"</span><span class="token punctuation">,</span> parcelSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>canThrowRemoteException <span class="token operator">&amp;&amp;</span> parcelSize <span class="token operator">></span> <span class="token number">200</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// bona fide large payload</span>        exceptionToThrow <span class="token operator">=</span> <span class="token string">"android/os/TransactionTooLargeException"</span><span class="token punctuation">;</span>        <span class="token function">snprintf</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token function">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"data parcel size %d bytes"</span><span class="token punctuation">,</span> parcelSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Heuristic: a payload smaller than this threshold "shouldn't" be too</span>        <span class="token comment" spellcheck="true">// big, so it's probably some other, more subtle problem.  In practice</span>        <span class="token comment" spellcheck="true">// it seems to always mean that the remote process died while the binder</span>        <span class="token comment" spellcheck="true">// transaction was already in flight.</span>        exceptionToThrow <span class="token operator">=</span> <span class="token punctuation">(</span>canThrowRemoteException<span class="token punctuation">)</span>                <span class="token operator">?</span> <span class="token string">"android/os/DeadObjectException"</span>                <span class="token operator">:</span> <span class="token string">"java/lang/RuntimeException"</span><span class="token punctuation">;</span>        <span class="token function">snprintf</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token function">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>                <span class="token string">"Transaction failed on small parcel; remote process probably died"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">jniThrowException</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> exceptionToThrow<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span></code></pre><p>//performReceiveLocked报错并且crash app</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@BroadcastQueue</span><span class="token punctuation">.</span>java    <span class="token keyword">void</span> <span class="token function">performReceiveLocked</span><span class="token punctuation">(</span>ProcessRecord app<span class="token punctuation">,</span> IIntentReceiver receiver<span class="token punctuation">,</span>            Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> resultCode<span class="token punctuation">,</span> String data<span class="token punctuation">,</span> Bundle extras<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> ordered<span class="token punctuation">,</span> <span class="token keyword">boolean</span> sticky<span class="token punctuation">,</span> <span class="token keyword">int</span> sendingUser<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Send the intent to the receiver asynchronously using one-way binder calls.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>app <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>thread <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// If we have an app thread, do the call through that so it is</span>                <span class="token comment" spellcheck="true">// correctly ordered with other one-way calls.</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    app<span class="token punctuation">.</span>thread<span class="token punctuation">.</span><span class="token function">scheduleRegisteredReceiver</span><span class="token punctuation">(</span>receiver<span class="token punctuation">,</span> intent<span class="token punctuation">,</span> resultCode<span class="token punctuation">,</span>                            data<span class="token punctuation">,</span> extras<span class="token punctuation">,</span> ordered<span class="token punctuation">,</span> sticky<span class="token punctuation">,</span> sendingUser<span class="token punctuation">,</span> app<span class="token punctuation">.</span>repProcState<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// TODO: Uncomment this when (b/28322359) is fixed and we aren't getting</span>                <span class="token comment" spellcheck="true">// DeadObjectException when the process isn't actually dead.</span>                <span class="token comment" spellcheck="true">//} catch (DeadObjectException ex) {</span>                <span class="token comment" spellcheck="true">// Failed to call into the process.  It's dying so just let it die and move on.</span>                <span class="token comment" spellcheck="true">//    throw ex;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Failed to call into the process. It's either dying or wedged. Kill it gently.</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mService<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Can't deliver broadcast to "</span> <span class="token operator">+</span> app<span class="token punctuation">.</span>processName                                <span class="token operator">+</span> <span class="token string">" (pid "</span> <span class="token operator">+</span> app<span class="token punctuation">.</span>pid <span class="token operator">+</span> <span class="token string">"). Crashing it."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//here</span>                        app<span class="token punctuation">.</span><span class="token function">scheduleCrash</span><span class="token punctuation">(</span><span class="token string">"can't deliver broadcast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//crash app</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Application has died. Receiver doesn't exist.</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemoteException</span><span class="token punctuation">(</span><span class="token string">"app.thread must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            receiver<span class="token punctuation">.</span><span class="token function">performReceive</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> resultCode<span class="token punctuation">,</span> data<span class="token punctuation">,</span> extras<span class="token punctuation">,</span> ordered<span class="token punctuation">,</span>                    sticky<span class="token punctuation">,</span> sendingUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@frameworks</span><span class="token operator">/</span>base<span class="token operator">/</span>services<span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>server<span class="token operator">/</span>am<span class="token operator">/</span>ProcessRecord<span class="token punctuation">.</span>java<span class="token keyword">void</span> <span class="token function">scheduleCrash</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Checking killedbyAm should keep it from showing the crash dialog if the process</span>    <span class="token comment" spellcheck="true">// was already dead for a good / normal reason.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>killedByAm<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>thread <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> Process<span class="token punctuation">.</span><span class="token function">myPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"scheduleCrash: trying to crash system process!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">long</span> ident <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                thread<span class="token punctuation">.</span><span class="token function">scheduleCrash</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//throw RemoteServiceException然后kill</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// If it's already dead our work is done. If it's wedged just kill it.</span>                <span class="token comment" spellcheck="true">// We won't get the crash dialog or the error reporting.</span>                <span class="token function">kill</span><span class="token punctuation">(</span><span class="token string">"scheduleCrash for '"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"' failed"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                Binder<span class="token punctuation">.</span><span class="token function">restoreCallingIdentity</span><span class="token punctuation">(</span>ident<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">kill</span><span class="token punctuation">(</span>String reason<span class="token punctuation">,</span> <span class="token keyword">boolean</span> noisy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>killedByAm<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>Trace<span class="token punctuation">.</span>TRACE_TAG_ACTIVITY_MANAGER<span class="token punctuation">,</span> <span class="token string">"kill"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>noisy<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Killing "</span> <span class="token operator">+</span> <span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" (adj "</span> <span class="token operator">+</span> setAdj <span class="token operator">+</span> <span class="token string">"): "</span> <span class="token operator">+</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        EventLog<span class="token punctuation">.</span><span class="token function">writeEvent</span><span class="token punctuation">(</span>EventLogTags<span class="token punctuation">.</span>AM_KILL<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> processName<span class="token punctuation">,</span> setAdj<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        Process<span class="token punctuation">.</span><span class="token function">killProcessQuiet</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        ActivityManagerService<span class="token punctuation">.</span><span class="token function">killProcessGroup</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>persistent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            killed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            killedByAm <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>Trace<span class="token punctuation">.</span>TRACE_TAG_ACTIVITY_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>@frameworks/base/core/java/android/app/ActivityThread.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduleCrash</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sendMessage</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span>SCHEDULE_CRASH<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token number">1767</span>                <span class="token keyword">case</span> SCHEDULE_CRASH<span class="token operator">:</span><span class="token number">1768</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemoteServiceException</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>msg<span class="token punctuation">.</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-Binder错误信息kernel-log"><a href="#3-Binder错误信息kernel-log" class="headerlink" title="3.Binder错误信息kernel log"></a>3.Binder错误信息kernel log</h2><pre class=" language-cpp"><code class="language-cpp">@binder<span class="token punctuation">.</span>c4067err_alloc_t_failed<span class="token operator">:</span>4068err_bad_call_stack<span class="token operator">:</span>4069err_empty_call_stack<span class="token operator">:</span>4070err_dead_binder<span class="token operator">:</span>4071err_invalid_target_handle<span class="token operator">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">4081</span>    <span class="token function">binder_debug</span><span class="token punctuation">(</span>BINDER_DEBUG_FAILED_TRANSACTION<span class="token punctuation">,</span><span class="token number">4082</span>         <span class="token string">"%d:%d transaction failed %d/%d, size %lld-%lld line %d\n"</span><span class="token punctuation">,</span><span class="token number">4083</span>         proc<span class="token operator">-</span><span class="token operator">></span>pid<span class="token punctuation">,</span> thread<span class="token operator">-</span><span class="token operator">></span>pid<span class="token punctuation">,</span> return_error<span class="token punctuation">,</span> return_error_param<span class="token punctuation">,</span><span class="token function">4084</span>         <span class="token punctuation">(</span>u64<span class="token punctuation">)</span>tr<span class="token operator">-</span><span class="token operator">></span>data_size<span class="token punctuation">,</span> <span class="token punctuation">(</span>u64<span class="token punctuation">)</span>tr<span class="token operator">-</span><span class="token operator">></span>offsets_size<span class="token punctuation">,</span><span class="token number">4085</span>         return_error_line<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code>11-25 09:31:23.786059  1052  1052 I [128416.232769](6)[1052:ActivityManager]binder: 1025:1052 transaction failed 29201/-28, size 792-8 line 3781</code></pre><p>那么问题来了，这个过程也是使用binder.<br>同样是systemserver向应用发送，为什么之前不成功，现在可以了,因为当时空间不够，后面可能够了</p><pre><code>return_error --&gt; 29201 --&gt; BR_FAILED_REPLY return_error_param  --&gt; 28 --&gt; ENOSPC    /* No space left on device */31#define    ENOSPC    28    /* No space left on device */</code></pre><p>还有些错是parcel太大导致，这里是没有空间，可能注册广播太多，注销慢，或者逻辑错误，也可能是进程死了<br>还可以可能比如systemserver的线程都在做数据库之类的blocked</p><h2 id="4-其他例子"><a href="#4-其他例子" class="headerlink" title="4.其他例子"></a>4.其他例子</h2><p><a href="https://ask.csdn.net/questions/682317" target="_blank" rel="noopener">https://ask.csdn.net/questions/682317</a></p><pre><code>java.lang.RuntimeException: android.os.TransactionTooLargeException: data parcel size 3625220 bytesat android.app.ActivityThread$StopInfo.run(ActivityThread.java:3982)at android.os.Handler.handleCallback(Handler.java:761)at android.os.Handler.dispatchMessage(Handler.java:98)at android.os.Looper.loop(Looper.java:156)at android.app.ActivityThread.main(ActivityThread.java:6523)at java.lang.reflect.Method.invoke(Native Method)at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:942)at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:832)Caused by: android.os.TransactionTooLargeException: data parcel size 3625220 bytesat android.os.BinderProxy.transactNative(Native Method)at android.os.BinderProxy.transact(Binder.java:617)at android.app.ActivityManagerProxy.activityStopped(ActivityManagerNative.java:3632)at android.app.ActivityThread$StopInfo.run(ActivityThread.java:3974)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android Binder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AIDL 使用</title>
      <link href="/2019/09/21/lunbo/aidl-shi-yong/"/>
      <url>/2019/09/21/lunbo/aidl-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-服务端"><a href="#1-服务端" class="headerlink" title="1.服务端"></a>1.服务端</h2><a id="more"></a><!--img: https://raw.githubusercontent.com/wd623894174/blogPic/master/banner/0.jpgcover: truecoverImg: https://raw.githubusercontent.com/wd623894174/blogPic/master/banner/4.jpg--><p>//add aidl</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IOperationManager</span> <span class="token punctuation">{</span>   <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span>in Parameter parameter1 <span class="token punctuation">,</span> in Parameter parameter2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">registerListener</span><span class="token punctuation">(</span>in IOnOperationCompletedListener listener<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">unregisterListener</span><span class="token punctuation">(</span>in IOnOperationCompletedListener listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>//计算完成结果，给客户端</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IOnOperationCompletedListener</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">onOperationCompleted</span><span class="token punctuation">(</span>in Parameter result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>//实现stub</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> IOperationManager<span class="token punctuation">.</span>Stub stub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IOperationManager<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span>Parameter parameter1<span class="token punctuation">,</span> Parameter parameter2<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"operation 被调用，延时5秒，模拟耗时计算"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> param1 <span class="token operator">=</span> parameter1<span class="token punctuation">.</span><span class="token function">getParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> param2 <span class="token operator">=</span> parameter2<span class="token punctuation">.</span><span class="token function">getParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Parameter result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parameter</span><span class="token punctuation">(</span>param1 <span class="token operator">*</span> param2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在操作 RemoteCallbackList 前，必须先调用其 beginBroadcast 方法</span>        <span class="token comment" spellcheck="true">//此外，beginBroadcast 必须和 finishBroadcast配套使用</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> callbackList<span class="token punctuation">.</span><span class="token function">beginBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            IOnOperationCompletedListener listener <span class="token operator">=</span> callbackList<span class="token punctuation">.</span><span class="token function">getBroadcastItem</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>listener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                listener<span class="token punctuation">.</span><span class="token function">onOperationCompleted</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//提供数据result给客户端</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        callbackList<span class="token punctuation">.</span><span class="token function">finishBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"计算结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerListener</span><span class="token punctuation">(</span>IOnOperationCompletedListener listener<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        callbackList<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"registerListener 注册回调成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//客户端调用功能直接注册</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unregisterListener</span><span class="token punctuation">(</span>IOnOperationCompletedListener listener<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        callbackList<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"unregisterListener 解除注册回调成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> IBinder <span class="token function">onBind</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> stub<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-客户端"><a href="#2-客户端" class="headerlink" title="2.客户端"></a>2.客户端</h2><p>//binder到服务端</p><pre class=" language-java"><code class="language-java"><span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> serviceConnection<span class="token punctuation">,</span> Context<span class="token punctuation">.</span>BIND_AUTO_CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> ServiceConnection serviceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span>ComponentName name<span class="token punctuation">,</span> IBinder service<span class="token punctuation">)</span> <span class="token punctuation">{</span>        iOperationManager <span class="token operator">=</span> IOperationManager<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取iOperationManager</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span>ComponentName name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        iOperationManager <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>//通过iOperationManager调用aidl方法来访问server端</p><pre class=" language-java"><code class="language-java"><span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_unregisterListener<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iOperationManager <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            iOperationManager<span class="token punctuation">.</span><span class="token function">unregisterListener</span><span class="token punctuation">(</span>completedListener<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_operation<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> param1 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>et_param1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> param2 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>et_param2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Parameter parameter1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parameter</span><span class="token punctuation">(</span>param1<span class="token punctuation">)</span><span class="token punctuation">;</span>            Parameter parameter2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parameter</span><span class="token punctuation">(</span>param2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>iOperationManager <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    iOperationManager<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span>parameter1<span class="token punctuation">,</span> parameter2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>//实现 completedListener来处理返回结果</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> IOnOperationCompletedListener completedListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IOnOperationCompletedListener<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOperationCompleted</span><span class="token punctuation">(</span><span class="token keyword">final</span> Parameter result<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        <span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                et_result<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"运算结果： "</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android Binder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binder通信介绍和示例(c client端和 c service端  java client端和c service端)</title>
      <link href="/2019/09/21/binder/binder-tong-xin-jie-shao-he-shi-li-c-client-duan-he-c-service-duan-java-client-duan-he-c-service-duan/"/>
      <url>/2019/09/21/binder/binder-tong-xin-jie-shao-he-shi-li-c-client-duan-he-c-service-duan-java-client-duan-he-c-service-duan/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Java端-binder-client端"><a href="#1-Java端-binder-client端" class="headerlink" title="1.Java端 binder client端"></a>1.Java端 binder client端</h3><a id="more"></a><p>ServiceManager.getService获取binder，然后调用binder.transact来通信</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@MainActivity</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SERVICE_NAME <span class="token operator">=</span> <span class="token string">"binder.cservice"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//建议使用FIRST_CALL_TRANSACTION来表示感觉比较规范，只要和binder对端一致就可以</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NOTIFY_MESSAGE <span class="token operator">=</span> IBinder<span class="token punctuation">.</span>FIRST_CALL_TRANSACTION<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DELETE_FILE <span class="token operator">=</span> IBinder<span class="token punctuation">.</span>FIRST_CALL_TRANSACTION <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ADD_FILE <span class="token operator">=</span> IBinder<span class="token punctuation">.</span>FIRST_CALL_TRANSACTION <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RELEASE_FILE <span class="token operator">=</span> IBinder<span class="token punctuation">.</span>FIRST_CALL_TRANSACTION <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Button btn <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"initView onClick: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">notityCService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">notityCService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        IBinder binder <span class="token operator">=</span> null <span class="token punctuation">;</span>        binder <span class="token operator">=</span> ServiceManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span>SERVICE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>binder <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"notityCService binder is null: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Parcel data <span class="token operator">=</span> Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Parcel reply <span class="token operator">=</span> Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> replyResult <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            binder<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span>DELETE_FILE<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            replyResult <span class="token operator">=</span> reply<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"result1: "</span> <span class="token operator">+</span> replyResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            replyResult <span class="token operator">=</span> reply<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"result2: "</span> <span class="token operator">+</span> replyResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"RemoteException: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        data<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reply<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-C-binder-service端"><a href="#2-C-binder-service端" class="headerlink" title="2.C binder service端"></a>2.C binder service端</h3><p>binder server端通过onTransact，来获取binder端来的data,并且把回复写到reply里</p><pre class=" language-cpp"><code class="language-cpp">@MyPrint<span class="token punctuation">.</span>cpp<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"MyPrint.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;log/log.h></span> </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/Parcel.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;utils/Log.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> SERVICE_NAME "binder.cservice"</span><span class="token macro property">#<span class="token directive keyword">define</span> LOG_TAG "MyPrint"</span><span class="token keyword">namespace</span> android <span class="token punctuation">{</span>MyPrint<span class="token operator">::</span><span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>MyPrint<span class="token operator">::</span><span class="token operator">~</span><span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> MyPrint<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">defaultServiceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addService</span><span class="token punctuation">(</span><span class="token function">String16</span><span class="token punctuation">(</span>SERVICE_NAME<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span>status_t MyPrint<span class="token operator">::</span><span class="token function">onTransact</span><span class="token punctuation">(</span>uint32_t code<span class="token punctuation">,</span> <span class="token keyword">const</span> Parcel<span class="token operator">&amp;</span> data<span class="token punctuation">,</span> Parcel<span class="token operator">*</span> reply<span class="token punctuation">,</span> uint32_t flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> NOTIFY_MESSAGE<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> message <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">readCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"onTransact NOTIFY_MESSAGE message = %s"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        reply<span class="token operator">-</span><span class="token operator">></span><span class="token function">writeInt32</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"onTransact NOTIFY_MESSAGE reply 5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">case</span> DELETE_FILE<span class="token operator">:</span> <span class="token punctuation">{</span>        String16 message <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">readString16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"onTransact DELETE_FILE message = %s"</span><span class="token punctuation">,</span> <span class="token function">String8</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reply<span class="token operator">-</span><span class="token operator">></span><span class="token function">writeInt32</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reply<span class="token operator">-</span><span class="token operator">></span><span class="token function">writeInt32</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"onTransact DELETE_FILE reply 6 7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"Unsupported command code: (%d)"</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> BBinder<span class="token operator">::</span><span class="token function">onTransact</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//namespace</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#MyPrint.h</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> _MYPRINT_HEADER_</span><span class="token macro property">#<span class="token directive keyword">define</span> _MYPRINT_HEADER_</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/IInterface.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/Parcel.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/IServiceManager.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;utils/threads.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">namespace</span> android<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">MyPrint</span><span class="token operator">:</span> <span class="token keyword">public</span> BBinder<span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//BBinder</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">enum</span> <span class="token punctuation">{</span>            NOTIFY_MESSAGE      <span class="token operator">=</span> IBinder<span class="token operator">::</span>FIRST_CALL_TRANSACTION<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//注意这里是, 和 ::</span>            DELETE_FILE         <span class="token operator">=</span> IBinder<span class="token operator">::</span>FIRST_CALL_TRANSACTION <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>            ADD_FILE            <span class="token operator">=</span> IBinder<span class="token operator">::</span>FIRST_CALL_TRANSACTION <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span>            RELEASE_FILE        <span class="token operator">=</span> IBinder<span class="token operator">::</span>FIRST_CALL_TRANSACTION <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">virtual</span> status_t <span class="token function">onTransact</span><span class="token punctuation">(</span>uint32_t<span class="token punctuation">,</span> <span class="token keyword">const</span> Parcel<span class="token operator">&amp;</span><span class="token punctuation">,</span> Parcel<span class="token operator">*</span><span class="token punctuation">,</span> uint32_t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//namespace</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p>rc唤醒  /system/bin/binderCService时，执行main.cpp，然后addservice并且执行MyPrint::MyPrint()来初始化</p><pre class=" language-cpp"><code class="language-cpp">@main<span class="token punctuation">.</span>cpp<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/IServiceManager.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/IPCThreadState.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/ProcessState.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cutils/log.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"MyPrint.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;utils/Log.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> android<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"MyPrint cservice is starting up..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sp<span class="token operator">&lt;</span>ProcessState<span class="token operator">></span> <span class="token function">proc</span><span class="token punctuation">(</span>ProcessState<span class="token operator">::</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sp<span class="token operator">&lt;</span>IServiceManager<span class="token operator">></span> sm <span class="token operator">=</span> <span class="token function">defaultServiceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MyPrint<span class="token operator">::</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//add service 并且初始化MyPrint</span>    ProcessState<span class="token operator">::</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     IPCThreadState<span class="token operator">::</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">joinThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"MyPrint cservice exits thread loop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>@Android.mk</p><pre><code>LOCAL_PATH:= $(call my-dir)include $(CLEAR_VARS)LOCAL_C_INCLUDES := $(LOCAL_PATH)  \                    $(TARGET_OUT_HEADERS)/common/incLOCAL_SHARED_LIBRARIES := \        libc \        libcutils \        libutils \        liblog \        libdl \        libbinderLOCAL_MODULE := binderCServiceLOCAL_SRC_FILES := main.cpp MyPrint.cpp LOCAL_MODULE_TAGS := optional#LOCAL_CFLAGS := $(QSEECOM_CFLAGS)LOCAL_INIT_RC := binderCService.rcinclude $(BUILD_EXECUTABLE)include $(call all-makefiles-under,$(LOCAL_PATH))</code></pre><p>//默认是会有selinux问题，不会启动成功，需要手动 binderCService &amp;来启动</p><pre><code>@binderCService.rcservice binderCService /system/bin/binderCService    class late_start    user root    group root</code></pre><p>//手动启动后，执行如下命令，可以看到服务起来，并且打印main.cpp中的log</p><pre><code>msm8996_gvmq:/ # service list| grep bind0    binder.cservice: []</code></pre><h3 id="3-c-client端-binder到service端"><a href="#3-c-client端-binder到service端" class="headerlink" title="3.c client端 binder到service端"></a>3.c client端 binder到service端</h3><p>c client端通过ibinder-&gt;transact，写2019到binder server端</p><pre class=" language-cpp"><code class="language-cpp">@binder_test<span class="token punctuation">.</span>cpp<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/IServiceManager.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/IBinder.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/Parcel.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/ProcessState.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;binder/IPCThreadState.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cutils/log.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;utils/Log.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> android<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> SERVICE_NAME "binder.cservice"</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sp<span class="token operator">&lt;</span>IServiceManager<span class="token operator">></span> sm <span class="token operator">=</span> <span class="token function">defaultServiceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sp<span class="token operator">&lt;</span>IBinder<span class="token operator">></span> ibinder <span class="token operator">=</span> sm<span class="token operator">-</span><span class="token operator">></span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token function">String16</span><span class="token punctuation">(</span>SERVICE_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ibinder <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"binder_test binder is null"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Parcel data<span class="token punctuation">,</span> reply<span class="token punctuation">;</span>    <span class="token keyword">int</span> cmd <span class="token operator">=</span> IBinder<span class="token operator">::</span>FIRST_CALL_TRANSACTION<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"binder_test transact  FIRST_CALL_TRANSACTION"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">writeInt32</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> ibinder<span class="token operator">-</span><span class="token operator">></span><span class="token function">transact</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"binder_test transact : %d"</span> <span class="token punctuation">,</span>reply<span class="token punctuation">.</span><span class="token function">readInt32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">freeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>//c的客户端也是system/bin/binder_test，通过binder_test来启动</p><pre><code>LOCAL_PATH:= $(call my-dir)include $(CLEAR_VARS)LOCAL_SHARED_LIBRARIES := \        libc \        libcutils \        libutils \        liblog \        libdl \        libbinderLOCAL_MODULE := binder_testLOCAL_SRC_FILES := binder_test.cppLOCAL_MODULE_TAGS := optionalinclude $(BUILD_EXECUTABLE)</code></pre><p>binder server端，修改了下，必须读client的data才能走下去，这里用data.readInt32()</p><pre><code>@MyPrint.cpp    case NOTIFY_MESSAGE: {        ALOGI(&quot;onTransact NOTIFY_MESSAGE message&quot;);        int message = data.readInt32();        reply-&gt;writeInt32(5);        ALOGI(&quot;onTransact NOTIFY_MESSAGE reply 5&quot;);        break;    }</code></pre><p>调试时限制性 binderCService &amp; 启动service，然后binder_test在启动client端就可以了<br>结果如下：</p><pre><code>I         : MyPrint cservice is starting up...I         : binder_test transact  FIRST_CALL_TRANSACTIONI MyPrint : onTransact NOTIFY_MESSAGE messageI MyPrint : onTransact NOTIFY_MESSAGE reply 5I         : binder_test transact : 5</code></pre><h3 id="4-parcel介绍和使用"><a href="#4-parcel介绍和使用" class="headerlink" title="4.parcel介绍和使用"></a>4.parcel介绍和使用</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//String16 String8 Const char*关系</span>String16 name16 <span class="token operator">=</span> <span class="token function">String16</span><span class="token punctuation">(</span><span class="token string">"HellOThEWrolD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//定义初始化String16</span>String8 name8 <span class="token operator">=</span> <span class="token function">String8</span><span class="token punctuation">(</span>name16<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//String16转为String8</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>C_name8 <span class="token operator">=</span> name8<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//String8转为const char *</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span>到<span class="token keyword">char</span><span class="token operator">*</span>的转换：<span class="token keyword">char</span> <span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>C_name8<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> C_name8<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>java端Parcel类使用如下</p><pre class=" language-cpp"><code class="language-cpp">Parcel data <span class="token operator">=</span> Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取Parcel</span>data<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//writeString写入数据</span>Parcel reply <span class="token operator">=</span> Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>binder<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span>DELETE_FILE<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//binder transact</span>data<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//释放parcel</span>reply<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>C Server端</p><pre class=" language-cpp"><code class="language-cpp">status_t MyPrint<span class="token operator">::</span><span class="token function">onTransact</span><span class="token punctuation">(</span>uint32_t code<span class="token punctuation">,</span> <span class="token keyword">const</span> Parcel<span class="token operator">&amp;</span> data<span class="token punctuation">,</span> Parcel<span class="token operator">*</span> reply<span class="token punctuation">,</span> uint32_t flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> DELETE_FILE<span class="token operator">:</span> <span class="token punctuation">{</span>        String16 message <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">readString16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//readString16</span>        <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"onTransact DELETE_FILE message = %s"</span><span class="token punctuation">,</span> <span class="token function">String8</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//先转为Sring8,在使用.string()转为Const char*才可以打印</span>        reply<span class="token operator">-</span><span class="token operator">></span><span class="token function">writeInt32</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//写Int</span>        reply<span class="token operator">-</span><span class="token operator">></span><span class="token function">writeInt32</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ALOGI</span><span class="token punctuation">(</span><span class="token string">"onTransact DELETE_FILE reply 6 7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>C Client端</p><pre class=" language-cpp"><code class="language-cpp">Parcel data<span class="token punctuation">,</span> reply<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//初始化</span><span class="token keyword">int</span> cmd <span class="token operator">=</span> IBinder<span class="token operator">::</span>FIRST_CALL_TRANSACTION<span class="token punctuation">;</span>String8 <span class="token function">src1</span><span class="token punctuation">(</span><span class="token string">"HelloDayi "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span><span class="token function">writeString8</span><span class="token punctuation">(</span>src1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//write</span>ret <span class="token operator">=</span> ibinder<span class="token operator">-</span><span class="token operator">></span><span class="token function">transact</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span><span class="token function">freeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//释放</span></code></pre><h3 id="5-service端-selinux"><a href="#5-service端-selinux" class="headerlink" title="5.service端 selinux"></a>5.service端 selinux</h3><p>测试使用adb shell setenforce 0关闭selinux检测，然后binderCService &amp;来启动service</p>]]></content>
      
      
      <categories>
          
          <category> Android Binder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binder通信介绍和示例(java client端和java service端)</title>
      <link href="/2019/09/21/binder/binder-tong-xin-jie-shao-he-shi-li-java-client-duan-he-java-service-duan/"/>
      <url>/2019/09/21/binder/binder-tong-xin-jie-shao-he-shi-li-java-client-duan-he-java-service-duan/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-AIDL-binderService来实现"><a href="#一、-AIDL-binderService来实现" class="headerlink" title="一、 AIDL binderService来实现"></a>一、 AIDL binderService来实现</h2><h3 id="1-aidl-server端"><a href="#1-aidl-server端" class="headerlink" title="1.aidl server端"></a>1.aidl server端</h3><a id="more"></a><p>创建aidl文件，写接口方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// IDeleteFIle.aidl</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Declare any non-default types here with import statements</span><span class="token keyword">interface</span> <span class="token class-name">IDeleteFIle</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span> String aString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><!-- more --><p>写IDeleteFIle.Stub文件，来实现方法具体需要做的事情</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeleteFile</span> <span class="token keyword">extends</span> <span class="token class-name">IDeleteFIle<span class="token punctuation">.</span>Stub</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  String TAG <span class="token operator">=</span> <span class="token string">"BinderServer"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>String aString<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"delete file: "</span> <span class="token operator">+</span> aString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我这里实现是client端binderService时，会执行Service.onCreate方法，在这里初始化stub的类，然后bind成功后在onBind返回mDeleteFile<br>client端就可以通过IBinder来操作DeleteFile 类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeleteBinderService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  String TAG <span class="token operator">=</span> <span class="token string">"BinderServer"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DeleteBinderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  DeleteFile mDeleteFile<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"oncrete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mDeleteFile <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mDeleteFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> IBinder <span class="token function">onBind</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mDeleteFile<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">onStartCommand</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartCommand</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> startId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mDeleteFile <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onUnbind</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mDeleteFile <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onUnbind</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>AndroidManifest.xml中需要定义让其他process可以访问此service</p><pre><code>&lt;service     android:name=&quot;.DeleteBinderService&quot;     android:enabled=&quot;true&quot;     android:exported=&quot;true&quot;&gt;&lt;/service&gt;</code></pre><h3 id="2-aidl-client端"><a href="#2-aidl-client端" class="headerlink" title="2.aidl client端"></a>2.aidl client端</h3><p>***需要把service端的aidl文件，连路径和文件一起拷贝到client app中</p><p>client端bindService(intent, mServiceConnection , Context.BIND_AUTO_CREATE)获取到Ibinder对象就可以操作了</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mbindertest<span class="token punctuation">;</span><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>ComponentName<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>ServiceConnection<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>KeyEvent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>MotionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  String TAG <span class="token operator">=</span> <span class="token string">"BinderClient"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PKG_NAME <span class="token operator">=</span> <span class="token string">"com.example.binderserver"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CLS_NAME <span class="token operator">=</span> <span class="token string">"com.example.binderserver.DeleteBinderService"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> IDeleteFIle idel<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bindServiceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">setPackage</span><span class="token punctuation">(</span>PKG_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">setClassName</span><span class="token punctuation">(</span>PKG_NAME<span class="token punctuation">,</span>CLS_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> mServiceConnection <span class="token punctuation">,</span> Context<span class="token punctuation">.</span>BIND_AUTO_CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ServiceConnection mServiceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span>ComponentName componentName<span class="token punctuation">,</span> IBinder iBinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"onServiceConnected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             idel <span class="token operator">=</span> IDeleteFIle<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>iBinder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span>ComponentName componentName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            idel <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unbindServiceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">unbindService</span><span class="token punctuation">(</span>mServiceConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"time: "</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>idel <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                idel<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"time: "</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unbindServiceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bindServiceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-IDeleteFIle-Stub-asInterface-iBinder"><a href="#3-IDeleteFIle-Stub-asInterface-iBinder" class="headerlink" title="3.IDeleteFIle.Stub.asInterface(iBinder);"></a>3.IDeleteFIle.Stub.asInterface(iBinder);</h3><p>IDeleteFIle编译生成文件如下，IDeleteFIle asInterface(android.os.IBinder obj)返回return new com.example.binderserver.IDeleteFIle.Stub.Proxy(obj);是IDeleteFIle.Stub.Proxy远程调用</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * This file is auto-generated.  DO NOT MODIFY. */</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Declare any non-default types here with import statements</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDeleteFIle</span> <span class="token keyword">extends</span> <span class="token class-name">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IInterface</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/** Default implementation for IDeleteFIle. */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Default</span> <span class="token keyword">implements</span> <span class="token class-name">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle</span>  <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String aString<span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/** Local-side IPC implementation stub class. */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Stub</span> <span class="token keyword">extends</span> <span class="token class-name">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Binder</span> <span class="token keyword">implements</span> <span class="token class-name">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle</span>  <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String DESCRIPTOR <span class="token operator">=</span> <span class="token string">"com.example.binderserver.IDeleteFIle"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Construct the stub at attach it to the interface. */</span>    <span class="token keyword">public</span> <span class="token function">Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachInterface</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Cast an IBinder object into an com.example.binderserver.IDeleteFIle interface,     * generating a proxy if needed.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle <span class="token function">asInterface</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IInterface iin <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">queryLocalInterface</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>iin<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>iin <span class="token keyword">instanceof</span> <span class="token class-name">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle<span class="token punctuation">)</span>iin<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span>Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTransact</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel data<span class="token punctuation">,</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel reply<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException    <span class="token punctuation">{</span>      java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String descriptor <span class="token operator">=</span> DESCRIPTOR<span class="token punctuation">;</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">case</span> INTERFACE_TRANSACTION<span class="token operator">:</span>        <span class="token punctuation">{</span>          reply<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> TRANSACTION_delete<span class="token operator">:</span>        <span class="token punctuation">{</span>          data<span class="token punctuation">.</span><span class="token function">enforceInterface</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>          java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String _arg0<span class="token punctuation">;</span>          _arg0 <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>_arg0<span class="token punctuation">)</span><span class="token punctuation">;</span>          reply<span class="token punctuation">.</span><span class="token function">writeNoException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTransact</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle</span>    <span class="token punctuation">{</span>      <span class="token keyword">private</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder mRemote<span class="token punctuation">;</span>      <span class="token function">Proxy</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder remote<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        mRemote <span class="token operator">=</span> remote<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">return</span> mRemote<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String <span class="token function">getInterfaceDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">return</span> DESCRIPTOR<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String aString<span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException      <span class="token punctuation">{</span>        android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel _data <span class="token operator">=</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel _reply <span class="token operator">=</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          _data<span class="token punctuation">.</span><span class="token function">writeInterfaceToken</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>          _data<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>aString<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">boolean</span> _status <span class="token operator">=</span> mRemote<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span>Stub<span class="token punctuation">.</span>TRANSACTION_delete<span class="token punctuation">,</span> _data<span class="token punctuation">,</span> _reply<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_status <span class="token operator">&amp;&amp;</span> <span class="token function">getDefaultImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">getDefaultImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>aString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          _reply<span class="token punctuation">.</span><span class="token function">readException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>          _reply<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          _data<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle sDefaultImpl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TRANSACTION_delete <span class="token operator">=</span> <span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder<span class="token punctuation">.</span>FIRST_CALL_TRANSACTION <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">setDefaultImpl</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle impl<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Stub<span class="token punctuation">.</span>Proxy<span class="token punctuation">.</span>sDefaultImpl <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> impl <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Stub<span class="token punctuation">.</span>Proxy<span class="token punctuation">.</span>sDefaultImpl <span class="token operator">=</span> impl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>binderserver<span class="token punctuation">.</span>IDeleteFIle <span class="token function">getDefaultImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Stub<span class="token punctuation">.</span>Proxy<span class="token punctuation">.</span>sDefaultImpl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String aString<span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="二、-AIDL-ServiceManager-addService来实现"><a href="#二、-AIDL-ServiceManager-addService来实现" class="headerlink" title="二、 AIDL ServiceManager.addService来实现"></a>二、 AIDL ServiceManager.addService来实现</h2><h3 id="1-server端"><a href="#1-server端" class="headerlink" title="1.server端"></a>1.server端</h3><p>//首先写aidl文件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// IDeleteFIle.aidl</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>serviceserver<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Declare any non-default types here with import statements</span><span class="token keyword">interface</span> <span class="token class-name">IDeleteFIle</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Demonstrates some basic types that you can use as parameters     * and return values in AIDL.     */</span>    <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span>String aString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>//然后写具体实现的stub文件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>serviceserver<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeleteFile</span> <span class="token keyword">extends</span> <span class="token class-name">IDeleteFIle<span class="token punctuation">.</span>Stub</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span>String aString<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>FileService<span class="token punctuation">.</span>TAG <span class="token punctuation">,</span> aString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>写具体的Service文件，作用就是addService，新建对象new<br>DeleteFile()，好让client调用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>serviceserver<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>ServiceManager<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"BinderServer"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SERVICE_NAME <span class="token operator">=</span> <span class="token string">"testservice"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">FileService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">publishMyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publishMyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"publishMyService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServiceManager<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span>SERVICE_NAME<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DeleteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Service启用，我这里是使用activity来测试，比如系统有接收开机广播，还有systemserver来启动</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>serviceserver<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"BinderServer"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> FileService fileService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"initService"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fileService <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            fileService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-Client端"><a href="#2-Client端" class="headerlink" title="2.Client端"></a>2.Client端</h3><p>把aidl文件放入到client端，添加ANdroid.mk编译</p><p>Client端通过IDeleteFIle.Stub.asInterface(ServiceManager.getService(“testservice”));来调用，和前面一样</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>serviceclient<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>MotionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TabHost<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>ServiceManager<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>serviceserver<span class="token punctuation">.</span>IDeleteFIle<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"BinderClient"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> IDeleteFIle idel<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getBinderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBinderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"getBinderService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        idel <span class="token operator">=</span> IDeleteFIle<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>ServiceManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token string">"testservice"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onTouchEvent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>idel <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"idel.delete"</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                idel<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意事项：</p><ul><li>1.在测试时会有selinux问题，使用setenfroce 0来调试，没解selilnux</li><li>2.这两种特点，一个是放在系统里一直运行，bindService可以唤醒他，并且unbind</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android Binder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binder调用结构流程图</title>
      <link href="/2019/09/21/lunbo/binder-diao-yong-jie-gou-liu-cheng-tu/"/>
      <url>/2019/09/21/lunbo/binder-diao-yong-jie-gou-liu-cheng-tu/</url>
      
        <content type="html"><![CDATA[<p>参考link:</p><ul><li><a href="http://gityuan.com/2016/09/04/binder-start-service/" target="_blank" rel="noopener">http://gityuan.com/2016/09/04/binder-start-service/</a>   //彻底理解Android Binder通信架构</li><li><a href="http://gityuan.com/2018/02/17/monkey-deadlock/" target="_blank" rel="noopener">http://gityuan.com/2018/02/17/monkey-deadlock/</a>    //跑monkey压力测试过程的冻屏案例</li></ul><a id="more"></a><h3 id="1-binder调用流程图"><a href="#1-binder调用流程图" class="headerlink" title="1.binder调用流程图"></a>1.binder调用流程图</h3><p><img src="https://raw.githubusercontent.com/wd623894174/blogPic/master/binder/binderIoctl.jpeg" alt></p><ul><li>1.发起端线程向Binder Driver发起binder ioctl请求后, 便采用环不断talkWithDriver,此时该线程处于阻塞状态, 直到收到如下BR_XXX命令才会结束该过程.<br>BR_TRANSACTION_COMPLETE: oneway模式下,收到该命令则退出<br>BR_REPLY: 非oneway模式下,收到该命令才退出;<br>BR_DEAD_REPLY: 目标进程/线程/binder实体为空, 以及释放正在等待reply的binder thread或者binder buffer;<br>BR_FAILED_REPLY: 情况较多,比如非法handle, 错误事务栈, security, 内存不足, buffer不足, 数据拷贝失败, 节点创建失败, 各种不匹配等问题<br>BR_ACQUIRE_RESULT: 目前未使用的协议;</li><li>2.左图中waitForResponse收到BR_TRANSACTION_COMPLETE,则直接退出循环, 则没有机会执行executeCommand()方法, 故将其颜色画为灰色. 除以上5种BR_XXX命令, 当收到其他BR命令,则都会执行executeCommand过程.</li><li>3.目标Binder线程创建后, 便进入joinThreadPool()方法, 采用循环不断地循环执行getAndExecuteCommand()方法, 当bwr的读写buffer都没有数据时,则阻塞在binder_thread_read的wait_event过程. 另外,正常情况下binder线程一旦创建则不会退出.</li></ul><h3 id="2-binder通信协议图"><a href="#2-binder通信协议图" class="headerlink" title="2.binder通信协议图"></a>2.binder通信协议图</h3><p><img src="https://raw.githubusercontent.com/wd623894174/blogPic/master/binder/transaction.jpeg" alt></p><ul><li>Binder客户端或者服务端向Binder Driver发送的命令都是以BC_开头,例如本文的BC_TRANSACTION和BC_REPLY, 所有Binder Driver向Binder客户端或者服务端发送的命令则都是以BR_开头, 例如本文中的BR_TRANSACTION和BR_REPLY.</li><li>只有当BC_TRANSACTION或者BC_REPLY时, 才调用binder_transaction()来处理事务. 并且都会回应调用者一个BINDER_WORK_TRANSACTION_COMPLETE事务, 经过binder_thread_read()会转变成BR_TRANSACTION_COMPLETE.</li><li>startService过程便是一个非oneway的过程, 那么oneway的通信过程如下所述.</li></ul><p>上图是非oneway通信过程的协议图, 下图则是对于oneway场景下的通信协议图:</p><p><img src="https://raw.githubusercontent.com/wd623894174/blogPic/master/binder/transaction_no_oneway.jpeg" alt></p><h3 id="3-binder-通信log"><a href="#3-binder-通信log" class="headerlink" title="3.binder 通信log"></a>3.binder 通信log</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//binder client  java log (BinderProxy.transact)  ,native log(IPCThreadState15waitForResponse) ,kernel log (kernel: binder_ioctl_write_read)</span><span class="token string">"Binder:1930_5"</span> prio<span class="token operator">=</span><span class="token number">5</span> tid<span class="token operator">=</span><span class="token number">85</span> Native  <span class="token operator">|</span> group<span class="token operator">=</span><span class="token string">"main"</span> sCount<span class="token operator">=</span><span class="token number">1</span> dsCount<span class="token operator">=</span><span class="token number">0</span> obj<span class="token operator">=</span><span class="token number">0x13cb1820</span> self<span class="token operator">=</span><span class="token number">0x7f79fcd400</span>  <span class="token operator">|</span> sysTid<span class="token operator">=</span><span class="token number">5316</span> nice<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span> cgrp<span class="token operator">=</span><span class="token keyword">default</span> sched<span class="token operator">=</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span> handle<span class="token operator">=</span><span class="token number">0x7f6e1ff450</span>  <span class="token operator">|</span> state<span class="token operator">=</span>S schedstat<span class="token operator">=</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token punctuation">)</span> utm<span class="token operator">=</span><span class="token number">83</span> stm<span class="token operator">=</span><span class="token number">56</span> core<span class="token operator">=</span><span class="token number">2</span> HZ<span class="token operator">=</span><span class="token number">100</span>  <span class="token operator">|</span> stack<span class="token operator">=</span><span class="token number">0x7f6e105000-</span><span class="token number">0x7f6e107000</span> stackSize<span class="token operator">=</span>1005KB  <span class="token operator">|</span> held mutexes<span class="token operator">=</span>  kernel<span class="token operator">:</span> __switch_to<span class="token operator">+</span><span class="token number">0x88</span><span class="token operator">/</span><span class="token number">0x94</span>  kernel<span class="token operator">:</span> binder_thread_read<span class="token operator">+</span><span class="token number">0x4e4</span><span class="token operator">/</span><span class="token number">0x1140</span>   <span class="token comment" spellcheck="true">//binder driver log</span>  kernel<span class="token operator">:</span> binder_ioctl_write_read<span class="token operator">+</span><span class="token number">0x1e0</span><span class="token operator">/</span><span class="token number">0x31c</span>  kernel<span class="token operator">:</span> binder_ioctl<span class="token operator">+</span><span class="token number">0x28c</span><span class="token operator">/</span><span class="token number">0x710</span>  kernel<span class="token operator">:</span> do_vfs_ioctl<span class="token operator">+</span><span class="token number">0x48c</span><span class="token operator">/</span><span class="token number">0x564</span>  kernel<span class="token operator">:</span> SyS_ioctl<span class="token operator">+</span><span class="token number">0x60</span><span class="token operator">/</span><span class="token number">0x88</span>  kernel<span class="token operator">:</span> el0_svc_naked<span class="token operator">+</span><span class="token number">0x24</span><span class="token operator">/</span><span class="token number">0x28</span>  <span class="token keyword">native</span><span class="token operator">:</span> #<span class="token number">00</span> pc 000000000007831c  <span class="token operator">/</span>system<span class="token operator">/</span>lib64<span class="token operator">/</span>libc<span class="token punctuation">.</span><span class="token function">so</span> <span class="token punctuation">(</span>__ioctl<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token keyword">native</span><span class="token operator">:</span> #<span class="token number">01</span> pc <span class="token number">0000000000020020</span>  <span class="token operator">/</span>system<span class="token operator">/</span>lib64<span class="token operator">/</span>libc<span class="token punctuation">.</span><span class="token function">so</span> <span class="token punctuation">(</span>ioctl<span class="token operator">+</span><span class="token number">140</span><span class="token punctuation">)</span>  <span class="token keyword">native</span><span class="token operator">:</span> #<span class="token number">02</span> pc 0000000000055b14  <span class="token operator">/</span>system<span class="token operator">/</span>lib64<span class="token operator">/</span>libbinder<span class="token punctuation">.</span><span class="token function">so</span> <span class="token punctuation">(</span>_ZN7android14IPCThreadState14talkWithDriverEb<span class="token operator">+</span><span class="token number">256</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//binder native log</span>  <span class="token keyword">native</span><span class="token operator">:</span> #<span class="token number">03</span> pc 0000000000056ab8  <span class="token operator">/</span>system<span class="token operator">/</span>lib64<span class="token operator">/</span>libbinder<span class="token punctuation">.</span><span class="token function">so</span> <span class="token punctuation">(</span>_ZN7android14IPCThreadState15waitForResponseEPNS_6ParcelEPi<span class="token operator">+</span><span class="token number">708</span><span class="token punctuation">)</span>  <span class="token keyword">native</span><span class="token operator">:</span> #<span class="token number">04</span> pc 000000000004b504  <span class="token operator">/</span>system<span class="token operator">/</span>lib64<span class="token operator">/</span>libbinder<span class="token punctuation">.</span><span class="token function">so</span> <span class="token punctuation">(</span>_ZN7android8BpBinder8transactEjRKNS_6ParcelEPS1_j<span class="token operator">+</span><span class="token number">72</span><span class="token punctuation">)</span>  <span class="token keyword">native</span><span class="token operator">:</span> #<span class="token number">05</span> pc 00000000000ff69c  <span class="token operator">/</span>system<span class="token operator">/</span>lib64<span class="token operator">/</span>libandroid_runtime<span class="token punctuation">.</span><span class="token function">so</span> <span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span><span class="token punctuation">)</span>  <span class="token keyword">native</span><span class="token operator">:</span> #<span class="token number">06</span> pc <span class="token number">0000000001117058</span>  <span class="token operator">/</span>data<span class="token operator">/</span>dalvik<span class="token operator">-</span>cache<span class="token operator">/</span>arm64<span class="token operator">/</span>system<span class="token annotation punctuation">@framework</span><span class="token annotation punctuation">@boot</span><span class="token punctuation">.</span><span class="token function">oat</span> <span class="token punctuation">(</span>Java_android_os_BinderProxy_transactNative__ILandroid_os_Parcel_2Landroid_os_Parcel_2I<span class="token operator">+</span><span class="token number">196</span><span class="token punctuation">)</span>  at android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>BinderProxy<span class="token punctuation">.</span><span class="token function">transactNative</span><span class="token punctuation">(</span>Native method<span class="token punctuation">)</span>  at android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>BinderProxy<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span>Binder<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">615</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//binder java log </span>  at android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>IActivityController$Stub$Proxy<span class="token punctuation">.</span><span class="token function">appCrashed</span><span class="token punctuation">(</span>IActivityController<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">222</span><span class="token punctuation">)</span>  at com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>server<span class="token punctuation">.</span>am<span class="token punctuation">.</span>AppErrors<span class="token punctuation">.</span><span class="token function">handleAppCrashInActivityController</span><span class="token punctuation">(</span>AppErrors<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">450</span><span class="token punctuation">)</span>  at com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>server<span class="token punctuation">.</span>am<span class="token punctuation">.</span>AppErrors<span class="token punctuation">.</span><span class="token function">crashApplicationInner</span><span class="token punctuation">(</span>AppErrors<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">334</span><span class="token punctuation">)</span>  <span class="token operator">-</span> locked <span class="token operator">&lt;</span><span class="token number">0x098877e9</span><span class="token operator">></span> <span class="token punctuation">(</span>a com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>server<span class="token punctuation">.</span>am<span class="token punctuation">.</span>ActivityManagerService<span class="token punctuation">)</span>  at com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>server<span class="token punctuation">.</span>am<span class="token punctuation">.</span>AppErrors<span class="token punctuation">.</span><span class="token function">crashApplication</span><span class="token punctuation">(</span>AppErrors<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">309</span><span class="token punctuation">)</span>  at com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>server<span class="token punctuation">.</span>am<span class="token punctuation">.</span>ActivityManagerService<span class="token punctuation">.</span><span class="token function">handleApplicationCrashInner</span><span class="token punctuation">(</span>ActivityManagerService<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">13799</span><span class="token punctuation">)</span>  at com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>server<span class="token punctuation">.</span>am<span class="token punctuation">.</span>ActivityManagerService<span class="token punctuation">.</span><span class="token function">handleApplicationCrash</span><span class="token punctuation">(</span>ActivityManagerService<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">13781</span><span class="token punctuation">)</span>  at android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>ActivityManagerNative<span class="token punctuation">.</span><span class="token function">onTransact</span><span class="token punctuation">(</span>ActivityManagerNative<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1646</span><span class="token punctuation">)</span>  at com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>server<span class="token punctuation">.</span>am<span class="token punctuation">.</span>ActivityManagerService<span class="token punctuation">.</span><span class="token function">onTransact</span><span class="token punctuation">(</span>ActivityManagerService<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2886</span><span class="token punctuation">)</span>  at android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Binder<span class="token punctuation">.</span><span class="token function">execTransact</span><span class="token punctuation">(</span>Binder<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">565</span><span class="token punctuation">)</span></code></pre><pre><code>//binder server  onTransact&quot;Binder:17922_1&quot; prio=5 tid=8 Blocked  | group=&quot;main&quot; sCount=1 dsCount=0 obj=0x12c69940 self=0x7f97e12400  | sysTid=17961 nice=-2 cgrp=default sched=0/0 handle=0x7f96286450  | state=S schedstat=( 0 0 0 ) utm=0 stm=0 core=4 HZ=100  | stack=0x7f9618c000-0x7f9618e000 stackSize=1005KB  | held mutexes=  at com.android.commands.monkey.Monkey$ActivityController.appCrashed(Monkey.java:306)  - waiting to lock &lt;0x0b9d2b64&gt; (a com.android.commands.monkey.Monkey) held by thread 1  at android.app.IActivityController$Stub.onTransact(IActivityController.java:92)  at android.os.Binder.execTransact(Binder.java:565)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android Binder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux16.04 搭建openGrok</title>
      <link href="/2019/06/10/envconfig/linux16.04-da-jian-opengrok/"/>
      <url>/2019/06/10/envconfig/linux16.04-da-jian-opengrok/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/jerkspan/article/details/87861289" target="_blank" rel="noopener">https://blog.csdn.net/jerkspan/article/details/87861289</a></p><h3 id="1-安装tomcat8"><a href="#1-安装tomcat8" class="headerlink" title="1.安装tomcat8"></a>1.安装tomcat8</h3><pre><code> sudo apt-get install exuberant-ctags tomcat8 sudo /etc/init.d/tomcat8 restart   //重启tomcat8浏览器中打开http://localhost:8080/，出现下图说明tomcat8没问题。//控制服务sudo /etc/init.d/tomcat8 startsudo /etc/init.d/tomcat8 stopsudo /etc/init.d/tomcat8 restart</code></pre><!-- add more --><h3 id="2-安装universal-ctags"><a href="#2-安装universal-ctags" class="headerlink" title="2.安装universal-ctags"></a>2.安装universal-ctags</h3><p>不要再使用 Exuberant ctags，因为已经不再维护更新，对于新版本的Opengrok支持度不好，所以先卸载掉:</p><pre><code>sudo apt-get remove --purge exuberant-ctagsgithub地址：https://github.com/universal-ctags/ctags</code></pre><p>下载完成后，进入ctags文件夹，依次执行以下命令，完成编译和安装：</p><pre><code>sudo apt install autoconfcd /tmpgit clone https://github.com/universal-ctags/ctags     //下载zip解压出来的autogen.sh之类文件的权限不对，建议这种方式，也可以把所有文件设置为777试下cd ctags./autogen.sh./configure --prefix=/opt/software/universal-ctags  # 我的安装路径。就使用这个，后面索引就是这个路径make -j8sudo make install</code></pre><h3 id="3-安装openGrok"><a href="#3-安装openGrok" class="headerlink" title="3.安装openGrok"></a>3.安装openGrok</h3><pre><code>下载地址:https://github.com/oracle/opengrok/releases   //我使用的是opengrok-1.2.23.tar.gz，使用tar -zxvf opengrok-1.2.23.tar.gz  -C ~ 解压(-C解压到指定目录)我这里解压在这个目录 cd ~/software/opengrok/opengrok-1.2.23(~/software)cd ~/software/opengrok/opengrok-1.2.23mkdir src data etc    //src 源码路径   // etc 配置    //data 索引b. 指定android源码位置原本需要把源码放到src下，因为我的android源代码放在了~/android/aosp下，没必要把它整个移动到src下，所以在src下建了个9.0.0的软连接指向它：cd ~/software/opengrok/opengrok-1.2.23/srcln -s ~/software/src/ enginner  (~/software/src/ : 需要链接的源码路径  enginner : src下的链接  )ubuntu@ubuntu:~/software/opengrok/opengrok-1.2.23/src$ ll总用量 8drwxrwxr-x  2 ubuntu ubuntu 4096 7月   3 14:34 ./drwxrwxr-x 10 ubuntu ubuntu 4096 7月   3 14:54 ../lrwxrwxrwx  1 ubuntu ubuntu   28 7月   3 14:34 enginner -&gt; ~/software/src//复制source.war到tomcat中：(不用解压，会自动解压)cp ~/software/opengrok/opengrok-1.2.23/lib/source.war /var/lib/tomcat8/webapps/ubuntu@ubuntu:~/software/opengrok/opengrok-1.2.23$ sudo cp -rf source.war /var/lib/tomcat8/webapps/d. 配置CONFIGURATION：在/var/lib/tomcat8/webapps/source/WEB-INF/web.xml中修改configuration.xml的路径，gedit /var/lib/tomcat8/webapps/source/WEB-INF/web.xml    &lt;context-param&gt;        &lt;description&gt;Full path to the configuration file where OpenGrok can read its configuration&lt;/description&gt;        &lt;param-name&gt;CONFIGURATION&lt;/param-name&gt;        &lt;param-value&gt;~/software/opengrok/opengrok-1.2.23/etc/configuration.xml&lt;/param-value&gt;  //自己创建的etc路径    &lt;/context-param&gt;e. 重启Tomcat，在浏览器中输入 http://IP地址:8080/source，已经可以看到Opengrok的雏形，不过会有一个错误，是因为还未建立索引，所以configuration.xml还没生成，先不用关注：http://10.100.xxx.xxx:8080/sourcehttp://localhost:8080/source///提示信息如下CONFIGURATION parameter has not been configured in web.xml! Please configure your webapp.Unable to determine source root path. Missing configuration?</code></pre><h3 id="4-创建索引"><a href="#4-创建索引" class="headerlink" title="4.创建索引"></a>4.创建索引</h3><pre><code>//使用此命令来创建索引，具体文件键附件openGrok.shjava -Xmx8g -jar ~/software/opengrok/opengrok-1.2.23/lib/opengrok.jar \    -c /opt/software/universal-ctags/bin/ctags \    -s ~/software/src \    -d ~/software/opengrok/opengrok-1.2.23/data -H -P -S -G -v \    -W ~/software/opengrok/opengrok-1.2.23/etc/configuration.xml \    -U http://localhost:8080/source \    -m 256#-Xmx8g：配置Java 最大堆内存为8g，防止内存溢出。#-jar：指定opengrok.jar包。#-c：指定universal-ctags的路径，configure配置的路径，此时使用which ctags得到的路径是/usr/bin/ctags，是会报错的#-s：指定源码路径，就是上面的新建的src。#-d：指定索引文件存放路径，就是上面新建的data。#-W：指定configuration.xml的路径，就是上面新建的etc。#-m：指定opengrok索引时的缓存大小，默认只有16M。把如上命令写入openGrok.sh，使用./openGrok.sh运行就可以</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> openGrok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pixel 刷机AOSP 和ubuntu adb配置</title>
      <link href="/2019/06/10/envconfig/pixel-shua-ji-aosp-he-ubuntu-adb-pei-zhi/"/>
      <url>/2019/06/10/envconfig/pixel-shua-ji-aosp-he-ubuntu-adb-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>环境配置参考网址:</p><ul><li><p><a href="https://blog.csdn.net/wd229047557/article/details/93134104" target="_blank" rel="noopener">ubuntu16.04配置和aosp下载</a></p></li><li><p><a href="https://blog.csdn.net/wd229047557/article/details/93645329" target="_blank" rel="noopener">Pxiel手机 AOSP下载及编译</a></p></li><li><p><a href="https://blog.csdn.net/wd229047557/article/details/91491113" target="_blank" rel="noopener">Ubuntu16.04下安装破解secureCRT和secureFX的操作记录</a></p></li><li><p><a href="https://blog.csdn.net/wd229047557/article/details/94207307" target="_blank" rel="noopener">Pixel 刷机AOSP和ubuntu adb配置</a></p></li></ul><h3 id="1-Linux16-04配置adb-fastboot"><a href="#1-Linux16-04配置adb-fastboot" class="headerlink" title="1.Linux16.04配置adb fastboot"></a>1.Linux16.04配置adb fastboot</h3><pre><code>//下载platform-tools,也可以使用android studio自带的wget https://dl.google.com/android/repository/platform-tools-latest-linux.zip//将软件包解压到指定位置sudo unzip -d /usr/local/sbin platform-tools-latest-linux.zip//sudo vim ~/.bashrc添加环境变量export PATH=$PATH:/usr/local/sbin/platform-tools//更新source,就可以新开终端adb了source ~/.bashrc</code></pre><h3 id="2-Linux配置adb设备"><a href="#2-Linux配置adb设备" class="headerlink" title="2.Linux配置adb设备"></a>2.Linux配置adb设备</h3><pre><code>lsusb命令查看设备Bus 001 Device 004: ID 18d1:4ee7 Google Inc.//添加对应设备sudo vim /etc/udev/rules.d/51-android.rules//cat内容如下ubuntu@ubuntu:~/work/project/androidp/out/target/product/sailfish$ cat /etc/udev/rules.d/51-android.rules #Google Inc. SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;18d1&quot;, MODE=&quot;0666&quot;, GROUP=&quot;plugdev&quot;//需要重启udev,这里可以直接重启linux</code></pre><h3 id="3-烧写rom到pixel"><a href="#3-烧写rom到pixel" class="headerlink" title="3.烧写rom到pixel"></a>3.烧写rom到pixel</h3><pre><code>需要下载对应驱动(如 google_devices-marlin-ppr2.180905.006.a1-535eb5b3.tgz  qcom-marlin-ppr2.180905.006.a1-86b90139.tgz)放到aosp根目录下，然后运行./extract-google_devices-marlin.sh  ./extract-qcom-marlin.sh  放入驱动到vendor目录ubuntu@ubuntu:~/work/project/androidp$ ls | grep marliextract-google_devices-marlin.shextract-qcom-marlin.shgoogle_devices-marlin-ppr2.180905.006.a1-535eb5b3.tgzqcom-marlin-ppr2.180905.006.a1-86b90139.tgz//编译source build/envsetup.shlunch aosp_sailfish-userdebugmake clean; make -j8//刷机需要先解bootloader,开发者选项中oem lock置灰无法点击的话，请恢复出厂设置后跳过开机向导，然后连接翻墙wifi，在打开开发者选项就可以了//开始ubuntu@ubuntu:~/work/project/androidp/out/target/product/sailfish$ adb reboot bootloader    //1ubuntu@ubuntu:~/work/project/androidp/out/target/product/sailfish$ export ANDROID_PRODUCT_OUT=~/work/project/androidp/out/target/product/sailfish    //2 ubuntu@ubuntu:~/work/project/androidp/out/target/product/sailfish$ fastboot flashall -w   //3</code></pre><pre><code>结果如下--------------------------------------------Bootloader Version...: 8996-012001-1812132253Baseband Version.....: 8996-130281-1903110834Serial Number........: FA6AB0310377--------------------------------------------Checking &#39;product&#39;                                 OKAY [  0.049s]Setting current slot to &#39;a&#39;                        OKAY [  0.099s]Sending &#39;boot_a&#39; (29829 KB)                        OKAY [  3.663s]Writing &#39;boot_a&#39;                                   OKAY [  0.257s]Sending sparse &#39;system_a&#39; 1/2 (524284 KB)          OKAY [ 68.037s]Writing &#39;system_a&#39;                                 OKAY [  3.512s]Sending sparse &#39;system_a&#39; 2/2 (502668 KB)          OKAY [ 64.977s]Writing &#39;system_a&#39;                                 OKAY [  3.340s]Sending &#39;system_b&#39; (75964 KB)                      OKAY [ 10.757s]Writing &#39;system_b&#39;                                 OKAY [  0.655s]Erasing &#39;userdata&#39;                                 OKAY [  2.105s]mke2fs 1.44.4 (18-Aug-2018)Creating filesystem with 6509568 4k blocks and 1630208 inodesFilesystem UUID: 854ae47f-afc6-482c-8098-1981dffc2934Superblock backups stored on blocks:     32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,     4096000Allocating group tables: done                            Writing inode tables: done                            Creating journal (32768 blocks): doneWriting superblocks and filesystem accounting information: done   Sending &#39;userdata&#39; (4272 KB)                       OKAY [  0.599s]Writing &#39;userdata&#39;                                 OKAY [  0.107s]Rebooting                                          OKAY [  0.050s]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> pixel编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16.04下安装破解secureCRT和secureFX的操作记录</title>
      <link href="/2019/06/10/envconfig/ubuntu16.04-xia-an-zhuang-po-jie-securecrt-he-securefx-de-cao-zuo-ji-lu/"/>
      <url>/2019/06/10/envconfig/ubuntu16.04-xia-an-zhuang-po-jie-securecrt-he-securefx-de-cao-zuo-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>环境配置参考网址:</p><ul><li><p><a href="https://blog.csdn.net/wd229047557/article/details/93134104" target="_blank" rel="noopener">ubuntu16.04配置和aosp下载</a></p></li><li><p><a href="https://blog.csdn.net/wd229047557/article/details/93645329" target="_blank" rel="noopener">Pxiel手机 AOSP下载及编译</a></p></li><li><p><a href="https://blog.csdn.net/wd229047557/article/details/91491113" target="_blank" rel="noopener">Ubuntu16.04下安装破解secureCRT和secureFX的操作记录</a></p></li><li><p><a href="https://blog.csdn.net/wd229047557/article/details/94207307" target="_blank" rel="noopener">Pixel 刷机AOSP和ubuntu adb配置</a></p></li></ul><h3 id="1-ubuntu更新源"><a href="#1-ubuntu更新源" class="headerlink" title="1.ubuntu更新源"></a>1.ubuntu更新源</h3><p>把如下sources.list内容考入就好，适用于16.04版本</p><pre><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup   #备份当前也就是默认官方的源列表sudo gedit /etc/apt/sources.list         #修改sources.list文件中源的列表，删除全部内容，替换为国内源地址。 保存编辑好的文件。sudo apt-get update                      #更新源列表，换源后必须执行</code></pre><pre><code># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricteddeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-propertiesdeb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</code></pre><h3 id="2-安装编译依赖软件"><a href="#2-安装编译依赖软件" class="headerlink" title="2.安装编译依赖软件"></a>2.安装编译依赖软件</h3><pre><code>1、安装JDK，分别执行以下命令$ sudo apt-get update$ sudo apt-get install openjdk-8-jdk2、切换java版本$ sudo update-alternatives --config java$ sudo update-alternatives --config javac3、安装相关的依赖包    sudo apt-get install git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib  sudo apt-get install libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip</code></pre><h3 id="3-安装samba，并和window共享目录"><a href="#3-安装samba，并和window共享目录" class="headerlink" title="3.安装samba，并和window共享目录"></a>3.安装samba，并和window共享目录</h3><p>//下载samba，第一个需要，其他看情况</p><pre><code>1 sudo apt-get install samba2 sudo apt-get install samba-common 3 sudo apt-get install smbfs     　　//在旧版的Ubuntu中，你可能需要使用 smbfs替代cifs-utils。 4 sudo apt-get install cifs-utils   //新版本 ubuntu1204已安装</code></pre><p>配置共享目录smaba</p><pre><code>1.建立/workspace目录，给权限777，sudo chmod 777 /workspace2.配置samba        sudo vim /etc/samba/smb.conf                 最后面添加内容：    [work]    comment = work    path = /home/wangdong/work    browseable = yes    writable = yes    available = yes    guest ok = yes    public = yes    create mask = 0777    force user = wangdong  #必须加这个，让window创建的，也是wangdong账户，可以看ll3.重启samba服务     sudo /etc/init.d/smbd restart4.删除配置之后自动生成的目录，可以看到是有锁的。在重新建立目录. 在wangdong用户终端下：mkdir work share.建立文件测试就可以了。</code></pre><h3 id="4-下载Android-P代码"><a href="#4-下载Android-P代码" class="headerlink" title="4.下载Android P代码"></a>4.下载Android P代码</h3><p>参照: 是时候下载Android 9.0系统源码了</p><p>####下载repo</p><pre><code>sudo apt-get install gitmkdir ~/binPATH=~/bin:$PATHcurl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo &gt; ~/bin/repochmod a+x ~/bin/reposudo apt-get install python</code></pre><p>####下载源码</p><pre><code>git config --global user.email &quot;piratemorgen@gmail.com&quot;git config --global user.name &quot;piratemorgen&quot;export REPO_URL=&#39;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/&#39;//下载所有代码，如果不需要执行下面这个就够了repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest//指定下载android-9.0.0_r8这个tagrepo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-9.0.0_r8  repo sync</code></pre><h3 id="5-新版本代码下载"><a href="#5-新版本代码下载" class="headerlink" title="5.新版本代码下载"></a>5.新版本代码下载</h3><p><a href="https://source.android.com/setup/start/build-numbers#source-code-tags-and-builds" target="_blank" rel="noopener">https://source.android.com/setup/start/build-numbers#source-code-tags-and-builds</a></p><p>目前新的是android-9.0.0.0_r40 ,r8感觉太老了，建议更新</p><p>对应驱动版本<a href="https://developers.google.cn/android/drivers#sailfishpq3a.190605.003" target="_blank" rel="noopener">https://developers.google.cn/android/drivers#sailfishpq3a.190605.003</a>  (请注意机型)</p><p>Pixel binaries for Android 9.0.0 (PQ3A.190605.003)</p><h3 id="6-kernel内核的下载和编译"><a href="#6-kernel内核的下载和编译" class="headerlink" title="6.kernel内核的下载和编译"></a>6.kernel内核的下载和编译</h3><pre><code>https://source.android.com/setup/build/building-kernels下载命令../bin/repo init -u https://aosp.tuna.tsinghua.edu.cn/kernel/manifest -b android-msm-marlin-3.18-pie-qpr2../bin/repo sync编译命令build/build.sh烧写1种make 时加入环境path路径 export TARGET_PREBUILT_KERNEL=DIST_DIR/Image.lz4-dtb第二种Image.lz4-dtb放入device/google/marlin-kernel</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> pixel编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04配置和aosp下载</title>
      <link href="/2019/06/10/envconfig/ubuntu16.04-pei-zhi-he-aosp-xia-zai/"/>
      <url>/2019/06/10/envconfig/ubuntu16.04-pei-zhi-he-aosp-xia-zai/</url>
      
        <content type="html"><![CDATA[<p>环境配置参考网址:</p><ul><li><p><a href="https://blog.csdn.net/wd229047557/article/details/93134104" target="_blank" rel="noopener">ubuntu16.04配置和aosp下载</a></p></li><li><p><a href="https://blog.csdn.net/wd229047557/article/details/93645329" target="_blank" rel="noopener">Pxiel手机 AOSP下载及编译</a></p></li><li><p><a href="https://blog.csdn.net/wd229047557/article/details/91491113" target="_blank" rel="noopener">Ubuntu16.04下安装破解secureCRT和secureFX的操作记录</a></p></li><li><p><a href="https://blog.csdn.net/wd229047557/article/details/94207307" target="_blank" rel="noopener">Pixel 刷机AOSP和ubuntu adb配置</a></p></li></ul><h3 id="1-ubuntu更新源"><a href="#1-ubuntu更新源" class="headerlink" title="1.ubuntu更新源"></a>1.ubuntu更新源</h3><p>把如下sources.list内容考入就好，适用于16.04版本</p><pre><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup   #备份当前也就是默认官方的源列表sudo gedit /etc/apt/sources.list         #修改sources.list文件中源的列表，删除全部内容，替换为国内源地址。 保存编辑好的文件。sudo apt-get update                      #更新源列表，换源后必须执行</code></pre><pre><code># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricteddeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-propertiesdeb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</code></pre><h3 id="2-安装编译依赖软件"><a href="#2-安装编译依赖软件" class="headerlink" title="2.安装编译依赖软件"></a>2.安装编译依赖软件</h3><pre><code>1、安装JDK，分别执行以下命令$ sudo apt-get update$ sudo apt-get install openjdk-8-jdk2、切换java版本$ sudo update-alternatives --config java$ sudo update-alternatives --config javac3、安装相关的依赖包    sudo apt-get install git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib  sudo apt-get install libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip</code></pre><h3 id="3-安装samba，并和window共享目录"><a href="#3-安装samba，并和window共享目录" class="headerlink" title="3.安装samba，并和window共享目录"></a>3.安装samba，并和window共享目录</h3><p>//下载samba，第一个需要，其他看情况</p><pre><code>1 sudo apt-get install samba2 sudo apt-get install samba-common 3 sudo apt-get install smbfs     　　//在旧版的Ubuntu中，你可能需要使用 smbfs替代cifs-utils。 4 sudo apt-get install cifs-utils   //新版本 ubuntu1204已安装</code></pre><p>配置共享目录smaba</p><pre><code>1.建立/workspace目录，给权限777，sudo chmod 777 /workspace2.配置samba        sudo vim /etc/samba/smb.conf                 最后面添加内容：    [work]    comment = work    path = /home/wangdong/work    browseable = yes    writable = yes    available = yes    guest ok = yes    public = yes    create mask = 0777    force user = wangdong  #必须加这个，让window创建的，也是wangdong账户，可以看ll3.重启samba服务     sudo /etc/init.d/smbd restart4.删除配置之后自动生成的目录，可以看到是有锁的。在重新建立目录. 在wangdong用户终端下：mkdir work share.建立文件测试就可以了。</code></pre><h3 id="4-下载Android-P代码"><a href="#4-下载Android-P代码" class="headerlink" title="4.下载Android P代码"></a>4.下载Android P代码</h3><p>参照: 是时候下载Android 9.0系统源码了</p><p>####下载repo</p><pre><code>sudo apt-get install gitmkdir ~/binPATH=~/bin:$PATHcurl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo &gt; ~/bin/repochmod a+x ~/bin/reposudo apt-get install python</code></pre><p>####下载源码</p><pre><code>git config --global user.email &quot;piratemorgen@gmail.com&quot;git config --global user.name &quot;piratemorgen&quot;export REPO_URL=&#39;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/&#39;//下载所有代码，如果不需要执行下面这个就够了repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest//指定下载android-9.0.0_r8这个tagrepo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-9.0.0_r8  repo sync</code></pre><h3 id="5-新版本代码下载"><a href="#5-新版本代码下载" class="headerlink" title="5.新版本代码下载"></a>5.新版本代码下载</h3><p><a href="https://source.android.com/setup/start/build-numbers#source-code-tags-and-builds" target="_blank" rel="noopener">https://source.android.com/setup/start/build-numbers#source-code-tags-and-builds</a></p><p>目前新的是android-9.0.0.0_r40 ,r8感觉太老了，建议更新</p><p>对应驱动版本<a href="https://developers.google.cn/android/drivers#sailfishpq3a.190605.003" target="_blank" rel="noopener">https://developers.google.cn/android/drivers#sailfishpq3a.190605.003</a>  (请注意机型)</p><p>Pixel binaries for Android 9.0.0 (PQ3A.190605.003)</p><h3 id="6-kernel内核的下载和编译"><a href="#6-kernel内核的下载和编译" class="headerlink" title="6.kernel内核的下载和编译"></a>6.kernel内核的下载和编译</h3><pre><code>https://source.android.com/setup/build/building-kernels下载命令../bin/repo init -u https://aosp.tuna.tsinghua.edu.cn/kernel/manifest -b android-msm-marlin-3.18-pie-qpr2../bin/repo sync编译命令build/build.sh烧写1种make 时加入环境path路径 export TARGET_PREBUILT_KERNEL=DIST_DIR/Image.lz4-dtb第二种Image.lz4-dtb放入device/google/marlin-kernel</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> pixel编译 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
